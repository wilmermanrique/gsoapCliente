/* soapH.h
   Generated by gSOAP 2.8.55 for ah.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_short(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (soap_read_short(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__messageCode_DEFINED
#define SOAP_TYPE_ns3__messageCode_DEFINED

inline void soap_default_ns3__messageCode(struct soap *soap, enum ns3__messageCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__messageCode
	*a = SOAP_DEFAULT_ns3__messageCode;
#else
	*a = (enum ns3__messageCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__messageCode(struct soap*, const char*, int, const enum ns3__messageCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__messageCode2s(struct soap*, enum ns3__messageCode);
SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_in_ns3__messageCode(struct soap*, const char*, enum ns3__messageCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__messageCode(struct soap*, const char*, enum ns3__messageCode *);

SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_new_ns3__messageCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__messageCode(struct soap*, const enum ns3__messageCode *, const char*, const char*);

inline int soap_write_ns3__messageCode(struct soap *soap, enum ns3__messageCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__messageCode(soap, p, "ns3:messageCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__messageCode(struct soap *soap, const char *URL, enum ns3__messageCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__messageCode(soap, p, "ns3:messageCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__messageCode(struct soap *soap, const char *URL, enum ns3__messageCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns3__messageCode(soap, p, "ns3:messageCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_get_ns3__messageCode(struct soap*, enum ns3__messageCode *, const char*, const char*);

inline int soap_read_ns3__messageCode(struct soap *soap, enum ns3__messageCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__messageCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__messageCode(struct soap *soap, const char *URL, enum ns3__messageCode *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__messageCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__messageCode(struct soap *soap, enum ns3__messageCode *p)
{
	if (soap_read_ns3__messageCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ServiceException_DEFINED
#define SOAP_TYPE_ns3__ServiceException_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ServiceException(struct soap*, const char*, int, const ns3__ServiceException *, const char*);
SOAP_FMAC3 ns3__ServiceException * SOAP_FMAC4 soap_in_ns3__ServiceException(struct soap*, const char*, ns3__ServiceException *, const char*);
SOAP_FMAC1 ns3__ServiceException * SOAP_FMAC2 soap_instantiate_ns3__ServiceException(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ServiceException * soap_new_ns3__ServiceException(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ServiceException(soap, n, NULL, NULL, NULL);
}

inline ns3__ServiceException * soap_new_req_ns3__ServiceException(
	struct soap *soap,
	int __sizeparam,
	char **param,
	char *key,
	char *description)
{
	ns3__ServiceException *_p = soap_new_ns3__ServiceException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ServiceException::__sizeparam = __sizeparam;
		_p->ns3__ServiceException::param = param;
		_p->ns3__ServiceException::key = key;
		_p->ns3__ServiceException::description = description;
	}
	return _p;
}

inline ns3__ServiceException * soap_new_set_ns3__ServiceException(
	struct soap *soap,
	int __sizeparam,
	char **param,
	char *key,
	char *description)
{
	ns3__ServiceException *_p = soap_new_ns3__ServiceException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ServiceException::__sizeparam = __sizeparam;
		_p->ns3__ServiceException::param = param;
		_p->ns3__ServiceException::key = key;
		_p->ns3__ServiceException::description = description;
	}
	return _p;
}

inline int soap_write_ns3__ServiceException(struct soap *soap, ns3__ServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ServiceException", p->soap_type() == SOAP_TYPE_ns3__ServiceException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ServiceException(struct soap *soap, const char *URL, ns3__ServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ServiceException", p->soap_type() == SOAP_TYPE_ns3__ServiceException ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ServiceException(struct soap *soap, const char *URL, ns3__ServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ServiceException", p->soap_type() == SOAP_TYPE_ns3__ServiceException ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ServiceException * SOAP_FMAC4 soap_get_ns3__ServiceException(struct soap*, ns3__ServiceException *, const char*, const char*);

inline int soap_read_ns3__ServiceException(struct soap *soap, ns3__ServiceException *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ServiceException(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ServiceException(struct soap *soap, const char *URL, ns3__ServiceException *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ServiceException(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ServiceException(struct soap *soap, ns3__ServiceException *p)
{
	if (soap_read_ns3__ServiceException(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__messageEntity_DEFINED
#define SOAP_TYPE_ns3__messageEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__messageEntity(struct soap*, const char*, int, const ns3__messageEntity *, const char*);
SOAP_FMAC3 ns3__messageEntity * SOAP_FMAC4 soap_in_ns3__messageEntity(struct soap*, const char*, ns3__messageEntity *, const char*);
SOAP_FMAC1 ns3__messageEntity * SOAP_FMAC2 soap_instantiate_ns3__messageEntity(struct soap*, int, const char*, const char*, size_t*);

inline ns3__messageEntity * soap_new_ns3__messageEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__messageEntity(soap, n, NULL, NULL, NULL);
}

inline ns3__messageEntity * soap_new_req_ns3__messageEntity(
	struct soap *soap)
{
	ns3__messageEntity *_p = soap_new_ns3__messageEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__messageEntity * soap_new_set_ns3__messageEntity(
	struct soap *soap,
	char *mensajeOperador,
	char *mensajeCliente)
{
	ns3__messageEntity *_p = soap_new_ns3__messageEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__messageEntity::mensajeOperador = mensajeOperador;
		_p->ns3__messageEntity::mensajeCliente = mensajeCliente;
	}
	return _p;
}

inline int soap_write_ns3__messageEntity(struct soap *soap, ns3__messageEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:messageEntity", p->soap_type() == SOAP_TYPE_ns3__messageEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__messageEntity(struct soap *soap, const char *URL, ns3__messageEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:messageEntity", p->soap_type() == SOAP_TYPE_ns3__messageEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__messageEntity(struct soap *soap, const char *URL, ns3__messageEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:messageEntity", p->soap_type() == SOAP_TYPE_ns3__messageEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__messageEntity * SOAP_FMAC4 soap_get_ns3__messageEntity(struct soap*, ns3__messageEntity *, const char*, const char*);

inline int soap_read_ns3__messageEntity(struct soap *soap, ns3__messageEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__messageEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__messageEntity(struct soap *soap, const char *URL, ns3__messageEntity *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__messageEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__messageEntity(struct soap *soap, ns3__messageEntity *p)
{
	if (soap_read_ns3__messageEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__dataInsertaMovimientos_DEFINED
#define SOAP_TYPE_ns3__dataInsertaMovimientos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataInsertaMovimientos(struct soap*, const char*, int, const ns3__dataInsertaMovimientos *, const char*);
SOAP_FMAC3 ns3__dataInsertaMovimientos * SOAP_FMAC4 soap_in_ns3__dataInsertaMovimientos(struct soap*, const char*, ns3__dataInsertaMovimientos *, const char*);
SOAP_FMAC1 ns3__dataInsertaMovimientos * SOAP_FMAC2 soap_instantiate_ns3__dataInsertaMovimientos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__dataInsertaMovimientos * soap_new_ns3__dataInsertaMovimientos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__dataInsertaMovimientos(soap, n, NULL, NULL, NULL);
}

inline ns3__dataInsertaMovimientos * soap_new_req_ns3__dataInsertaMovimientos(
	struct soap *soap)
{
	ns3__dataInsertaMovimientos *_p = soap_new_ns3__dataInsertaMovimientos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__dataInsertaMovimientos * soap_new_set_ns3__dataInsertaMovimientos(
	struct soap *soap,
	ns3__messageEntity *messageEntity)
{
	ns3__dataInsertaMovimientos *_p = soap_new_ns3__dataInsertaMovimientos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__dataInsertaMovimientos::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataInsertaMovimientos", p->soap_type() == SOAP_TYPE_ns3__dataInsertaMovimientos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__dataInsertaMovimientos(struct soap *soap, const char *URL, ns3__dataInsertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataInsertaMovimientos", p->soap_type() == SOAP_TYPE_ns3__dataInsertaMovimientos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__dataInsertaMovimientos(struct soap *soap, const char *URL, ns3__dataInsertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataInsertaMovimientos", p->soap_type() == SOAP_TYPE_ns3__dataInsertaMovimientos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__dataInsertaMovimientos * SOAP_FMAC4 soap_get_ns3__dataInsertaMovimientos(struct soap*, ns3__dataInsertaMovimientos *, const char*, const char*);

inline int soap_read_ns3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__dataInsertaMovimientos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__dataInsertaMovimientos(struct soap *soap, const char *URL, ns3__dataInsertaMovimientos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__dataInsertaMovimientos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos *p)
{
	if (soap_read_ns3__dataInsertaMovimientos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__insertaMovimientosResponse_DEFINED
#define SOAP_TYPE_ns3__insertaMovimientosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__insertaMovimientosResponse(struct soap*, const char*, int, const ns3__insertaMovimientosResponse *, const char*);
SOAP_FMAC3 ns3__insertaMovimientosResponse * SOAP_FMAC4 soap_in_ns3__insertaMovimientosResponse(struct soap*, const char*, ns3__insertaMovimientosResponse *, const char*);
SOAP_FMAC1 ns3__insertaMovimientosResponse * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__insertaMovimientosResponse * soap_new_ns3__insertaMovimientosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__insertaMovimientosResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__insertaMovimientosResponse * soap_new_req_ns3__insertaMovimientosResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__insertaMovimientosResponse *_p = soap_new_ns3__insertaMovimientosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__insertaMovimientosResponse::code = code;
	}
	return _p;
}

inline ns3__insertaMovimientosResponse * soap_new_set_ns3__insertaMovimientosResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__dataInsertaMovimientos *dataInsertaMovimientos)
{
	ns3__insertaMovimientosResponse *_p = soap_new_ns3__insertaMovimientosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__insertaMovimientosResponse::code = code;
		_p->ns3__insertaMovimientosResponse::message = message;
		_p->ns3__insertaMovimientosResponse::dataInsertaMovimientos = dataInsertaMovimientos;
	}
	return _p;
}

inline int soap_write_ns3__insertaMovimientosResponse(struct soap *soap, ns3__insertaMovimientosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosResponse", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__insertaMovimientosResponse(struct soap *soap, const char *URL, ns3__insertaMovimientosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosResponse", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__insertaMovimientosResponse(struct soap *soap, const char *URL, ns3__insertaMovimientosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosResponse", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__insertaMovimientosResponse * SOAP_FMAC4 soap_get_ns3__insertaMovimientosResponse(struct soap*, ns3__insertaMovimientosResponse *, const char*, const char*);

inline int soap_read_ns3__insertaMovimientosResponse(struct soap *soap, ns3__insertaMovimientosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__insertaMovimientosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__insertaMovimientosResponse(struct soap *soap, const char *URL, ns3__insertaMovimientosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__insertaMovimientosResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__insertaMovimientosResponse(struct soap *soap, ns3__insertaMovimientosResponse *p)
{
	if (soap_read_ns3__insertaMovimientosResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__insertaMovimientosRequest_DEFINED
#define SOAP_TYPE_ns3__insertaMovimientosRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__insertaMovimientosRequest(struct soap*, const char*, int, const ns3__insertaMovimientosRequest *, const char*);
SOAP_FMAC3 ns3__insertaMovimientosRequest * SOAP_FMAC4 soap_in_ns3__insertaMovimientosRequest(struct soap*, const char*, ns3__insertaMovimientosRequest *, const char*);
SOAP_FMAC1 ns3__insertaMovimientosRequest * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__insertaMovimientosRequest * soap_new_ns3__insertaMovimientosRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__insertaMovimientosRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__insertaMovimientosRequest * soap_new_req_ns3__insertaMovimientosRequest(
	struct soap *soap)
{
	ns3__insertaMovimientosRequest *_p = soap_new_ns3__insertaMovimientosRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__insertaMovimientosRequest * soap_new_set_ns3__insertaMovimientosRequest(
	struct soap *soap,
	char *iduRegistroCorreo,
	char *iduProceso,
	char *json)
{
	ns3__insertaMovimientosRequest *_p = soap_new_ns3__insertaMovimientosRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__insertaMovimientosRequest::iduRegistroCorreo = iduRegistroCorreo;
		_p->ns3__insertaMovimientosRequest::iduProceso = iduProceso;
		_p->ns3__insertaMovimientosRequest::json = json;
	}
	return _p;
}

inline int soap_write_ns3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosRequest", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__insertaMovimientosRequest(struct soap *soap, const char *URL, ns3__insertaMovimientosRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosRequest", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__insertaMovimientosRequest(struct soap *soap, const char *URL, ns3__insertaMovimientosRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:insertaMovimientosRequest", p->soap_type() == SOAP_TYPE_ns3__insertaMovimientosRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__insertaMovimientosRequest * SOAP_FMAC4 soap_get_ns3__insertaMovimientosRequest(struct soap*, ns3__insertaMovimientosRequest *, const char*, const char*);

inline int soap_read_ns3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__insertaMovimientosRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__insertaMovimientosRequest(struct soap *soap, const char *URL, ns3__insertaMovimientosRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__insertaMovimientosRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest *p)
{
	if (soap_read_ns3__insertaMovimientosRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__dataCierreEstadisticas_DEFINED
#define SOAP_TYPE_ns3__dataCierreEstadisticas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataCierreEstadisticas(struct soap*, const char*, int, const ns3__dataCierreEstadisticas *, const char*);
SOAP_FMAC3 ns3__dataCierreEstadisticas * SOAP_FMAC4 soap_in_ns3__dataCierreEstadisticas(struct soap*, const char*, ns3__dataCierreEstadisticas *, const char*);
SOAP_FMAC1 ns3__dataCierreEstadisticas * SOAP_FMAC2 soap_instantiate_ns3__dataCierreEstadisticas(struct soap*, int, const char*, const char*, size_t*);

inline ns3__dataCierreEstadisticas * soap_new_ns3__dataCierreEstadisticas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__dataCierreEstadisticas(soap, n, NULL, NULL, NULL);
}

inline ns3__dataCierreEstadisticas * soap_new_req_ns3__dataCierreEstadisticas(
	struct soap *soap)
{
	ns3__dataCierreEstadisticas *_p = soap_new_ns3__dataCierreEstadisticas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__dataCierreEstadisticas * soap_new_set_ns3__dataCierreEstadisticas(
	struct soap *soap,
	int *iduPlantilla,
	char *trigger,
	ns3__messageEntity *messageEntity)
{
	ns3__dataCierreEstadisticas *_p = soap_new_ns3__dataCierreEstadisticas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__dataCierreEstadisticas::iduPlantilla = iduPlantilla;
		_p->ns3__dataCierreEstadisticas::trigger = trigger;
		_p->ns3__dataCierreEstadisticas::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataCierreEstadisticas", p->soap_type() == SOAP_TYPE_ns3__dataCierreEstadisticas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__dataCierreEstadisticas(struct soap *soap, const char *URL, ns3__dataCierreEstadisticas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataCierreEstadisticas", p->soap_type() == SOAP_TYPE_ns3__dataCierreEstadisticas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__dataCierreEstadisticas(struct soap *soap, const char *URL, ns3__dataCierreEstadisticas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataCierreEstadisticas", p->soap_type() == SOAP_TYPE_ns3__dataCierreEstadisticas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__dataCierreEstadisticas * SOAP_FMAC4 soap_get_ns3__dataCierreEstadisticas(struct soap*, ns3__dataCierreEstadisticas *, const char*, const char*);

inline int soap_read_ns3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__dataCierreEstadisticas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__dataCierreEstadisticas(struct soap *soap, const char *URL, ns3__dataCierreEstadisticas *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__dataCierreEstadisticas(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas *p)
{
	if (soap_read_ns3__dataCierreEstadisticas(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__cierreEstadisticasResponse_DEFINED
#define SOAP_TYPE_ns3__cierreEstadisticasResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__cierreEstadisticasResponse(struct soap*, const char*, int, const ns3__cierreEstadisticasResponse *, const char*);
SOAP_FMAC3 ns3__cierreEstadisticasResponse * SOAP_FMAC4 soap_in_ns3__cierreEstadisticasResponse(struct soap*, const char*, ns3__cierreEstadisticasResponse *, const char*);
SOAP_FMAC1 ns3__cierreEstadisticasResponse * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__cierreEstadisticasResponse * soap_new_ns3__cierreEstadisticasResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__cierreEstadisticasResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__cierreEstadisticasResponse * soap_new_req_ns3__cierreEstadisticasResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__cierreEstadisticasResponse *_p = soap_new_ns3__cierreEstadisticasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__cierreEstadisticasResponse::code = code;
	}
	return _p;
}

inline ns3__cierreEstadisticasResponse * soap_new_set_ns3__cierreEstadisticasResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__dataCierreEstadisticas *dataCierreEstadisticas)
{
	ns3__cierreEstadisticasResponse *_p = soap_new_ns3__cierreEstadisticasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__cierreEstadisticasResponse::code = code;
		_p->ns3__cierreEstadisticasResponse::message = message;
		_p->ns3__cierreEstadisticasResponse::dataCierreEstadisticas = dataCierreEstadisticas;
	}
	return _p;
}

inline int soap_write_ns3__cierreEstadisticasResponse(struct soap *soap, ns3__cierreEstadisticasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasResponse", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__cierreEstadisticasResponse(struct soap *soap, const char *URL, ns3__cierreEstadisticasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasResponse", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__cierreEstadisticasResponse(struct soap *soap, const char *URL, ns3__cierreEstadisticasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasResponse", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__cierreEstadisticasResponse * SOAP_FMAC4 soap_get_ns3__cierreEstadisticasResponse(struct soap*, ns3__cierreEstadisticasResponse *, const char*, const char*);

inline int soap_read_ns3__cierreEstadisticasResponse(struct soap *soap, ns3__cierreEstadisticasResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__cierreEstadisticasResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__cierreEstadisticasResponse(struct soap *soap, const char *URL, ns3__cierreEstadisticasResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__cierreEstadisticasResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__cierreEstadisticasResponse(struct soap *soap, ns3__cierreEstadisticasResponse *p)
{
	if (soap_read_ns3__cierreEstadisticasResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__cierreEstadisticasRequest_DEFINED
#define SOAP_TYPE_ns3__cierreEstadisticasRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__cierreEstadisticasRequest(struct soap*, const char*, int, const ns3__cierreEstadisticasRequest *, const char*);
SOAP_FMAC3 ns3__cierreEstadisticasRequest * SOAP_FMAC4 soap_in_ns3__cierreEstadisticasRequest(struct soap*, const char*, ns3__cierreEstadisticasRequest *, const char*);
SOAP_FMAC1 ns3__cierreEstadisticasRequest * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__cierreEstadisticasRequest * soap_new_ns3__cierreEstadisticasRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__cierreEstadisticasRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__cierreEstadisticasRequest * soap_new_req_ns3__cierreEstadisticasRequest(
	struct soap *soap)
{
	ns3__cierreEstadisticasRequest *_p = soap_new_ns3__cierreEstadisticasRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__cierreEstadisticasRequest * soap_new_set_ns3__cierreEstadisticasRequest(
	struct soap *soap,
	char *iduRegistroEstadistica,
	char *iduRegistroCorreo,
	char *correo)
{
	ns3__cierreEstadisticasRequest *_p = soap_new_ns3__cierreEstadisticasRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__cierreEstadisticasRequest::iduRegistroEstadistica = iduRegistroEstadistica;
		_p->ns3__cierreEstadisticasRequest::iduRegistroCorreo = iduRegistroCorreo;
		_p->ns3__cierreEstadisticasRequest::correo = correo;
	}
	return _p;
}

inline int soap_write_ns3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasRequest", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__cierreEstadisticasRequest(struct soap *soap, const char *URL, ns3__cierreEstadisticasRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasRequest", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__cierreEstadisticasRequest(struct soap *soap, const char *URL, ns3__cierreEstadisticasRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:cierreEstadisticasRequest", p->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__cierreEstadisticasRequest * SOAP_FMAC4 soap_get_ns3__cierreEstadisticasRequest(struct soap*, ns3__cierreEstadisticasRequest *, const char*, const char*);

inline int soap_read_ns3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__cierreEstadisticasRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__cierreEstadisticasRequest(struct soap *soap, const char *URL, ns3__cierreEstadisticasRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__cierreEstadisticasRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest *p)
{
	if (soap_read_ns3__cierreEstadisticasRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__Indicador_DEFINED
#define SOAP_TYPE_ns3__Indicador_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Indicador(struct soap*, const char*, int, const ns3__Indicador *, const char*);
SOAP_FMAC3 ns3__Indicador * SOAP_FMAC4 soap_in_ns3__Indicador(struct soap*, const char*, ns3__Indicador *, const char*);
SOAP_FMAC1 ns3__Indicador * SOAP_FMAC2 soap_instantiate_ns3__Indicador(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Indicador * soap_new_ns3__Indicador(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Indicador(soap, n, NULL, NULL, NULL);
}

inline ns3__Indicador * soap_new_req_ns3__Indicador(
	struct soap *soap)
{
	ns3__Indicador *_p = soap_new_ns3__Indicador(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__Indicador * soap_new_set_ns3__Indicador(
	struct soap *soap,
	char *nombre,
	int *valor)
{
	ns3__Indicador *_p = soap_new_ns3__Indicador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Indicador::nombre = nombre;
		_p->ns3__Indicador::valor = valor;
	}
	return _p;
}

inline int soap_write_ns3__Indicador(struct soap *soap, ns3__Indicador const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Indicador", p->soap_type() == SOAP_TYPE_ns3__Indicador ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Indicador(struct soap *soap, const char *URL, ns3__Indicador const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Indicador", p->soap_type() == SOAP_TYPE_ns3__Indicador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Indicador(struct soap *soap, const char *URL, ns3__Indicador const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Indicador", p->soap_type() == SOAP_TYPE_ns3__Indicador ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Indicador * SOAP_FMAC4 soap_get_ns3__Indicador(struct soap*, ns3__Indicador *, const char*, const char*);

inline int soap_read_ns3__Indicador(struct soap *soap, ns3__Indicador *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__Indicador(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Indicador(struct soap *soap, const char *URL, ns3__Indicador *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__Indicador(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__Indicador(struct soap *soap, ns3__Indicador *p)
{
	if (soap_read_ns3__Indicador(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse_DEFINED
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, const char*, int, const ns3__consultarIndicadoresPorNumeroClienteResponse *, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, const char*, ns3__consultarIndicadoresPorNumeroClienteResponse *, const char*);
SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultarIndicadoresPorNumeroClienteResponse * soap_new_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__consultarIndicadoresPorNumeroClienteResponse * soap_new_req_ns3__consultarIndicadoresPorNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	int __sizeIndicadoresCorreo,
	ns3__Indicador **IndicadoresCorreo)
{
	ns3__consultarIndicadoresPorNumeroClienteResponse *_p = soap_new_ns3__consultarIndicadoresPorNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::code = code;
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo = __sizeIndicadoresCorreo;
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = IndicadoresCorreo;
	}
	return _p;
}

inline ns3__consultarIndicadoresPorNumeroClienteResponse * soap_new_set_ns3__consultarIndicadoresPorNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	int __sizeIndicadoresCorreo,
	ns3__Indicador **IndicadoresCorreo)
{
	ns3__consultarIndicadoresPorNumeroClienteResponse *_p = soap_new_ns3__consultarIndicadoresPorNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::code = code;
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::message = message;
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo = __sizeIndicadoresCorreo;
		_p->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = IndicadoresCorreo;
	}
	return _p;
}

inline int soap_write_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, ns3__consultarIndicadoresPorNumeroClienteResponse *, const char*, const char*);

inline int soap_read_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteResponse *p)
{
	if (soap_read_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest_DEFINED
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, const char*, int, const ns3__consultarIndicadoresPorNumeroClienteRequest *, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, const char*, ns3__consultarIndicadoresPorNumeroClienteRequest *, const char*);
SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultarIndicadoresPorNumeroClienteRequest * soap_new_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__consultarIndicadoresPorNumeroClienteRequest * soap_new_req_ns3__consultarIndicadoresPorNumeroClienteRequest(
	struct soap *soap)
{
	ns3__consultarIndicadoresPorNumeroClienteRequest *_p = soap_new_ns3__consultarIndicadoresPorNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__consultarIndicadoresPorNumeroClienteRequest * soap_new_set_ns3__consultarIndicadoresPorNumeroClienteRequest(
	struct soap *soap,
	char *numCliente,
	char *adicional,
	char *origen,
	char *subOrigen)
{
	ns3__consultarIndicadoresPorNumeroClienteRequest *_p = soap_new_ns3__consultarIndicadoresPorNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorNumeroClienteRequest::numCliente = numCliente;
		_p->ns3__consultarIndicadoresPorNumeroClienteRequest::adicional = adicional;
		_p->ns3__consultarIndicadoresPorNumeroClienteRequest::origen = origen;
		_p->ns3__consultarIndicadoresPorNumeroClienteRequest::subOrigen = subOrigen;
	}
	return _p;
}

inline int soap_write_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, ns3__consultarIndicadoresPorNumeroClienteRequest *, const char*, const char*);

inline int soap_read_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorNumeroClienteRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest *p)
{
	if (soap_read_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse_DEFINED
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, const char*, int, const ns3__consultarIndicadoresPorCorreoResponse *, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, const char*, ns3__consultarIndicadoresPorCorreoResponse *, const char*);
SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultarIndicadoresPorCorreoResponse * soap_new_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__consultarIndicadoresPorCorreoResponse * soap_new_req_ns3__consultarIndicadoresPorCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	int __sizeIndicadoresCorreo,
	ns3__Indicador **IndicadoresCorreo)
{
	ns3__consultarIndicadoresPorCorreoResponse *_p = soap_new_ns3__consultarIndicadoresPorCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorCorreoResponse::code = code;
		_p->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo = __sizeIndicadoresCorreo;
		_p->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = IndicadoresCorreo;
	}
	return _p;
}

inline ns3__consultarIndicadoresPorCorreoResponse * soap_new_set_ns3__consultarIndicadoresPorCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	int __sizeIndicadoresCorreo,
	ns3__Indicador **IndicadoresCorreo)
{
	ns3__consultarIndicadoresPorCorreoResponse *_p = soap_new_ns3__consultarIndicadoresPorCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorCorreoResponse::code = code;
		_p->ns3__consultarIndicadoresPorCorreoResponse::message = message;
		_p->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo = __sizeIndicadoresCorreo;
		_p->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = IndicadoresCorreo;
	}
	return _p;
}

inline int soap_write_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, ns3__consultarIndicadoresPorCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, ns3__consultarIndicadoresPorCorreoResponse *, const char*, const char*);

inline int soap_read_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, ns3__consultarIndicadoresPorCorreoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultarIndicadoresPorCorreoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultarIndicadoresPorCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, ns3__consultarIndicadoresPorCorreoResponse *p)
{
	if (soap_read_ns3__consultarIndicadoresPorCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest_DEFINED
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, const char*, int, const ns3__consultarIndicadoresPorCorreoRequest *, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, const char*, ns3__consultarIndicadoresPorCorreoRequest *, const char*);
SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultarIndicadoresPorCorreoRequest * soap_new_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__consultarIndicadoresPorCorreoRequest * soap_new_req_ns3__consultarIndicadoresPorCorreoRequest(
	struct soap *soap)
{
	ns3__consultarIndicadoresPorCorreoRequest *_p = soap_new_ns3__consultarIndicadoresPorCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__consultarIndicadoresPorCorreoRequest * soap_new_set_ns3__consultarIndicadoresPorCorreoRequest(
	struct soap *soap,
	char *email,
	char *origen,
	char *subOrigen)
{
	ns3__consultarIndicadoresPorCorreoRequest *_p = soap_new_ns3__consultarIndicadoresPorCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultarIndicadoresPorCorreoRequest::email = email;
		_p->ns3__consultarIndicadoresPorCorreoRequest::origen = origen;
		_p->ns3__consultarIndicadoresPorCorreoRequest::subOrigen = subOrigen;
	}
	return _p;
}

inline int soap_write_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultarIndicadoresPorCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, ns3__consultarIndicadoresPorCorreoRequest *, const char*, const char*);

inline int soap_read_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultarIndicadoresPorCorreoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *URL, ns3__consultarIndicadoresPorCorreoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultarIndicadoresPorCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest *p)
{
	if (soap_read_ns3__consultarIndicadoresPorCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__dataConsultaPorNumeroCliente_DEFINED
#define SOAP_TYPE_ns3__dataConsultaPorNumeroCliente_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataConsultaPorNumeroCliente(struct soap*, const char*, int, const ns3__dataConsultaPorNumeroCliente *, const char*);
SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC4 soap_in_ns3__dataConsultaPorNumeroCliente(struct soap*, const char*, ns3__dataConsultaPorNumeroCliente *, const char*);
SOAP_FMAC1 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);

inline ns3__dataConsultaPorNumeroCliente * soap_new_ns3__dataConsultaPorNumeroCliente(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__dataConsultaPorNumeroCliente(soap, n, NULL, NULL, NULL);
}

inline ns3__dataConsultaPorNumeroCliente * soap_new_req_ns3__dataConsultaPorNumeroCliente(
	struct soap *soap)
{
	ns3__dataConsultaPorNumeroCliente *_p = soap_new_ns3__dataConsultaPorNumeroCliente(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__dataConsultaPorNumeroCliente * soap_new_set_ns3__dataConsultaPorNumeroCliente(
	struct soap *soap,
	int *respuesta,
	char *correo,
	char *iduRegistroCorreo,
	char *flagCuenta,
	char *flagEstatus,
	char *iduRegistroActivacion,
	ns3__messageEntity *messageEntity)
{
	ns3__dataConsultaPorNumeroCliente *_p = soap_new_ns3__dataConsultaPorNumeroCliente(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__dataConsultaPorNumeroCliente::respuesta = respuesta;
		_p->ns3__dataConsultaPorNumeroCliente::correo = correo;
		_p->ns3__dataConsultaPorNumeroCliente::iduRegistroCorreo = iduRegistroCorreo;
		_p->ns3__dataConsultaPorNumeroCliente::flagCuenta = flagCuenta;
		_p->ns3__dataConsultaPorNumeroCliente::flagEstatus = flagEstatus;
		_p->ns3__dataConsultaPorNumeroCliente::iduRegistroActivacion = iduRegistroActivacion;
		_p->ns3__dataConsultaPorNumeroCliente::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaPorNumeroCliente", p->soap_type() == SOAP_TYPE_ns3__dataConsultaPorNumeroCliente ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__dataConsultaPorNumeroCliente(struct soap *soap, const char *URL, ns3__dataConsultaPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaPorNumeroCliente", p->soap_type() == SOAP_TYPE_ns3__dataConsultaPorNumeroCliente ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__dataConsultaPorNumeroCliente(struct soap *soap, const char *URL, ns3__dataConsultaPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaPorNumeroCliente", p->soap_type() == SOAP_TYPE_ns3__dataConsultaPorNumeroCliente ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC4 soap_get_ns3__dataConsultaPorNumeroCliente(struct soap*, ns3__dataConsultaPorNumeroCliente *, const char*, const char*);

inline int soap_read_ns3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__dataConsultaPorNumeroCliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__dataConsultaPorNumeroCliente(struct soap *soap, const char *URL, ns3__dataConsultaPorNumeroCliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__dataConsultaPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente *p)
{
	if (soap_read_ns3__dataConsultaPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse_DEFINED
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, const char*, int, const ns3__consultaCorreoPorNumeroClienteResponse *, const char*);
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, const char*, ns3__consultaCorreoPorNumeroClienteResponse *, const char*);
SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultaCorreoPorNumeroClienteResponse * soap_new_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__consultaCorreoPorNumeroClienteResponse * soap_new_req_ns3__consultaCorreoPorNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__consultaCorreoPorNumeroClienteResponse *_p = soap_new_ns3__consultaCorreoPorNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoPorNumeroClienteResponse::code = code;
	}
	return _p;
}

inline ns3__consultaCorreoPorNumeroClienteResponse * soap_new_set_ns3__consultaCorreoPorNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	char *respuesta,
	char *data,
	ns3__dataConsultaPorNumeroCliente *dataConsultaPorNumeroCliente)
{
	ns3__consultaCorreoPorNumeroClienteResponse *_p = soap_new_ns3__consultaCorreoPorNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoPorNumeroClienteResponse::code = code;
		_p->ns3__consultaCorreoPorNumeroClienteResponse::message = message;
		_p->ns3__consultaCorreoPorNumeroClienteResponse::respuesta = respuesta;
		_p->ns3__consultaCorreoPorNumeroClienteResponse::data = data;
		_p->ns3__consultaCorreoPorNumeroClienteResponse::dataConsultaPorNumeroCliente = dataConsultaPorNumeroCliente;
	}
	return _p;
}

inline int soap_write_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, ns3__consultaCorreoPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, ns3__consultaCorreoPorNumeroClienteResponse *, const char*, const char*);

inline int soap_read_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, ns3__consultaCorreoPorNumeroClienteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultaCorreoPorNumeroClienteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultaCorreoPorNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, ns3__consultaCorreoPorNumeroClienteResponse *p)
{
	if (soap_read_ns3__consultaCorreoPorNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest_DEFINED
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, const char*, int, const ns3__consultaCorreoPorNumeroClienteRequest *, const char*);
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, const char*, ns3__consultaCorreoPorNumeroClienteRequest *, const char*);
SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultaCorreoPorNumeroClienteRequest * soap_new_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__consultaCorreoPorNumeroClienteRequest * soap_new_req_ns3__consultaCorreoPorNumeroClienteRequest(
	struct soap *soap)
{
	ns3__consultaCorreoPorNumeroClienteRequest *_p = soap_new_ns3__consultaCorreoPorNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__consultaCorreoPorNumeroClienteRequest * soap_new_set_ns3__consultaCorreoPorNumeroClienteRequest(
	struct soap *soap,
	char *numeroCliente,
	char *numeroAdicional,
	char *origen,
	char *subOrigen)
{
	ns3__consultaCorreoPorNumeroClienteRequest *_p = soap_new_ns3__consultaCorreoPorNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoPorNumeroClienteRequest::numeroCliente = numeroCliente;
		_p->ns3__consultaCorreoPorNumeroClienteRequest::numeroAdicional = numeroAdicional;
		_p->ns3__consultaCorreoPorNumeroClienteRequest::origen = origen;
		_p->ns3__consultaCorreoPorNumeroClienteRequest::subOrigen = subOrigen;
	}
	return _p;
}

inline int soap_write_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoPorNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, ns3__consultaCorreoPorNumeroClienteRequest *, const char*, const char*);

inline int soap_read_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultaCorreoPorNumeroClienteRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *URL, ns3__consultaCorreoPorNumeroClienteRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultaCorreoPorNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest *p)
{
	if (soap_read_ns3__consultaCorreoPorNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__retornoBloqueEstadistica_DEFINED
#define SOAP_TYPE_ns3__retornoBloqueEstadistica_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__retornoBloqueEstadistica(struct soap*, const char*, int, const ns3__retornoBloqueEstadistica *, const char*);
SOAP_FMAC3 ns3__retornoBloqueEstadistica * SOAP_FMAC4 soap_in_ns3__retornoBloqueEstadistica(struct soap*, const char*, ns3__retornoBloqueEstadistica *, const char*);
SOAP_FMAC1 ns3__retornoBloqueEstadistica * SOAP_FMAC2 soap_instantiate_ns3__retornoBloqueEstadistica(struct soap*, int, const char*, const char*, size_t*);

inline ns3__retornoBloqueEstadistica * soap_new_ns3__retornoBloqueEstadistica(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__retornoBloqueEstadistica(soap, n, NULL, NULL, NULL);
}

inline ns3__retornoBloqueEstadistica * soap_new_req_ns3__retornoBloqueEstadistica(
	struct soap *soap)
{
	ns3__retornoBloqueEstadistica *_p = soap_new_ns3__retornoBloqueEstadistica(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__retornoBloqueEstadistica * soap_new_set_ns3__retornoBloqueEstadistica(
	struct soap *soap,
	int *datoRegresa)
{
	ns3__retornoBloqueEstadistica *_p = soap_new_ns3__retornoBloqueEstadistica(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__retornoBloqueEstadistica::datoRegresa = datoRegresa;
	}
	return _p;
}

inline int soap_write_ns3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:retornoBloqueEstadistica", p->soap_type() == SOAP_TYPE_ns3__retornoBloqueEstadistica ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__retornoBloqueEstadistica(struct soap *soap, const char *URL, ns3__retornoBloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:retornoBloqueEstadistica", p->soap_type() == SOAP_TYPE_ns3__retornoBloqueEstadistica ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__retornoBloqueEstadistica(struct soap *soap, const char *URL, ns3__retornoBloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:retornoBloqueEstadistica", p->soap_type() == SOAP_TYPE_ns3__retornoBloqueEstadistica ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__retornoBloqueEstadistica * SOAP_FMAC4 soap_get_ns3__retornoBloqueEstadistica(struct soap*, ns3__retornoBloqueEstadistica *, const char*, const char*);

inline int soap_read_ns3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__retornoBloqueEstadistica(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__retornoBloqueEstadistica(struct soap *soap, const char *URL, ns3__retornoBloqueEstadistica *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__retornoBloqueEstadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica *p)
{
	if (soap_read_ns3__retornoBloqueEstadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__bloqueEstadisticaResponse_DEFINED
#define SOAP_TYPE_ns3__bloqueEstadisticaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__bloqueEstadisticaResponse(struct soap*, const char*, int, const ns3__bloqueEstadisticaResponse *, const char*);
SOAP_FMAC3 ns3__bloqueEstadisticaResponse * SOAP_FMAC4 soap_in_ns3__bloqueEstadisticaResponse(struct soap*, const char*, ns3__bloqueEstadisticaResponse *, const char*);
SOAP_FMAC1 ns3__bloqueEstadisticaResponse * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__bloqueEstadisticaResponse * soap_new_ns3__bloqueEstadisticaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__bloqueEstadisticaResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__bloqueEstadisticaResponse * soap_new_req_ns3__bloqueEstadisticaResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__bloqueEstadisticaResponse *_p = soap_new_ns3__bloqueEstadisticaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__bloqueEstadisticaResponse::code = code;
	}
	return _p;
}

inline ns3__bloqueEstadisticaResponse * soap_new_set_ns3__bloqueEstadisticaResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__retornoBloqueEstadistica *retornoBloqueEstadistica)
{
	ns3__bloqueEstadisticaResponse *_p = soap_new_ns3__bloqueEstadisticaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__bloqueEstadisticaResponse::code = code;
		_p->ns3__bloqueEstadisticaResponse::message = message;
		_p->ns3__bloqueEstadisticaResponse::retornoBloqueEstadistica = retornoBloqueEstadistica;
	}
	return _p;
}

inline int soap_write_ns3__bloqueEstadisticaResponse(struct soap *soap, ns3__bloqueEstadisticaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaResponse", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__bloqueEstadisticaResponse(struct soap *soap, const char *URL, ns3__bloqueEstadisticaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaResponse", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__bloqueEstadisticaResponse(struct soap *soap, const char *URL, ns3__bloqueEstadisticaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaResponse", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__bloqueEstadisticaResponse * SOAP_FMAC4 soap_get_ns3__bloqueEstadisticaResponse(struct soap*, ns3__bloqueEstadisticaResponse *, const char*, const char*);

inline int soap_read_ns3__bloqueEstadisticaResponse(struct soap *soap, ns3__bloqueEstadisticaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__bloqueEstadisticaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__bloqueEstadisticaResponse(struct soap *soap, const char *URL, ns3__bloqueEstadisticaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__bloqueEstadisticaResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__bloqueEstadisticaResponse(struct soap *soap, ns3__bloqueEstadisticaResponse *p)
{
	if (soap_read_ns3__bloqueEstadisticaResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__estadistica_DEFINED
#define SOAP_TYPE_ns3__estadistica_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__estadistica(struct soap*, const char*, int, const ns3__estadistica *, const char*);
SOAP_FMAC3 ns3__estadistica * SOAP_FMAC4 soap_in_ns3__estadistica(struct soap*, const char*, ns3__estadistica *, const char*);
SOAP_FMAC1 ns3__estadistica * SOAP_FMAC2 soap_instantiate_ns3__estadistica(struct soap*, int, const char*, const char*, size_t*);

inline ns3__estadistica * soap_new_ns3__estadistica(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__estadistica(soap, n, NULL, NULL, NULL);
}

inline ns3__estadistica * soap_new_req_ns3__estadistica(
	struct soap *soap)
{
	ns3__estadistica *_p = soap_new_ns3__estadistica(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__estadistica * soap_new_set_ns3__estadistica(
	struct soap *soap,
	char *division,
	char *email,
	char *genero,
	char *region,
	char *fechaOportunidad,
	char *adicional,
	char *captura,
	char *centro,
	char *numCliente,
	char *numEmpleado,
	char *oportunidad,
	char *origen,
	char *sintaxis,
	char *strikeIron,
	char *tipoCliente,
	char *zona)
{
	ns3__estadistica *_p = soap_new_ns3__estadistica(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__estadistica::division = division;
		_p->ns3__estadistica::email = email;
		_p->ns3__estadistica::genero = genero;
		_p->ns3__estadistica::region = region;
		_p->ns3__estadistica::fechaOportunidad = fechaOportunidad;
		_p->ns3__estadistica::adicional = adicional;
		_p->ns3__estadistica::captura = captura;
		_p->ns3__estadistica::centro = centro;
		_p->ns3__estadistica::numCliente = numCliente;
		_p->ns3__estadistica::numEmpleado = numEmpleado;
		_p->ns3__estadistica::oportunidad = oportunidad;
		_p->ns3__estadistica::origen = origen;
		_p->ns3__estadistica::sintaxis = sintaxis;
		_p->ns3__estadistica::strikeIron = strikeIron;
		_p->ns3__estadistica::tipoCliente = tipoCliente;
		_p->ns3__estadistica::zona = zona;
	}
	return _p;
}

inline int soap_write_ns3__estadistica(struct soap *soap, ns3__estadistica const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:estadistica", p->soap_type() == SOAP_TYPE_ns3__estadistica ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__estadistica(struct soap *soap, const char *URL, ns3__estadistica const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:estadistica", p->soap_type() == SOAP_TYPE_ns3__estadistica ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__estadistica(struct soap *soap, const char *URL, ns3__estadistica const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:estadistica", p->soap_type() == SOAP_TYPE_ns3__estadistica ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__estadistica * SOAP_FMAC4 soap_get_ns3__estadistica(struct soap*, ns3__estadistica *, const char*, const char*);

inline int soap_read_ns3__estadistica(struct soap *soap, ns3__estadistica *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__estadistica(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__estadistica(struct soap *soap, const char *URL, ns3__estadistica *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__estadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__estadistica(struct soap *soap, ns3__estadistica *p)
{
	if (soap_read_ns3__estadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__bloqueEstadisticaRequest_DEFINED
#define SOAP_TYPE_ns3__bloqueEstadisticaRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__bloqueEstadisticaRequest(struct soap*, const char*, int, const ns3__bloqueEstadisticaRequest *, const char*);
SOAP_FMAC3 ns3__bloqueEstadisticaRequest * SOAP_FMAC4 soap_in_ns3__bloqueEstadisticaRequest(struct soap*, const char*, ns3__bloqueEstadisticaRequest *, const char*);
SOAP_FMAC1 ns3__bloqueEstadisticaRequest * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__bloqueEstadisticaRequest * soap_new_ns3__bloqueEstadisticaRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__bloqueEstadisticaRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__bloqueEstadisticaRequest * soap_new_req_ns3__bloqueEstadisticaRequest(
	struct soap *soap)
{
	ns3__bloqueEstadisticaRequest *_p = soap_new_ns3__bloqueEstadisticaRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__bloqueEstadisticaRequest * soap_new_set_ns3__bloqueEstadisticaRequest(
	struct soap *soap,
	ns3__estadistica *estadistica)
{
	ns3__bloqueEstadisticaRequest *_p = soap_new_ns3__bloqueEstadisticaRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__bloqueEstadisticaRequest::estadistica = estadistica;
	}
	return _p;
}

inline int soap_write_ns3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaRequest", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__bloqueEstadisticaRequest(struct soap *soap, const char *URL, ns3__bloqueEstadisticaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaRequest", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__bloqueEstadisticaRequest(struct soap *soap, const char *URL, ns3__bloqueEstadisticaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:bloqueEstadisticaRequest", p->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__bloqueEstadisticaRequest * SOAP_FMAC4 soap_get_ns3__bloqueEstadisticaRequest(struct soap*, ns3__bloqueEstadisticaRequest *, const char*, const char*);

inline int soap_read_ns3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__bloqueEstadisticaRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__bloqueEstadisticaRequest(struct soap *soap, const char *URL, ns3__bloqueEstadisticaRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__bloqueEstadisticaRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest *p)
{
	if (soap_read_ns3__bloqueEstadisticaRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel_DEFINED
#define SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaRegistroCorreoBancoppel(struct soap*, const char*, int, const ns3__respuestaRegistroCorreoBancoppel *, const char*);
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC4 soap_in_ns3__respuestaRegistroCorreoBancoppel(struct soap*, const char*, ns3__respuestaRegistroCorreoBancoppel *, const char*);
SOAP_FMAC1 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(struct soap*, int, const char*, const char*, size_t*);

inline ns3__respuestaRegistroCorreoBancoppel * soap_new_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(soap, n, NULL, NULL, NULL);
}

inline ns3__respuestaRegistroCorreoBancoppel * soap_new_req_ns3__respuestaRegistroCorreoBancoppel(
	struct soap *soap)
{
	ns3__respuestaRegistroCorreoBancoppel *_p = soap_new_ns3__respuestaRegistroCorreoBancoppel(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__respuestaRegistroCorreoBancoppel * soap_new_set_ns3__respuestaRegistroCorreoBancoppel(
	struct soap *soap,
	int *respuesta,
	char *mensaje,
	int *tipoRegistro,
	char *clienteCoppel,
	char *clienteBancoppel,
	char *correo)
{
	ns3__respuestaRegistroCorreoBancoppel *_p = soap_new_ns3__respuestaRegistroCorreoBancoppel(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__respuestaRegistroCorreoBancoppel::respuesta = respuesta;
		_p->ns3__respuestaRegistroCorreoBancoppel::mensaje = mensaje;
		_p->ns3__respuestaRegistroCorreoBancoppel::tipoRegistro = tipoRegistro;
		_p->ns3__respuestaRegistroCorreoBancoppel::clienteCoppel = clienteCoppel;
		_p->ns3__respuestaRegistroCorreoBancoppel::clienteBancoppel = clienteBancoppel;
		_p->ns3__respuestaRegistroCorreoBancoppel::correo = correo;
	}
	return _p;
}

inline int soap_write_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreoBancoppel", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreoBancoppel", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreoBancoppel", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC4 soap_get_ns3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel *, const char*, const char*);

inline int soap_read_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__respuestaRegistroCorreoBancoppel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreoBancoppel *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__respuestaRegistroCorreoBancoppel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel *p)
{
	if (soap_read_ns3__respuestaRegistroCorreoBancoppel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelResponse_DEFINED
#define SOAP_TYPE_ns3__registroCorreoBancoppelResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoBancoppelResponse(struct soap*, const char*, int, const ns3__registroCorreoBancoppelResponse *, const char*);
SOAP_FMAC3 ns3__registroCorreoBancoppelResponse * SOAP_FMAC4 soap_in_ns3__registroCorreoBancoppelResponse(struct soap*, const char*, ns3__registroCorreoBancoppelResponse *, const char*);
SOAP_FMAC1 ns3__registroCorreoBancoppelResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__registroCorreoBancoppelResponse * soap_new_ns3__registroCorreoBancoppelResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__registroCorreoBancoppelResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__registroCorreoBancoppelResponse * soap_new_req_ns3__registroCorreoBancoppelResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	int __sizerespuestaRegistroCorreoList,
	ns3__respuestaRegistroCorreoBancoppel **respuestaRegistroCorreoList)
{
	ns3__registroCorreoBancoppelResponse *_p = soap_new_ns3__registroCorreoBancoppelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoBancoppelResponse::code = code;
		_p->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList = __sizerespuestaRegistroCorreoList;
		_p->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = respuestaRegistroCorreoList;
	}
	return _p;
}

inline ns3__registroCorreoBancoppelResponse * soap_new_set_ns3__registroCorreoBancoppelResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	int __sizerespuestaRegistroCorreoList,
	ns3__respuestaRegistroCorreoBancoppel **respuestaRegistroCorreoList)
{
	ns3__registroCorreoBancoppelResponse *_p = soap_new_ns3__registroCorreoBancoppelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoBancoppelResponse::code = code;
		_p->ns3__registroCorreoBancoppelResponse::message = message;
		_p->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList = __sizerespuestaRegistroCorreoList;
		_p->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = respuestaRegistroCorreoList;
	}
	return _p;
}

inline int soap_write_ns3__registroCorreoBancoppelResponse(struct soap *soap, ns3__registroCorreoBancoppelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__registroCorreoBancoppelResponse(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__registroCorreoBancoppelResponse(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__registroCorreoBancoppelResponse * SOAP_FMAC4 soap_get_ns3__registroCorreoBancoppelResponse(struct soap*, ns3__registroCorreoBancoppelResponse *, const char*, const char*);

inline int soap_read_ns3__registroCorreoBancoppelResponse(struct soap *soap, ns3__registroCorreoBancoppelResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__registroCorreoBancoppelResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__registroCorreoBancoppelResponse(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__registroCorreoBancoppelResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__registroCorreoBancoppelResponse(struct soap *soap, ns3__registroCorreoBancoppelResponse *p)
{
	if (soap_read_ns3__registroCorreoBancoppelResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelRequest_DEFINED
#define SOAP_TYPE_ns3__registroCorreoBancoppelRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoBancoppelRequest(struct soap*, const char*, int, const ns3__registroCorreoBancoppelRequest *, const char*);
SOAP_FMAC3 ns3__registroCorreoBancoppelRequest * SOAP_FMAC4 soap_in_ns3__registroCorreoBancoppelRequest(struct soap*, const char*, ns3__registroCorreoBancoppelRequest *, const char*);
SOAP_FMAC1 ns3__registroCorreoBancoppelRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__registroCorreoBancoppelRequest * soap_new_ns3__registroCorreoBancoppelRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__registroCorreoBancoppelRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__registroCorreoBancoppelRequest * soap_new_req_ns3__registroCorreoBancoppelRequest(
	struct soap *soap)
{
	ns3__registroCorreoBancoppelRequest *_p = soap_new_ns3__registroCorreoBancoppelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__registroCorreoBancoppelRequest * soap_new_set_ns3__registroCorreoBancoppelRequest(
	struct soap *soap,
	char *parametros)
{
	ns3__registroCorreoBancoppelRequest *_p = soap_new_ns3__registroCorreoBancoppelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoBancoppelRequest::parametros = parametros;
	}
	return _p;
}

inline int soap_write_ns3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__registroCorreoBancoppelRequest(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__registroCorreoBancoppelRequest(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoBancoppelRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__registroCorreoBancoppelRequest * SOAP_FMAC4 soap_get_ns3__registroCorreoBancoppelRequest(struct soap*, ns3__registroCorreoBancoppelRequest *, const char*, const char*);

inline int soap_read_ns3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__registroCorreoBancoppelRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__registroCorreoBancoppelRequest(struct soap *soap, const char *URL, ns3__registroCorreoBancoppelRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__registroCorreoBancoppelRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest *p)
{
	if (soap_read_ns3__registroCorreoBancoppelRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreo_DEFINED
#define SOAP_TYPE_ns3__respuestaRegistroCorreo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaRegistroCorreo(struct soap*, const char*, int, const ns3__respuestaRegistroCorreo *, const char*);
SOAP_FMAC3 ns3__respuestaRegistroCorreo * SOAP_FMAC4 soap_in_ns3__respuestaRegistroCorreo(struct soap*, const char*, ns3__respuestaRegistroCorreo *, const char*);
SOAP_FMAC1 ns3__respuestaRegistroCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__respuestaRegistroCorreo * soap_new_ns3__respuestaRegistroCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__respuestaRegistroCorreo(soap, n, NULL, NULL, NULL);
}

inline ns3__respuestaRegistroCorreo * soap_new_req_ns3__respuestaRegistroCorreo(
	struct soap *soap)
{
	ns3__respuestaRegistroCorreo *_p = soap_new_ns3__respuestaRegistroCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__respuestaRegistroCorreo * soap_new_set_ns3__respuestaRegistroCorreo(
	struct soap *soap,
	int *respuesta,
	char *mensaje,
	int *tipoRegistro,
	char *trigger,
	int *iduRegistroCorreo,
	char *iduRegistroEstadistica,
	char *flagImprimir,
	ns3__messageEntity *messageEntity)
{
	ns3__respuestaRegistroCorreo *_p = soap_new_ns3__respuestaRegistroCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__respuestaRegistroCorreo::respuesta = respuesta;
		_p->ns3__respuestaRegistroCorreo::mensaje = mensaje;
		_p->ns3__respuestaRegistroCorreo::tipoRegistro = tipoRegistro;
		_p->ns3__respuestaRegistroCorreo::trigger = trigger;
		_p->ns3__respuestaRegistroCorreo::iduRegistroCorreo = iduRegistroCorreo;
		_p->ns3__respuestaRegistroCorreo::iduRegistroEstadistica = iduRegistroEstadistica;
		_p->ns3__respuestaRegistroCorreo::flagImprimir = flagImprimir;
		_p->ns3__respuestaRegistroCorreo::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__respuestaRegistroCorreo(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__respuestaRegistroCorreo(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaRegistroCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__respuestaRegistroCorreo * SOAP_FMAC4 soap_get_ns3__respuestaRegistroCorreo(struct soap*, ns3__respuestaRegistroCorreo *, const char*, const char*);

inline int soap_read_ns3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__respuestaRegistroCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__respuestaRegistroCorreo(struct soap *soap, const char *URL, ns3__respuestaRegistroCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__respuestaRegistroCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo *p)
{
	if (soap_read_ns3__respuestaRegistroCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__registroCorreoResponse_DEFINED
#define SOAP_TYPE_ns3__registroCorreoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoResponse(struct soap*, const char*, int, const ns3__registroCorreoResponse *, const char*);
SOAP_FMAC3 ns3__registroCorreoResponse * SOAP_FMAC4 soap_in_ns3__registroCorreoResponse(struct soap*, const char*, ns3__registroCorreoResponse *, const char*);
SOAP_FMAC1 ns3__registroCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__registroCorreoResponse * soap_new_ns3__registroCorreoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__registroCorreoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__registroCorreoResponse * soap_new_req_ns3__registroCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__registroCorreoResponse *_p = soap_new_ns3__registroCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoResponse::code = code;
	}
	return _p;
}

inline ns3__registroCorreoResponse * soap_new_set_ns3__registroCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__respuestaRegistroCorreo *respuestaRegistroCorreo)
{
	ns3__registroCorreoResponse *_p = soap_new_ns3__registroCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoResponse::code = code;
		_p->ns3__registroCorreoResponse::message = message;
		_p->ns3__registroCorreoResponse::respuestaRegistroCorreo = respuestaRegistroCorreo;
	}
	return _p;
}

inline int soap_write_ns3__registroCorreoResponse(struct soap *soap, ns3__registroCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__registroCorreoResponse(struct soap *soap, const char *URL, ns3__registroCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__registroCorreoResponse(struct soap *soap, const char *URL, ns3__registroCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__registroCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__registroCorreoResponse * SOAP_FMAC4 soap_get_ns3__registroCorreoResponse(struct soap*, ns3__registroCorreoResponse *, const char*, const char*);

inline int soap_read_ns3__registroCorreoResponse(struct soap *soap, ns3__registroCorreoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__registroCorreoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__registroCorreoResponse(struct soap *soap, const char *URL, ns3__registroCorreoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__registroCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__registroCorreoResponse(struct soap *soap, ns3__registroCorreoResponse *p)
{
	if (soap_read_ns3__registroCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__registroCorreoRequest_DEFINED
#define SOAP_TYPE_ns3__registroCorreoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoRequest(struct soap*, const char*, int, const ns3__registroCorreoRequest *, const char*);
SOAP_FMAC3 ns3__registroCorreoRequest * SOAP_FMAC4 soap_in_ns3__registroCorreoRequest(struct soap*, const char*, ns3__registroCorreoRequest *, const char*);
SOAP_FMAC1 ns3__registroCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__registroCorreoRequest * soap_new_ns3__registroCorreoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__registroCorreoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__registroCorreoRequest * soap_new_req_ns3__registroCorreoRequest(
	struct soap *soap)
{
	ns3__registroCorreoRequest *_p = soap_new_ns3__registroCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__registroCorreoRequest * soap_new_set_ns3__registroCorreoRequest(
	struct soap *soap,
	char *empleado,
	char *numeroCliente,
	char *claveDivision,
	char *claveRegion,
	char *email,
	char *puntualidad,
	char *genero,
	char *numeroSolicitante,
	char *flagHuellaValor,
	char *numeroTiendaOrigen,
	char *montoCompra,
	char *adicional,
	char *caja,
	char *numeroCentro,
	char *numeroZona,
	char *origen,
	char *subOrigen,
	char *tipoCliente,
	char *area,
	char *iduRegistroEstadistica)
{
	ns3__registroCorreoRequest *_p = soap_new_ns3__registroCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__registroCorreoRequest::empleado = empleado;
		_p->ns3__registroCorreoRequest::numeroCliente = numeroCliente;
		_p->ns3__registroCorreoRequest::claveDivision = claveDivision;
		_p->ns3__registroCorreoRequest::claveRegion = claveRegion;
		_p->ns3__registroCorreoRequest::email = email;
		_p->ns3__registroCorreoRequest::puntualidad = puntualidad;
		_p->ns3__registroCorreoRequest::genero = genero;
		_p->ns3__registroCorreoRequest::numeroSolicitante = numeroSolicitante;
		_p->ns3__registroCorreoRequest::flagHuellaValor = flagHuellaValor;
		_p->ns3__registroCorreoRequest::numeroTiendaOrigen = numeroTiendaOrigen;
		_p->ns3__registroCorreoRequest::montoCompra = montoCompra;
		_p->ns3__registroCorreoRequest::adicional = adicional;
		_p->ns3__registroCorreoRequest::caja = caja;
		_p->ns3__registroCorreoRequest::numeroCentro = numeroCentro;
		_p->ns3__registroCorreoRequest::numeroZona = numeroZona;
		_p->ns3__registroCorreoRequest::origen = origen;
		_p->ns3__registroCorreoRequest::subOrigen = subOrigen;
		_p->ns3__registroCorreoRequest::tipoCliente = tipoCliente;
		_p->ns3__registroCorreoRequest::area = area;
		_p->ns3__registroCorreoRequest::iduRegistroEstadistica = iduRegistroEstadistica;
	}
	return _p;
}

inline int soap_write_ns3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__registroCorreoRequest(struct soap *soap, const char *URL, ns3__registroCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__registroCorreoRequest(struct soap *soap, const char *URL, ns3__registroCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:registroCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__registroCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__registroCorreoRequest * SOAP_FMAC4 soap_get_ns3__registroCorreoRequest(struct soap*, ns3__registroCorreoRequest *, const char*, const char*);

inline int soap_read_ns3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__registroCorreoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__registroCorreoRequest(struct soap *soap, const char *URL, ns3__registroCorreoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__registroCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest *p)
{
	if (soap_read_ns3__registroCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse_DEFINED
#define SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desliqueClienteNumeroClienteResponse(struct soap*, const char*, int, const ns3__desliqueClienteNumeroClienteResponse *, const char*);
SOAP_FMAC3 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__desliqueClienteNumeroClienteResponse(struct soap*, const char*, ns3__desliqueClienteNumeroClienteResponse *, const char*);
SOAP_FMAC1 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__desliqueClienteNumeroClienteResponse * soap_new_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__desliqueClienteNumeroClienteResponse * soap_new_req_ns3__desliqueClienteNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__desliqueClienteNumeroClienteResponse *_p = soap_new_ns3__desliqueClienteNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desliqueClienteNumeroClienteResponse::code = code;
	}
	return _p;
}

inline ns3__desliqueClienteNumeroClienteResponse * soap_new_set_ns3__desliqueClienteNumeroClienteResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__respuestaDesligueCorreo *respuestaDesligueCorreo)
{
	ns3__desliqueClienteNumeroClienteResponse *_p = soap_new_ns3__desliqueClienteNumeroClienteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desliqueClienteNumeroClienteResponse::code = code;
		_p->ns3__desliqueClienteNumeroClienteResponse::message = message;
		_p->ns3__desliqueClienteNumeroClienteResponse::respuestaDesligueCorreo = respuestaDesligueCorreo;
	}
	return _p;
}

inline int soap_write_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, ns3__desliqueClienteNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, const char *URL, ns3__desliqueClienteNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, const char *URL, ns3__desliqueClienteNumeroClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteNumeroClienteResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__desliqueClienteNumeroClienteResponse(struct soap*, ns3__desliqueClienteNumeroClienteResponse *, const char*, const char*);

inline int soap_read_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, ns3__desliqueClienteNumeroClienteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__desliqueClienteNumeroClienteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, const char *URL, ns3__desliqueClienteNumeroClienteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__desliqueClienteNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, ns3__desliqueClienteNumeroClienteResponse *p)
{
	if (soap_read_ns3__desliqueClienteNumeroClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest_DEFINED
#define SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desligueClienteNumeroClienteRequest(struct soap*, const char*, int, const ns3__desligueClienteNumeroClienteRequest *, const char*);
SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__desligueClienteNumeroClienteRequest(struct soap*, const char*, ns3__desligueClienteNumeroClienteRequest *, const char*);
SOAP_FMAC1 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__desligueClienteNumeroClienteRequest * soap_new_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__desligueClienteNumeroClienteRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__desligueClienteNumeroClienteRequest * soap_new_req_ns3__desligueClienteNumeroClienteRequest(
	struct soap *soap)
{
	ns3__desligueClienteNumeroClienteRequest *_p = soap_new_ns3__desligueClienteNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__desligueClienteNumeroClienteRequest * soap_new_set_ns3__desligueClienteNumeroClienteRequest(
	struct soap *soap,
	char *numeroCliente,
	char *adicional,
	char *iduRespuesta,
	char *iduRegistroEstadistica)
{
	ns3__desligueClienteNumeroClienteRequest *_p = soap_new_ns3__desligueClienteNumeroClienteRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desligueClienteNumeroClienteRequest::numeroCliente = numeroCliente;
		_p->ns3__desligueClienteNumeroClienteRequest::adicional = adicional;
		_p->ns3__desligueClienteNumeroClienteRequest::iduRespuesta = iduRespuesta;
		_p->ns3__desligueClienteNumeroClienteRequest::iduRegistroEstadistica = iduRegistroEstadistica;
	}
	return _p;
}

inline int soap_write_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *URL, ns3__desligueClienteNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *URL, ns3__desligueClienteNumeroClienteRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteNumeroClienteRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__desligueClienteNumeroClienteRequest(struct soap*, ns3__desligueClienteNumeroClienteRequest *, const char*, const char*);

inline int soap_read_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__desligueClienteNumeroClienteRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *URL, ns3__desligueClienteNumeroClienteRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__desligueClienteNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest *p)
{
	if (soap_read_ns3__desligueClienteNumeroClienteRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__respuestaDesligueCorreo_DEFINED
#define SOAP_TYPE_ns3__respuestaDesligueCorreo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaDesligueCorreo(struct soap*, const char*, int, const ns3__respuestaDesligueCorreo *, const char*);
SOAP_FMAC3 ns3__respuestaDesligueCorreo * SOAP_FMAC4 soap_in_ns3__respuestaDesligueCorreo(struct soap*, const char*, ns3__respuestaDesligueCorreo *, const char*);
SOAP_FMAC1 ns3__respuestaDesligueCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaDesligueCorreo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__respuestaDesligueCorreo * soap_new_ns3__respuestaDesligueCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__respuestaDesligueCorreo(soap, n, NULL, NULL, NULL);
}

inline ns3__respuestaDesligueCorreo * soap_new_req_ns3__respuestaDesligueCorreo(
	struct soap *soap)
{
	ns3__respuestaDesligueCorreo *_p = soap_new_ns3__respuestaDesligueCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__respuestaDesligueCorreo * soap_new_set_ns3__respuestaDesligueCorreo(
	struct soap *soap,
	int *respuesta,
	char *mensaje)
{
	ns3__respuestaDesligueCorreo *_p = soap_new_ns3__respuestaDesligueCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__respuestaDesligueCorreo::respuesta = respuesta;
		_p->ns3__respuestaDesligueCorreo::mensaje = mensaje;
	}
	return _p;
}

inline int soap_write_ns3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaDesligueCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaDesligueCorreo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__respuestaDesligueCorreo(struct soap *soap, const char *URL, ns3__respuestaDesligueCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaDesligueCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaDesligueCorreo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__respuestaDesligueCorreo(struct soap *soap, const char *URL, ns3__respuestaDesligueCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:respuestaDesligueCorreo", p->soap_type() == SOAP_TYPE_ns3__respuestaDesligueCorreo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__respuestaDesligueCorreo * SOAP_FMAC4 soap_get_ns3__respuestaDesligueCorreo(struct soap*, ns3__respuestaDesligueCorreo *, const char*, const char*);

inline int soap_read_ns3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__respuestaDesligueCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__respuestaDesligueCorreo(struct soap *soap, const char *URL, ns3__respuestaDesligueCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__respuestaDesligueCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo *p)
{
	if (soap_read_ns3__respuestaDesligueCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__desliqueClienteCorreoResponse_DEFINED
#define SOAP_TYPE_ns3__desliqueClienteCorreoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desliqueClienteCorreoResponse(struct soap*, const char*, int, const ns3__desliqueClienteCorreoResponse *, const char*);
SOAP_FMAC3 ns3__desliqueClienteCorreoResponse * SOAP_FMAC4 soap_in_ns3__desliqueClienteCorreoResponse(struct soap*, const char*, ns3__desliqueClienteCorreoResponse *, const char*);
SOAP_FMAC1 ns3__desliqueClienteCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteCorreoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__desliqueClienteCorreoResponse * soap_new_ns3__desliqueClienteCorreoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__desliqueClienteCorreoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__desliqueClienteCorreoResponse * soap_new_req_ns3__desliqueClienteCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__desliqueClienteCorreoResponse *_p = soap_new_ns3__desliqueClienteCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desliqueClienteCorreoResponse::code = code;
	}
	return _p;
}

inline ns3__desliqueClienteCorreoResponse * soap_new_set_ns3__desliqueClienteCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__respuestaDesligueCorreo *respuestaDesligueCorreo)
{
	ns3__desliqueClienteCorreoResponse *_p = soap_new_ns3__desliqueClienteCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desliqueClienteCorreoResponse::code = code;
		_p->ns3__desliqueClienteCorreoResponse::message = message;
		_p->ns3__desliqueClienteCorreoResponse::respuestaDesligueCorreo = respuestaDesligueCorreo;
	}
	return _p;
}

inline int soap_write_ns3__desliqueClienteCorreoResponse(struct soap *soap, ns3__desliqueClienteCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__desliqueClienteCorreoResponse(struct soap *soap, const char *URL, ns3__desliqueClienteCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteCorreoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__desliqueClienteCorreoResponse(struct soap *soap, const char *URL, ns3__desliqueClienteCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desliqueClienteCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__desliqueClienteCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__desliqueClienteCorreoResponse * SOAP_FMAC4 soap_get_ns3__desliqueClienteCorreoResponse(struct soap*, ns3__desliqueClienteCorreoResponse *, const char*, const char*);

inline int soap_read_ns3__desliqueClienteCorreoResponse(struct soap *soap, ns3__desliqueClienteCorreoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__desliqueClienteCorreoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__desliqueClienteCorreoResponse(struct soap *soap, const char *URL, ns3__desliqueClienteCorreoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__desliqueClienteCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__desliqueClienteCorreoResponse(struct soap *soap, ns3__desliqueClienteCorreoResponse *p)
{
	if (soap_read_ns3__desliqueClienteCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__desligueClienteCorreoRequest_DEFINED
#define SOAP_TYPE_ns3__desligueClienteCorreoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desligueClienteCorreoRequest(struct soap*, const char*, int, const ns3__desligueClienteCorreoRequest *, const char*);
SOAP_FMAC3 ns3__desligueClienteCorreoRequest * SOAP_FMAC4 soap_in_ns3__desligueClienteCorreoRequest(struct soap*, const char*, ns3__desligueClienteCorreoRequest *, const char*);
SOAP_FMAC1 ns3__desligueClienteCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteCorreoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__desligueClienteCorreoRequest * soap_new_ns3__desligueClienteCorreoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__desligueClienteCorreoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__desligueClienteCorreoRequest * soap_new_req_ns3__desligueClienteCorreoRequest(
	struct soap *soap)
{
	ns3__desligueClienteCorreoRequest *_p = soap_new_ns3__desligueClienteCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__desligueClienteCorreoRequest * soap_new_set_ns3__desligueClienteCorreoRequest(
	struct soap *soap,
	char *correo,
	char *iduRespuesta,
	char *iduRegistroEstadistica)
{
	ns3__desligueClienteCorreoRequest *_p = soap_new_ns3__desligueClienteCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__desligueClienteCorreoRequest::correo = correo;
		_p->ns3__desligueClienteCorreoRequest::iduRespuesta = iduRespuesta;
		_p->ns3__desligueClienteCorreoRequest::iduRegistroEstadistica = iduRegistroEstadistica;
	}
	return _p;
}

inline int soap_write_ns3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__desligueClienteCorreoRequest(struct soap *soap, const char *URL, ns3__desligueClienteCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteCorreoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__desligueClienteCorreoRequest(struct soap *soap, const char *URL, ns3__desligueClienteCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:desligueClienteCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__desligueClienteCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__desligueClienteCorreoRequest * SOAP_FMAC4 soap_get_ns3__desligueClienteCorreoRequest(struct soap*, ns3__desligueClienteCorreoRequest *, const char*, const char*);

inline int soap_read_ns3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__desligueClienteCorreoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__desligueClienteCorreoRequest(struct soap *soap, const char *URL, ns3__desligueClienteCorreoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__desligueClienteCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest *p)
{
	if (soap_read_ns3__desligueClienteCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__resultadoFrecuencia_DEFINED
#define SOAP_TYPE_ns3__resultadoFrecuencia_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__resultadoFrecuencia(struct soap*, const char*, int, const ns3__resultadoFrecuencia *, const char*);
SOAP_FMAC3 ns3__resultadoFrecuencia * SOAP_FMAC4 soap_in_ns3__resultadoFrecuencia(struct soap*, const char*, ns3__resultadoFrecuencia *, const char*);
SOAP_FMAC1 ns3__resultadoFrecuencia * SOAP_FMAC2 soap_instantiate_ns3__resultadoFrecuencia(struct soap*, int, const char*, const char*, size_t*);

inline ns3__resultadoFrecuencia * soap_new_ns3__resultadoFrecuencia(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__resultadoFrecuencia(soap, n, NULL, NULL, NULL);
}

inline ns3__resultadoFrecuencia * soap_new_req_ns3__resultadoFrecuencia(
	struct soap *soap)
{
	ns3__resultadoFrecuencia *_p = soap_new_ns3__resultadoFrecuencia(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__resultadoFrecuencia * soap_new_set_ns3__resultadoFrecuencia(
	struct soap *soap,
	char *descripcionMensaje,
	char *nombreCorreo,
	int *numeroValidaCorreo,
	short *opcCandidato,
	short *opcFlagEnviaCorreoValidacion,
	short *opcFlagImprimir)
{
	ns3__resultadoFrecuencia *_p = soap_new_ns3__resultadoFrecuencia(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__resultadoFrecuencia::descripcionMensaje = descripcionMensaje;
		_p->ns3__resultadoFrecuencia::nombreCorreo = nombreCorreo;
		_p->ns3__resultadoFrecuencia::numeroValidaCorreo = numeroValidaCorreo;
		_p->ns3__resultadoFrecuencia::opcCandidato = opcCandidato;
		_p->ns3__resultadoFrecuencia::opcFlagEnviaCorreoValidacion = opcFlagEnviaCorreoValidacion;
		_p->ns3__resultadoFrecuencia::opcFlagImprimir = opcFlagImprimir;
	}
	return _p;
}

inline int soap_write_ns3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoFrecuencia", p->soap_type() == SOAP_TYPE_ns3__resultadoFrecuencia ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__resultadoFrecuencia(struct soap *soap, const char *URL, ns3__resultadoFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoFrecuencia", p->soap_type() == SOAP_TYPE_ns3__resultadoFrecuencia ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__resultadoFrecuencia(struct soap *soap, const char *URL, ns3__resultadoFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoFrecuencia", p->soap_type() == SOAP_TYPE_ns3__resultadoFrecuencia ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__resultadoFrecuencia * SOAP_FMAC4 soap_get_ns3__resultadoFrecuencia(struct soap*, ns3__resultadoFrecuencia *, const char*, const char*);

inline int soap_read_ns3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__resultadoFrecuencia(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__resultadoFrecuencia(struct soap *soap, const char *URL, ns3__resultadoFrecuencia *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__resultadoFrecuencia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia *p)
{
	if (soap_read_ns3__resultadoFrecuencia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validarFrecuenciaResponse_DEFINED
#define SOAP_TYPE_ns3__validarFrecuenciaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validarFrecuenciaResponse(struct soap*, const char*, int, const ns3__validarFrecuenciaResponse *, const char*);
SOAP_FMAC3 ns3__validarFrecuenciaResponse * SOAP_FMAC4 soap_in_ns3__validarFrecuenciaResponse(struct soap*, const char*, ns3__validarFrecuenciaResponse *, const char*);
SOAP_FMAC1 ns3__validarFrecuenciaResponse * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validarFrecuenciaResponse * soap_new_ns3__validarFrecuenciaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validarFrecuenciaResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__validarFrecuenciaResponse * soap_new_req_ns3__validarFrecuenciaResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__validarFrecuenciaResponse *_p = soap_new_ns3__validarFrecuenciaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validarFrecuenciaResponse::code = code;
	}
	return _p;
}

inline ns3__validarFrecuenciaResponse * soap_new_set_ns3__validarFrecuenciaResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__resultadoFrecuencia *resultadoFrecuencia)
{
	ns3__validarFrecuenciaResponse *_p = soap_new_ns3__validarFrecuenciaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validarFrecuenciaResponse::code = code;
		_p->ns3__validarFrecuenciaResponse::message = message;
		_p->ns3__validarFrecuenciaResponse::resultadoFrecuencia = resultadoFrecuencia;
	}
	return _p;
}

inline int soap_write_ns3__validarFrecuenciaResponse(struct soap *soap, ns3__validarFrecuenciaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaResponse", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validarFrecuenciaResponse(struct soap *soap, const char *URL, ns3__validarFrecuenciaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaResponse", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validarFrecuenciaResponse(struct soap *soap, const char *URL, ns3__validarFrecuenciaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaResponse", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validarFrecuenciaResponse * SOAP_FMAC4 soap_get_ns3__validarFrecuenciaResponse(struct soap*, ns3__validarFrecuenciaResponse *, const char*, const char*);

inline int soap_read_ns3__validarFrecuenciaResponse(struct soap *soap, ns3__validarFrecuenciaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validarFrecuenciaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validarFrecuenciaResponse(struct soap *soap, const char *URL, ns3__validarFrecuenciaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validarFrecuenciaResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validarFrecuenciaResponse(struct soap *soap, ns3__validarFrecuenciaResponse *p)
{
	if (soap_read_ns3__validarFrecuenciaResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validarFrecuenciaRequest_DEFINED
#define SOAP_TYPE_ns3__validarFrecuenciaRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validarFrecuenciaRequest(struct soap*, const char*, int, const ns3__validarFrecuenciaRequest *, const char*);
SOAP_FMAC3 ns3__validarFrecuenciaRequest * SOAP_FMAC4 soap_in_ns3__validarFrecuenciaRequest(struct soap*, const char*, ns3__validarFrecuenciaRequest *, const char*);
SOAP_FMAC1 ns3__validarFrecuenciaRequest * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validarFrecuenciaRequest * soap_new_ns3__validarFrecuenciaRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validarFrecuenciaRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__validarFrecuenciaRequest * soap_new_req_ns3__validarFrecuenciaRequest(
	struct soap *soap)
{
	ns3__validarFrecuenciaRequest *_p = soap_new_ns3__validarFrecuenciaRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__validarFrecuenciaRequest * soap_new_set_ns3__validarFrecuenciaRequest(
	struct soap *soap,
	char *adicional,
	char *numeroCliente,
	char *origen,
	char *subOrigen,
	char *tipoCliente)
{
	ns3__validarFrecuenciaRequest *_p = soap_new_ns3__validarFrecuenciaRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validarFrecuenciaRequest::adicional = adicional;
		_p->ns3__validarFrecuenciaRequest::numeroCliente = numeroCliente;
		_p->ns3__validarFrecuenciaRequest::origen = origen;
		_p->ns3__validarFrecuenciaRequest::subOrigen = subOrigen;
		_p->ns3__validarFrecuenciaRequest::tipoCliente = tipoCliente;
	}
	return _p;
}

inline int soap_write_ns3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaRequest", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validarFrecuenciaRequest(struct soap *soap, const char *URL, ns3__validarFrecuenciaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaRequest", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validarFrecuenciaRequest(struct soap *soap, const char *URL, ns3__validarFrecuenciaRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validarFrecuenciaRequest", p->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validarFrecuenciaRequest * SOAP_FMAC4 soap_get_ns3__validarFrecuenciaRequest(struct soap*, ns3__validarFrecuenciaRequest *, const char*, const char*);

inline int soap_read_ns3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validarFrecuenciaRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validarFrecuenciaRequest(struct soap *soap, const char *URL, ns3__validarFrecuenciaRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validarFrecuenciaRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest *p)
{
	if (soap_read_ns3__validarFrecuenciaRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__resultadoCandidato_DEFINED
#define SOAP_TYPE_ns3__resultadoCandidato_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__resultadoCandidato(struct soap*, const char*, int, const ns3__resultadoCandidato *, const char*);
SOAP_FMAC3 ns3__resultadoCandidato * SOAP_FMAC4 soap_in_ns3__resultadoCandidato(struct soap*, const char*, ns3__resultadoCandidato *, const char*);
SOAP_FMAC1 ns3__resultadoCandidato * SOAP_FMAC2 soap_instantiate_ns3__resultadoCandidato(struct soap*, int, const char*, const char*, size_t*);

inline ns3__resultadoCandidato * soap_new_ns3__resultadoCandidato(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__resultadoCandidato(soap, n, NULL, NULL, NULL);
}

inline ns3__resultadoCandidato * soap_new_req_ns3__resultadoCandidato(
	struct soap *soap)
{
	ns3__resultadoCandidato *_p = soap_new_ns3__resultadoCandidato(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__resultadoCandidato * soap_new_set_ns3__resultadoCandidato(
	struct soap *soap,
	char *descripcionMensaje,
	char *nombreCorreo,
	int *numeroValidaCorreo,
	short *opcCandidato,
	short *opcFlagEnviaCorreoValidacion,
	char *iduRegistroEstadistica,
	short *opcFlagImprimir,
	ns3__messageEntity *messageEntity)
{
	ns3__resultadoCandidato *_p = soap_new_ns3__resultadoCandidato(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__resultadoCandidato::descripcionMensaje = descripcionMensaje;
		_p->ns3__resultadoCandidato::nombreCorreo = nombreCorreo;
		_p->ns3__resultadoCandidato::numeroValidaCorreo = numeroValidaCorreo;
		_p->ns3__resultadoCandidato::opcCandidato = opcCandidato;
		_p->ns3__resultadoCandidato::opcFlagEnviaCorreoValidacion = opcFlagEnviaCorreoValidacion;
		_p->ns3__resultadoCandidato::iduRegistroEstadistica = iduRegistroEstadistica;
		_p->ns3__resultadoCandidato::opcFlagImprimir = opcFlagImprimir;
		_p->ns3__resultadoCandidato::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoCandidato", p->soap_type() == SOAP_TYPE_ns3__resultadoCandidato ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__resultadoCandidato(struct soap *soap, const char *URL, ns3__resultadoCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoCandidato", p->soap_type() == SOAP_TYPE_ns3__resultadoCandidato ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__resultadoCandidato(struct soap *soap, const char *URL, ns3__resultadoCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:resultadoCandidato", p->soap_type() == SOAP_TYPE_ns3__resultadoCandidato ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__resultadoCandidato * SOAP_FMAC4 soap_get_ns3__resultadoCandidato(struct soap*, ns3__resultadoCandidato *, const char*, const char*);

inline int soap_read_ns3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__resultadoCandidato(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__resultadoCandidato(struct soap *soap, const char *URL, ns3__resultadoCandidato *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__resultadoCandidato(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato *p)
{
	if (soap_read_ns3__resultadoCandidato(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validaCandidatoResponse_DEFINED
#define SOAP_TYPE_ns3__validaCandidatoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaCandidatoResponse(struct soap*, const char*, int, const ns3__validaCandidatoResponse *, const char*);
SOAP_FMAC3 ns3__validaCandidatoResponse * SOAP_FMAC4 soap_in_ns3__validaCandidatoResponse(struct soap*, const char*, ns3__validaCandidatoResponse *, const char*);
SOAP_FMAC1 ns3__validaCandidatoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validaCandidatoResponse * soap_new_ns3__validaCandidatoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validaCandidatoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__validaCandidatoResponse * soap_new_req_ns3__validaCandidatoResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__validaCandidatoResponse *_p = soap_new_ns3__validaCandidatoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaCandidatoResponse::code = code;
	}
	return _p;
}

inline ns3__validaCandidatoResponse * soap_new_set_ns3__validaCandidatoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__resultadoCandidato *resultadoCandidato)
{
	ns3__validaCandidatoResponse *_p = soap_new_ns3__validaCandidatoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaCandidatoResponse::code = code;
		_p->ns3__validaCandidatoResponse::message = message;
		_p->ns3__validaCandidatoResponse::resultadoCandidato = resultadoCandidato;
	}
	return _p;
}

inline int soap_write_ns3__validaCandidatoResponse(struct soap *soap, ns3__validaCandidatoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoResponse", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validaCandidatoResponse(struct soap *soap, const char *URL, ns3__validaCandidatoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoResponse", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validaCandidatoResponse(struct soap *soap, const char *URL, ns3__validaCandidatoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoResponse", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validaCandidatoResponse * SOAP_FMAC4 soap_get_ns3__validaCandidatoResponse(struct soap*, ns3__validaCandidatoResponse *, const char*, const char*);

inline int soap_read_ns3__validaCandidatoResponse(struct soap *soap, ns3__validaCandidatoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validaCandidatoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validaCandidatoResponse(struct soap *soap, const char *URL, ns3__validaCandidatoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validaCandidatoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validaCandidatoResponse(struct soap *soap, ns3__validaCandidatoResponse *p)
{
	if (soap_read_ns3__validaCandidatoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validaCandidatoRequest_DEFINED
#define SOAP_TYPE_ns3__validaCandidatoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaCandidatoRequest(struct soap*, const char*, int, const ns3__validaCandidatoRequest *, const char*);
SOAP_FMAC3 ns3__validaCandidatoRequest * SOAP_FMAC4 soap_in_ns3__validaCandidatoRequest(struct soap*, const char*, ns3__validaCandidatoRequest *, const char*);
SOAP_FMAC1 ns3__validaCandidatoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validaCandidatoRequest * soap_new_ns3__validaCandidatoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validaCandidatoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__validaCandidatoRequest * soap_new_req_ns3__validaCandidatoRequest(
	struct soap *soap)
{
	ns3__validaCandidatoRequest *_p = soap_new_ns3__validaCandidatoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__validaCandidatoRequest * soap_new_set_ns3__validaCandidatoRequest(
	struct soap *soap,
	char *empleado,
	char *numeroCliente,
	char *claveDivision,
	char *claveRegion,
	char *montoCompra,
	char *adicional,
	char *caja,
	char *numeroCentro,
	char *numeroZona,
	char *origen,
	char *subOrigen,
	char *tipoCliente,
	char *area)
{
	ns3__validaCandidatoRequest *_p = soap_new_ns3__validaCandidatoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaCandidatoRequest::empleado = empleado;
		_p->ns3__validaCandidatoRequest::numeroCliente = numeroCliente;
		_p->ns3__validaCandidatoRequest::claveDivision = claveDivision;
		_p->ns3__validaCandidatoRequest::claveRegion = claveRegion;
		_p->ns3__validaCandidatoRequest::montoCompra = montoCompra;
		_p->ns3__validaCandidatoRequest::adicional = adicional;
		_p->ns3__validaCandidatoRequest::caja = caja;
		_p->ns3__validaCandidatoRequest::numeroCentro = numeroCentro;
		_p->ns3__validaCandidatoRequest::numeroZona = numeroZona;
		_p->ns3__validaCandidatoRequest::origen = origen;
		_p->ns3__validaCandidatoRequest::subOrigen = subOrigen;
		_p->ns3__validaCandidatoRequest::tipoCliente = tipoCliente;
		_p->ns3__validaCandidatoRequest::area = area;
	}
	return _p;
}

inline int soap_write_ns3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoRequest", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validaCandidatoRequest(struct soap *soap, const char *URL, ns3__validaCandidatoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoRequest", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validaCandidatoRequest(struct soap *soap, const char *URL, ns3__validaCandidatoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaCandidatoRequest", p->soap_type() == SOAP_TYPE_ns3__validaCandidatoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validaCandidatoRequest * SOAP_FMAC4 soap_get_ns3__validaCandidatoRequest(struct soap*, ns3__validaCandidatoRequest *, const char*, const char*);

inline int soap_read_ns3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validaCandidatoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validaCandidatoRequest(struct soap *soap, const char *URL, ns3__validaCandidatoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validaCandidatoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest *p)
{
	if (soap_read_ns3__validaCandidatoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__dataConsultaCorreo_DEFINED
#define SOAP_TYPE_ns3__dataConsultaCorreo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataConsultaCorreo(struct soap*, const char*, int, const ns3__dataConsultaCorreo *, const char*);
SOAP_FMAC3 ns3__dataConsultaCorreo * SOAP_FMAC4 soap_in_ns3__dataConsultaCorreo(struct soap*, const char*, ns3__dataConsultaCorreo *, const char*);
SOAP_FMAC1 ns3__dataConsultaCorreo * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaCorreo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__dataConsultaCorreo * soap_new_ns3__dataConsultaCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__dataConsultaCorreo(soap, n, NULL, NULL, NULL);
}

inline ns3__dataConsultaCorreo * soap_new_req_ns3__dataConsultaCorreo(
	struct soap *soap)
{
	ns3__dataConsultaCorreo *_p = soap_new_ns3__dataConsultaCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__dataConsultaCorreo * soap_new_set_ns3__dataConsultaCorreo(
	struct soap *soap,
	int *respuesta,
	char *numcliente,
	char *numadicional,
	char *iduRegistroCorreo,
	char *flagCuenta,
	char *flagEstatus,
	char *iduRegistroActivacion,
	ns3__messageEntity *messageEntity)
{
	ns3__dataConsultaCorreo *_p = soap_new_ns3__dataConsultaCorreo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__dataConsultaCorreo::respuesta = respuesta;
		_p->ns3__dataConsultaCorreo::numcliente = numcliente;
		_p->ns3__dataConsultaCorreo::numadicional = numadicional;
		_p->ns3__dataConsultaCorreo::iduRegistroCorreo = iduRegistroCorreo;
		_p->ns3__dataConsultaCorreo::flagCuenta = flagCuenta;
		_p->ns3__dataConsultaCorreo::flagEstatus = flagEstatus;
		_p->ns3__dataConsultaCorreo::iduRegistroActivacion = iduRegistroActivacion;
		_p->ns3__dataConsultaCorreo::messageEntity = messageEntity;
	}
	return _p;
}

inline int soap_write_ns3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaCorreo", p->soap_type() == SOAP_TYPE_ns3__dataConsultaCorreo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__dataConsultaCorreo(struct soap *soap, const char *URL, ns3__dataConsultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaCorreo", p->soap_type() == SOAP_TYPE_ns3__dataConsultaCorreo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__dataConsultaCorreo(struct soap *soap, const char *URL, ns3__dataConsultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:dataConsultaCorreo", p->soap_type() == SOAP_TYPE_ns3__dataConsultaCorreo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__dataConsultaCorreo * SOAP_FMAC4 soap_get_ns3__dataConsultaCorreo(struct soap*, ns3__dataConsultaCorreo *, const char*, const char*);

inline int soap_read_ns3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__dataConsultaCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__dataConsultaCorreo(struct soap *soap, const char *URL, ns3__dataConsultaCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__dataConsultaCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo *p)
{
	if (soap_read_ns3__dataConsultaCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultaCorreoResponse_DEFINED
#define SOAP_TYPE_ns3__consultaCorreoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoResponse(struct soap*, const char*, int, const ns3__consultaCorreoResponse *, const char*);
SOAP_FMAC3 ns3__consultaCorreoResponse * SOAP_FMAC4 soap_in_ns3__consultaCorreoResponse(struct soap*, const char*, ns3__consultaCorreoResponse *, const char*);
SOAP_FMAC1 ns3__consultaCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultaCorreoResponse * soap_new_ns3__consultaCorreoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultaCorreoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__consultaCorreoResponse * soap_new_req_ns3__consultaCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__consultaCorreoResponse *_p = soap_new_ns3__consultaCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoResponse::code = code;
	}
	return _p;
}

inline ns3__consultaCorreoResponse * soap_new_set_ns3__consultaCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__dataConsultaCorreo *dataConsultaCorreo)
{
	ns3__consultaCorreoResponse *_p = soap_new_ns3__consultaCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoResponse::code = code;
		_p->ns3__consultaCorreoResponse::message = message;
		_p->ns3__consultaCorreoResponse::dataConsultaCorreo = dataConsultaCorreo;
	}
	return _p;
}

inline int soap_write_ns3__consultaCorreoResponse(struct soap *soap, ns3__consultaCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultaCorreoResponse(struct soap *soap, const char *URL, ns3__consultaCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultaCorreoResponse(struct soap *soap, const char *URL, ns3__consultaCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultaCorreoResponse * SOAP_FMAC4 soap_get_ns3__consultaCorreoResponse(struct soap*, ns3__consultaCorreoResponse *, const char*, const char*);

inline int soap_read_ns3__consultaCorreoResponse(struct soap *soap, ns3__consultaCorreoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultaCorreoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultaCorreoResponse(struct soap *soap, const char *URL, ns3__consultaCorreoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultaCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultaCorreoResponse(struct soap *soap, ns3__consultaCorreoResponse *p)
{
	if (soap_read_ns3__consultaCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__consultaCorreoRequest_DEFINED
#define SOAP_TYPE_ns3__consultaCorreoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoRequest(struct soap*, const char*, int, const ns3__consultaCorreoRequest *, const char*);
SOAP_FMAC3 ns3__consultaCorreoRequest * SOAP_FMAC4 soap_in_ns3__consultaCorreoRequest(struct soap*, const char*, ns3__consultaCorreoRequest *, const char*);
SOAP_FMAC1 ns3__consultaCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__consultaCorreoRequest * soap_new_ns3__consultaCorreoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__consultaCorreoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__consultaCorreoRequest * soap_new_req_ns3__consultaCorreoRequest(
	struct soap *soap)
{
	ns3__consultaCorreoRequest *_p = soap_new_ns3__consultaCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__consultaCorreoRequest * soap_new_set_ns3__consultaCorreoRequest(
	struct soap *soap,
	char *email)
{
	ns3__consultaCorreoRequest *_p = soap_new_ns3__consultaCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__consultaCorreoRequest::email = email;
	}
	return _p;
}

inline int soap_write_ns3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__consultaCorreoRequest(struct soap *soap, const char *URL, ns3__consultaCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__consultaCorreoRequest(struct soap *soap, const char *URL, ns3__consultaCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:consultaCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__consultaCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__consultaCorreoRequest * SOAP_FMAC4 soap_get_ns3__consultaCorreoRequest(struct soap*, ns3__consultaCorreoRequest *, const char*, const char*);

inline int soap_read_ns3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__consultaCorreoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__consultaCorreoRequest(struct soap *soap, const char *URL, ns3__consultaCorreoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__consultaCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest *p)
{
	if (soap_read_ns3__consultaCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validacionesEmail_DEFINED
#define SOAP_TYPE_ns3__validacionesEmail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validacionesEmail(struct soap*, const char*, int, const ns3__validacionesEmail *, const char*);
SOAP_FMAC3 ns3__validacionesEmail * SOAP_FMAC4 soap_in_ns3__validacionesEmail(struct soap*, const char*, ns3__validacionesEmail *, const char*);
SOAP_FMAC1 ns3__validacionesEmail * SOAP_FMAC2 soap_instantiate_ns3__validacionesEmail(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validacionesEmail * soap_new_ns3__validacionesEmail(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validacionesEmail(soap, n, NULL, NULL, NULL);
}

inline ns3__validacionesEmail * soap_new_req_ns3__validacionesEmail(
	struct soap *soap)
{
	ns3__validacionesEmail *_p = soap_new_ns3__validacionesEmail(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__validacionesEmail * soap_new_set_ns3__validacionesEmail(
	struct soap *soap,
	bool *dominiosExceptuados,
	bool *reglasDominiosCorrectos,
	bool *reglasUsuarioPorDominio)
{
	ns3__validacionesEmail *_p = soap_new_ns3__validacionesEmail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validacionesEmail::dominiosExceptuados = dominiosExceptuados;
		_p->ns3__validacionesEmail::reglasDominiosCorrectos = reglasDominiosCorrectos;
		_p->ns3__validacionesEmail::reglasUsuarioPorDominio = reglasUsuarioPorDominio;
	}
	return _p;
}

inline int soap_write_ns3__validacionesEmail(struct soap *soap, ns3__validacionesEmail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validacionesEmail", p->soap_type() == SOAP_TYPE_ns3__validacionesEmail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validacionesEmail(struct soap *soap, const char *URL, ns3__validacionesEmail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validacionesEmail", p->soap_type() == SOAP_TYPE_ns3__validacionesEmail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validacionesEmail(struct soap *soap, const char *URL, ns3__validacionesEmail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validacionesEmail", p->soap_type() == SOAP_TYPE_ns3__validacionesEmail ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validacionesEmail * SOAP_FMAC4 soap_get_ns3__validacionesEmail(struct soap*, ns3__validacionesEmail *, const char*, const char*);

inline int soap_read_ns3__validacionesEmail(struct soap *soap, ns3__validacionesEmail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validacionesEmail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validacionesEmail(struct soap *soap, const char *URL, ns3__validacionesEmail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validacionesEmail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validacionesEmail(struct soap *soap, ns3__validacionesEmail *p)
{
	if (soap_read_ns3__validacionesEmail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoResponse_DEFINED
#define SOAP_TYPE_ns3__validaSintaxisCorreoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaSintaxisCorreoResponse(struct soap*, const char*, int, const ns3__validaSintaxisCorreoResponse *, const char*);
SOAP_FMAC3 ns3__validaSintaxisCorreoResponse * SOAP_FMAC4 soap_in_ns3__validaSintaxisCorreoResponse(struct soap*, const char*, ns3__validaSintaxisCorreoResponse *, const char*);
SOAP_FMAC1 ns3__validaSintaxisCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validaSintaxisCorreoResponse * soap_new_ns3__validaSintaxisCorreoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validaSintaxisCorreoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__validaSintaxisCorreoResponse * soap_new_req_ns3__validaSintaxisCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code)
{
	ns3__validaSintaxisCorreoResponse *_p = soap_new_ns3__validaSintaxisCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaSintaxisCorreoResponse::code = code;
	}
	return _p;
}

inline ns3__validaSintaxisCorreoResponse * soap_new_set_ns3__validaSintaxisCorreoResponse(
	struct soap *soap,
	enum ns3__messageCode code,
	char *message,
	ns3__validacionesEmail *validacionesEmail)
{
	ns3__validaSintaxisCorreoResponse *_p = soap_new_ns3__validaSintaxisCorreoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaSintaxisCorreoResponse::code = code;
		_p->ns3__validaSintaxisCorreoResponse::message = message;
		_p->ns3__validaSintaxisCorreoResponse::validacionesEmail = validacionesEmail;
	}
	return _p;
}

inline int soap_write_ns3__validaSintaxisCorreoResponse(struct soap *soap, ns3__validaSintaxisCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validaSintaxisCorreoResponse(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validaSintaxisCorreoResponse(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoResponse", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validaSintaxisCorreoResponse * SOAP_FMAC4 soap_get_ns3__validaSintaxisCorreoResponse(struct soap*, ns3__validaSintaxisCorreoResponse *, const char*, const char*);

inline int soap_read_ns3__validaSintaxisCorreoResponse(struct soap *soap, ns3__validaSintaxisCorreoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validaSintaxisCorreoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validaSintaxisCorreoResponse(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validaSintaxisCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validaSintaxisCorreoResponse(struct soap *soap, ns3__validaSintaxisCorreoResponse *p)
{
	if (soap_read_ns3__validaSintaxisCorreoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoRequest_DEFINED
#define SOAP_TYPE_ns3__validaSintaxisCorreoRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaSintaxisCorreoRequest(struct soap*, const char*, int, const ns3__validaSintaxisCorreoRequest *, const char*);
SOAP_FMAC3 ns3__validaSintaxisCorreoRequest * SOAP_FMAC4 soap_in_ns3__validaSintaxisCorreoRequest(struct soap*, const char*, ns3__validaSintaxisCorreoRequest *, const char*);
SOAP_FMAC1 ns3__validaSintaxisCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__validaSintaxisCorreoRequest * soap_new_ns3__validaSintaxisCorreoRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__validaSintaxisCorreoRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__validaSintaxisCorreoRequest * soap_new_req_ns3__validaSintaxisCorreoRequest(
	struct soap *soap)
{
	ns3__validaSintaxisCorreoRequest *_p = soap_new_ns3__validaSintaxisCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__validaSintaxisCorreoRequest * soap_new_set_ns3__validaSintaxisCorreoRequest(
	struct soap *soap,
	char *email)
{
	ns3__validaSintaxisCorreoRequest *_p = soap_new_ns3__validaSintaxisCorreoRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__validaSintaxisCorreoRequest::email = email;
	}
	return _p;
}

inline int soap_write_ns3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__validaSintaxisCorreoRequest(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__validaSintaxisCorreoRequest(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:validaSintaxisCorreoRequest", p->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__validaSintaxisCorreoRequest * SOAP_FMAC4 soap_get_ns3__validaSintaxisCorreoRequest(struct soap*, ns3__validaSintaxisCorreoRequest *, const char*, const char*);

inline int soap_read_ns3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__validaSintaxisCorreoRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__validaSintaxisCorreoRequest(struct soap *soap, const char *URL, ns3__validaSintaxisCorreoRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__validaSintaxisCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest *p)
{
	if (soap_read_ns3__validaSintaxisCorreoRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__entrada_DEFINED
#define SOAP_TYPE_ns2__entrada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__entrada(struct soap*, const char*, int, const ns2__entrada *, const char*);
SOAP_FMAC3 ns2__entrada * SOAP_FMAC4 soap_in_ns2__entrada(struct soap*, const char*, ns2__entrada *, const char*);
SOAP_FMAC1 ns2__entrada * SOAP_FMAC2 soap_instantiate_ns2__entrada(struct soap*, int, const char*, const char*, size_t*);

inline ns2__entrada * soap_new_ns2__entrada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__entrada(soap, n, NULL, NULL, NULL);
}

inline ns2__entrada * soap_new_req_ns2__entrada(
	struct soap *soap,
	char *idu_num,
	char *des_Template64,
	char *num_nivel)
{
	ns2__entrada *_p = soap_new_ns2__entrada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__entrada::idu_num = idu_num;
		_p->ns2__entrada::des_Template64 = des_Template64;
		_p->ns2__entrada::num_nivel = num_nivel;
	}
	return _p;
}

inline ns2__entrada * soap_new_set_ns2__entrada(
	struct soap *soap,
	char *idu_num,
	char *des_Template64,
	char *num_nivel)
{
	ns2__entrada *_p = soap_new_ns2__entrada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__entrada::idu_num = idu_num;
		_p->ns2__entrada::des_Template64 = des_Template64;
		_p->ns2__entrada::num_nivel = num_nivel;
	}
	return _p;
}

inline int soap_write_ns2__entrada(struct soap *soap, ns2__entrada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:entrada", p->soap_type() == SOAP_TYPE_ns2__entrada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__entrada(struct soap *soap, const char *URL, ns2__entrada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:entrada", p->soap_type() == SOAP_TYPE_ns2__entrada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__entrada(struct soap *soap, const char *URL, ns2__entrada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:entrada", p->soap_type() == SOAP_TYPE_ns2__entrada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__entrada * SOAP_FMAC4 soap_get_ns2__entrada(struct soap*, ns2__entrada *, const char*, const char*);

inline int soap_read_ns2__entrada(struct soap *soap, ns2__entrada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__entrada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__entrada(struct soap *soap, const char *URL, ns2__entrada *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__entrada(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__entrada(struct soap *soap, ns2__entrada *p)
{
	if (soap_read_ns2__entrada(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns3__insertaMovimientos_DEFINED
#define SOAP_TYPE___ns3__insertaMovimientos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__insertaMovimientos(struct soap*, struct __ns3__insertaMovimientos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__insertaMovimientos(struct soap*, const struct __ns3__insertaMovimientos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__insertaMovimientos(struct soap*, const char*, int, const struct __ns3__insertaMovimientos *, const char*);
SOAP_FMAC3 struct __ns3__insertaMovimientos * SOAP_FMAC4 soap_in___ns3__insertaMovimientos(struct soap*, const char*, struct __ns3__insertaMovimientos *, const char*);
SOAP_FMAC1 struct __ns3__insertaMovimientos * SOAP_FMAC2 soap_instantiate___ns3__insertaMovimientos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__insertaMovimientos * soap_new___ns3__insertaMovimientos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__insertaMovimientos(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__insertaMovimientos * soap_new_req___ns3__insertaMovimientos(
	struct soap *soap)
{
	struct __ns3__insertaMovimientos *_p = soap_new___ns3__insertaMovimientos(soap);
	if (_p)
	{	soap_default___ns3__insertaMovimientos(soap, _p);
	}
	return _p;
}

inline struct __ns3__insertaMovimientos * soap_new_set___ns3__insertaMovimientos(
	struct soap *soap,
	ns3__insertaMovimientosRequest *ns3__insertaMovimientosRequest_)
{
	struct __ns3__insertaMovimientos *_p = soap_new___ns3__insertaMovimientos(soap);
	if (_p)
	{	soap_default___ns3__insertaMovimientos(soap, _p);
		_p->ns3__insertaMovimientosRequest_ = ns3__insertaMovimientosRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__insertaMovimientos(struct soap*, const struct __ns3__insertaMovimientos *, const char*, const char*);

inline int soap_write___ns3__insertaMovimientos(struct soap *soap, struct __ns3__insertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__insertaMovimientos(soap, p), 0) || soap_put___ns3__insertaMovimientos(soap, p, "-ns3:insertaMovimientos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__insertaMovimientos(struct soap *soap, const char *URL, struct __ns3__insertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__insertaMovimientos(soap, p), 0) || soap_put___ns3__insertaMovimientos(soap, p, "-ns3:insertaMovimientos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__insertaMovimientos(struct soap *soap, const char *URL, struct __ns3__insertaMovimientos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__insertaMovimientos(soap, p), 0) || soap_put___ns3__insertaMovimientos(soap, p, "-ns3:insertaMovimientos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__insertaMovimientos * SOAP_FMAC4 soap_get___ns3__insertaMovimientos(struct soap*, struct __ns3__insertaMovimientos *, const char*, const char*);

inline int soap_read___ns3__insertaMovimientos(struct soap *soap, struct __ns3__insertaMovimientos *p)
{
	if (p)
	{	soap_default___ns3__insertaMovimientos(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__insertaMovimientos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__insertaMovimientos(struct soap *soap, const char *URL, struct __ns3__insertaMovimientos *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__insertaMovimientos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__insertaMovimientos(struct soap *soap, struct __ns3__insertaMovimientos *p)
{
	if (soap_read___ns3__insertaMovimientos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__cierreEstaditica_DEFINED
#define SOAP_TYPE___ns3__cierreEstaditica_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__cierreEstaditica(struct soap*, struct __ns3__cierreEstaditica *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__cierreEstaditica(struct soap*, const struct __ns3__cierreEstaditica *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__cierreEstaditica(struct soap*, const char*, int, const struct __ns3__cierreEstaditica *, const char*);
SOAP_FMAC3 struct __ns3__cierreEstaditica * SOAP_FMAC4 soap_in___ns3__cierreEstaditica(struct soap*, const char*, struct __ns3__cierreEstaditica *, const char*);
SOAP_FMAC1 struct __ns3__cierreEstaditica * SOAP_FMAC2 soap_instantiate___ns3__cierreEstaditica(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__cierreEstaditica * soap_new___ns3__cierreEstaditica(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__cierreEstaditica(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__cierreEstaditica * soap_new_req___ns3__cierreEstaditica(
	struct soap *soap)
{
	struct __ns3__cierreEstaditica *_p = soap_new___ns3__cierreEstaditica(soap);
	if (_p)
	{	soap_default___ns3__cierreEstaditica(soap, _p);
	}
	return _p;
}

inline struct __ns3__cierreEstaditica * soap_new_set___ns3__cierreEstaditica(
	struct soap *soap,
	ns3__cierreEstadisticasRequest *ns3__cierreEstadisticasRequest_)
{
	struct __ns3__cierreEstaditica *_p = soap_new___ns3__cierreEstaditica(soap);
	if (_p)
	{	soap_default___ns3__cierreEstaditica(soap, _p);
		_p->ns3__cierreEstadisticasRequest_ = ns3__cierreEstadisticasRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__cierreEstaditica(struct soap*, const struct __ns3__cierreEstaditica *, const char*, const char*);

inline int soap_write___ns3__cierreEstaditica(struct soap *soap, struct __ns3__cierreEstaditica const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__cierreEstaditica(soap, p), 0) || soap_put___ns3__cierreEstaditica(soap, p, "-ns3:cierreEstaditica", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__cierreEstaditica(struct soap *soap, const char *URL, struct __ns3__cierreEstaditica const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__cierreEstaditica(soap, p), 0) || soap_put___ns3__cierreEstaditica(soap, p, "-ns3:cierreEstaditica", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__cierreEstaditica(struct soap *soap, const char *URL, struct __ns3__cierreEstaditica const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__cierreEstaditica(soap, p), 0) || soap_put___ns3__cierreEstaditica(soap, p, "-ns3:cierreEstaditica", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__cierreEstaditica * SOAP_FMAC4 soap_get___ns3__cierreEstaditica(struct soap*, struct __ns3__cierreEstaditica *, const char*, const char*);

inline int soap_read___ns3__cierreEstaditica(struct soap *soap, struct __ns3__cierreEstaditica *p)
{
	if (p)
	{	soap_default___ns3__cierreEstaditica(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__cierreEstaditica(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__cierreEstaditica(struct soap *soap, const char *URL, struct __ns3__cierreEstaditica *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__cierreEstaditica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__cierreEstaditica(struct soap *soap, struct __ns3__cierreEstaditica *p)
{
	if (soap_read___ns3__cierreEstaditica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente_DEFINED
#define SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, struct __ns3__consultarIndicadoresPorNumeroCliente *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, const struct __ns3__consultarIndicadoresPorNumeroCliente *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, const char*, int, const struct __ns3__consultarIndicadoresPorNumeroCliente *, const char*);
SOAP_FMAC3 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC4 soap_in___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, const char*, struct __ns3__consultarIndicadoresPorNumeroCliente *, const char*);
SOAP_FMAC1 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__consultarIndicadoresPorNumeroCliente * soap_new___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__consultarIndicadoresPorNumeroCliente * soap_new_req___ns3__consultarIndicadoresPorNumeroCliente(
	struct soap *soap)
{
	struct __ns3__consultarIndicadoresPorNumeroCliente *_p = soap_new___ns3__consultarIndicadoresPorNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__consultarIndicadoresPorNumeroCliente(soap, _p);
	}
	return _p;
}

inline struct __ns3__consultarIndicadoresPorNumeroCliente * soap_new_set___ns3__consultarIndicadoresPorNumeroCliente(
	struct soap *soap,
	ns3__consultarIndicadoresPorNumeroClienteRequest *ns3__consultarIndicadoresPorNumeroClienteRequest_)
{
	struct __ns3__consultarIndicadoresPorNumeroCliente *_p = soap_new___ns3__consultarIndicadoresPorNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__consultarIndicadoresPorNumeroCliente(soap, _p);
		_p->ns3__consultarIndicadoresPorNumeroClienteRequest_ = ns3__consultarIndicadoresPorNumeroClienteRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, const struct __ns3__consultarIndicadoresPorNumeroCliente *, const char*, const char*);

inline int soap_write___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, struct __ns3__consultarIndicadoresPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorNumeroCliente(soap, p, "-ns3:consultarIndicadoresPorNumeroCliente", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorNumeroCliente(soap, p, "-ns3:consultarIndicadoresPorNumeroCliente", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorNumeroCliente(soap, p, "-ns3:consultarIndicadoresPorNumeroCliente", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC4 soap_get___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, struct __ns3__consultarIndicadoresPorNumeroCliente *, const char*, const char*);

inline int soap_read___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, struct __ns3__consultarIndicadoresPorNumeroCliente *p)
{
	if (p)
	{	soap_default___ns3__consultarIndicadoresPorNumeroCliente(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__consultarIndicadoresPorNumeroCliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorNumeroCliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__consultarIndicadoresPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, struct __ns3__consultarIndicadoresPorNumeroCliente *p)
{
	if (soap_read___ns3__consultarIndicadoresPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__consultarIndicadoresPorCorreo_DEFINED
#define SOAP_TYPE___ns3__consultarIndicadoresPorCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultarIndicadoresPorCorreo(struct soap*, struct __ns3__consultarIndicadoresPorCorreo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultarIndicadoresPorCorreo(struct soap*, const struct __ns3__consultarIndicadoresPorCorreo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultarIndicadoresPorCorreo(struct soap*, const char*, int, const struct __ns3__consultarIndicadoresPorCorreo *, const char*);
SOAP_FMAC3 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC4 soap_in___ns3__consultarIndicadoresPorCorreo(struct soap*, const char*, struct __ns3__consultarIndicadoresPorCorreo *, const char*);
SOAP_FMAC1 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorCorreo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__consultarIndicadoresPorCorreo * soap_new___ns3__consultarIndicadoresPorCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__consultarIndicadoresPorCorreo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__consultarIndicadoresPorCorreo * soap_new_req___ns3__consultarIndicadoresPorCorreo(
	struct soap *soap)
{
	struct __ns3__consultarIndicadoresPorCorreo *_p = soap_new___ns3__consultarIndicadoresPorCorreo(soap);
	if (_p)
	{	soap_default___ns3__consultarIndicadoresPorCorreo(soap, _p);
	}
	return _p;
}

inline struct __ns3__consultarIndicadoresPorCorreo * soap_new_set___ns3__consultarIndicadoresPorCorreo(
	struct soap *soap,
	ns3__consultarIndicadoresPorCorreoRequest *ns3__consultarIndicadoresPorCorreoRequest_)
{
	struct __ns3__consultarIndicadoresPorCorreo *_p = soap_new___ns3__consultarIndicadoresPorCorreo(soap);
	if (_p)
	{	soap_default___ns3__consultarIndicadoresPorCorreo(soap, _p);
		_p->ns3__consultarIndicadoresPorCorreoRequest_ = ns3__consultarIndicadoresPorCorreoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultarIndicadoresPorCorreo(struct soap*, const struct __ns3__consultarIndicadoresPorCorreo *, const char*, const char*);

inline int soap_write___ns3__consultarIndicadoresPorCorreo(struct soap *soap, struct __ns3__consultarIndicadoresPorCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__consultarIndicadoresPorCorreo(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorCorreo(soap, p, "-ns3:consultarIndicadoresPorCorreo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultarIndicadoresPorCorreo(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorCorreo(soap, p, "-ns3:consultarIndicadoresPorCorreo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultarIndicadoresPorCorreo(soap, p), 0) || soap_put___ns3__consultarIndicadoresPorCorreo(soap, p, "-ns3:consultarIndicadoresPorCorreo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC4 soap_get___ns3__consultarIndicadoresPorCorreo(struct soap*, struct __ns3__consultarIndicadoresPorCorreo *, const char*, const char*);

inline int soap_read___ns3__consultarIndicadoresPorCorreo(struct soap *soap, struct __ns3__consultarIndicadoresPorCorreo *p)
{
	if (p)
	{	soap_default___ns3__consultarIndicadoresPorCorreo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__consultarIndicadoresPorCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const char *URL, struct __ns3__consultarIndicadoresPorCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__consultarIndicadoresPorCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__consultarIndicadoresPorCorreo(struct soap *soap, struct __ns3__consultarIndicadoresPorCorreo *p)
{
	if (soap_read___ns3__consultarIndicadoresPorCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente_DEFINED
#define SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultaCorreoPorNumeroCliente(struct soap*, struct __ns3__consultaCorreoPorNumeroCliente *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultaCorreoPorNumeroCliente(struct soap*, const struct __ns3__consultaCorreoPorNumeroCliente *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultaCorreoPorNumeroCliente(struct soap*, const char*, int, const struct __ns3__consultaCorreoPorNumeroCliente *, const char*);
SOAP_FMAC3 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC4 soap_in___ns3__consultaCorreoPorNumeroCliente(struct soap*, const char*, struct __ns3__consultaCorreoPorNumeroCliente *, const char*);
SOAP_FMAC1 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreoPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__consultaCorreoPorNumeroCliente * soap_new___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__consultaCorreoPorNumeroCliente(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__consultaCorreoPorNumeroCliente * soap_new_req___ns3__consultaCorreoPorNumeroCliente(
	struct soap *soap)
{
	struct __ns3__consultaCorreoPorNumeroCliente *_p = soap_new___ns3__consultaCorreoPorNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__consultaCorreoPorNumeroCliente(soap, _p);
	}
	return _p;
}

inline struct __ns3__consultaCorreoPorNumeroCliente * soap_new_set___ns3__consultaCorreoPorNumeroCliente(
	struct soap *soap,
	ns3__consultaCorreoPorNumeroClienteRequest *ns3__consultaCorreoPorNumeroClienteRequest_)
{
	struct __ns3__consultaCorreoPorNumeroCliente *_p = soap_new___ns3__consultaCorreoPorNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__consultaCorreoPorNumeroCliente(soap, _p);
		_p->ns3__consultaCorreoPorNumeroClienteRequest_ = ns3__consultaCorreoPorNumeroClienteRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultaCorreoPorNumeroCliente(struct soap*, const struct __ns3__consultaCorreoPorNumeroCliente *, const char*, const char*);

inline int soap_write___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, struct __ns3__consultaCorreoPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__consultaCorreoPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultaCorreoPorNumeroCliente(soap, p, "-ns3:consultaCorreoPorNumeroCliente", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultaCorreoPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultaCorreoPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultaCorreoPorNumeroCliente(soap, p, "-ns3:consultaCorreoPorNumeroCliente", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultaCorreoPorNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultaCorreoPorNumeroCliente(soap, p), 0) || soap_put___ns3__consultaCorreoPorNumeroCliente(soap, p, "-ns3:consultaCorreoPorNumeroCliente", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC4 soap_get___ns3__consultaCorreoPorNumeroCliente(struct soap*, struct __ns3__consultaCorreoPorNumeroCliente *, const char*, const char*);

inline int soap_read___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, struct __ns3__consultaCorreoPorNumeroCliente *p)
{
	if (p)
	{	soap_default___ns3__consultaCorreoPorNumeroCliente(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__consultaCorreoPorNumeroCliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const char *URL, struct __ns3__consultaCorreoPorNumeroCliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__consultaCorreoPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, struct __ns3__consultaCorreoPorNumeroCliente *p)
{
	if (soap_read___ns3__consultaCorreoPorNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__bloqueEstadistica_DEFINED
#define SOAP_TYPE___ns3__bloqueEstadistica_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__bloqueEstadistica(struct soap*, struct __ns3__bloqueEstadistica *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__bloqueEstadistica(struct soap*, const struct __ns3__bloqueEstadistica *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__bloqueEstadistica(struct soap*, const char*, int, const struct __ns3__bloqueEstadistica *, const char*);
SOAP_FMAC3 struct __ns3__bloqueEstadistica * SOAP_FMAC4 soap_in___ns3__bloqueEstadistica(struct soap*, const char*, struct __ns3__bloqueEstadistica *, const char*);
SOAP_FMAC1 struct __ns3__bloqueEstadistica * SOAP_FMAC2 soap_instantiate___ns3__bloqueEstadistica(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__bloqueEstadistica * soap_new___ns3__bloqueEstadistica(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__bloqueEstadistica(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__bloqueEstadistica * soap_new_req___ns3__bloqueEstadistica(
	struct soap *soap)
{
	struct __ns3__bloqueEstadistica *_p = soap_new___ns3__bloqueEstadistica(soap);
	if (_p)
	{	soap_default___ns3__bloqueEstadistica(soap, _p);
	}
	return _p;
}

inline struct __ns3__bloqueEstadistica * soap_new_set___ns3__bloqueEstadistica(
	struct soap *soap,
	ns3__bloqueEstadisticaRequest *ns3__bloqueEstadisticaRequest_)
{
	struct __ns3__bloqueEstadistica *_p = soap_new___ns3__bloqueEstadistica(soap);
	if (_p)
	{	soap_default___ns3__bloqueEstadistica(soap, _p);
		_p->ns3__bloqueEstadisticaRequest_ = ns3__bloqueEstadisticaRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__bloqueEstadistica(struct soap*, const struct __ns3__bloqueEstadistica *, const char*, const char*);

inline int soap_write___ns3__bloqueEstadistica(struct soap *soap, struct __ns3__bloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__bloqueEstadistica(soap, p), 0) || soap_put___ns3__bloqueEstadistica(soap, p, "-ns3:bloqueEstadistica", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__bloqueEstadistica(struct soap *soap, const char *URL, struct __ns3__bloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__bloqueEstadistica(soap, p), 0) || soap_put___ns3__bloqueEstadistica(soap, p, "-ns3:bloqueEstadistica", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__bloqueEstadistica(struct soap *soap, const char *URL, struct __ns3__bloqueEstadistica const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__bloqueEstadistica(soap, p), 0) || soap_put___ns3__bloqueEstadistica(soap, p, "-ns3:bloqueEstadistica", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__bloqueEstadistica * SOAP_FMAC4 soap_get___ns3__bloqueEstadistica(struct soap*, struct __ns3__bloqueEstadistica *, const char*, const char*);

inline int soap_read___ns3__bloqueEstadistica(struct soap *soap, struct __ns3__bloqueEstadistica *p)
{
	if (p)
	{	soap_default___ns3__bloqueEstadistica(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__bloqueEstadistica(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__bloqueEstadistica(struct soap *soap, const char *URL, struct __ns3__bloqueEstadistica *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__bloqueEstadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__bloqueEstadistica(struct soap *soap, struct __ns3__bloqueEstadistica *p)
{
	if (soap_read___ns3__bloqueEstadistica(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__registroCorreoBancoppel_DEFINED
#define SOAP_TYPE___ns3__registroCorreoBancoppel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__registroCorreoBancoppel(struct soap*, struct __ns3__registroCorreoBancoppel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__registroCorreoBancoppel(struct soap*, const struct __ns3__registroCorreoBancoppel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__registroCorreoBancoppel(struct soap*, const char*, int, const struct __ns3__registroCorreoBancoppel *, const char*);
SOAP_FMAC3 struct __ns3__registroCorreoBancoppel * SOAP_FMAC4 soap_in___ns3__registroCorreoBancoppel(struct soap*, const char*, struct __ns3__registroCorreoBancoppel *, const char*);
SOAP_FMAC1 struct __ns3__registroCorreoBancoppel * SOAP_FMAC2 soap_instantiate___ns3__registroCorreoBancoppel(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__registroCorreoBancoppel * soap_new___ns3__registroCorreoBancoppel(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__registroCorreoBancoppel(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__registroCorreoBancoppel * soap_new_req___ns3__registroCorreoBancoppel(
	struct soap *soap)
{
	struct __ns3__registroCorreoBancoppel *_p = soap_new___ns3__registroCorreoBancoppel(soap);
	if (_p)
	{	soap_default___ns3__registroCorreoBancoppel(soap, _p);
	}
	return _p;
}

inline struct __ns3__registroCorreoBancoppel * soap_new_set___ns3__registroCorreoBancoppel(
	struct soap *soap,
	ns3__registroCorreoBancoppelRequest *ns3__registroCorreoBancoppelRequest_)
{
	struct __ns3__registroCorreoBancoppel *_p = soap_new___ns3__registroCorreoBancoppel(soap);
	if (_p)
	{	soap_default___ns3__registroCorreoBancoppel(soap, _p);
		_p->ns3__registroCorreoBancoppelRequest_ = ns3__registroCorreoBancoppelRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__registroCorreoBancoppel(struct soap*, const struct __ns3__registroCorreoBancoppel *, const char*, const char*);

inline int soap_write___ns3__registroCorreoBancoppel(struct soap *soap, struct __ns3__registroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__registroCorreoBancoppel(soap, p), 0) || soap_put___ns3__registroCorreoBancoppel(soap, p, "-ns3:registroCorreoBancoppel", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__registroCorreoBancoppel(struct soap *soap, const char *URL, struct __ns3__registroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__registroCorreoBancoppel(soap, p), 0) || soap_put___ns3__registroCorreoBancoppel(soap, p, "-ns3:registroCorreoBancoppel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__registroCorreoBancoppel(struct soap *soap, const char *URL, struct __ns3__registroCorreoBancoppel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__registroCorreoBancoppel(soap, p), 0) || soap_put___ns3__registroCorreoBancoppel(soap, p, "-ns3:registroCorreoBancoppel", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__registroCorreoBancoppel * SOAP_FMAC4 soap_get___ns3__registroCorreoBancoppel(struct soap*, struct __ns3__registroCorreoBancoppel *, const char*, const char*);

inline int soap_read___ns3__registroCorreoBancoppel(struct soap *soap, struct __ns3__registroCorreoBancoppel *p)
{
	if (p)
	{	soap_default___ns3__registroCorreoBancoppel(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__registroCorreoBancoppel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__registroCorreoBancoppel(struct soap *soap, const char *URL, struct __ns3__registroCorreoBancoppel *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__registroCorreoBancoppel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__registroCorreoBancoppel(struct soap *soap, struct __ns3__registroCorreoBancoppel *p)
{
	if (soap_read___ns3__registroCorreoBancoppel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__registroCorreo_DEFINED
#define SOAP_TYPE___ns3__registroCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__registroCorreo(struct soap*, struct __ns3__registroCorreo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__registroCorreo(struct soap*, const struct __ns3__registroCorreo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__registroCorreo(struct soap*, const char*, int, const struct __ns3__registroCorreo *, const char*);
SOAP_FMAC3 struct __ns3__registroCorreo * SOAP_FMAC4 soap_in___ns3__registroCorreo(struct soap*, const char*, struct __ns3__registroCorreo *, const char*);
SOAP_FMAC1 struct __ns3__registroCorreo * SOAP_FMAC2 soap_instantiate___ns3__registroCorreo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__registroCorreo * soap_new___ns3__registroCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__registroCorreo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__registroCorreo * soap_new_req___ns3__registroCorreo(
	struct soap *soap)
{
	struct __ns3__registroCorreo *_p = soap_new___ns3__registroCorreo(soap);
	if (_p)
	{	soap_default___ns3__registroCorreo(soap, _p);
	}
	return _p;
}

inline struct __ns3__registroCorreo * soap_new_set___ns3__registroCorreo(
	struct soap *soap,
	ns3__registroCorreoRequest *ns3__registroCorreoRequest_)
{
	struct __ns3__registroCorreo *_p = soap_new___ns3__registroCorreo(soap);
	if (_p)
	{	soap_default___ns3__registroCorreo(soap, _p);
		_p->ns3__registroCorreoRequest_ = ns3__registroCorreoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__registroCorreo(struct soap*, const struct __ns3__registroCorreo *, const char*, const char*);

inline int soap_write___ns3__registroCorreo(struct soap *soap, struct __ns3__registroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__registroCorreo(soap, p), 0) || soap_put___ns3__registroCorreo(soap, p, "-ns3:registroCorreo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__registroCorreo(struct soap *soap, const char *URL, struct __ns3__registroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__registroCorreo(soap, p), 0) || soap_put___ns3__registroCorreo(soap, p, "-ns3:registroCorreo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__registroCorreo(struct soap *soap, const char *URL, struct __ns3__registroCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__registroCorreo(soap, p), 0) || soap_put___ns3__registroCorreo(soap, p, "-ns3:registroCorreo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__registroCorreo * SOAP_FMAC4 soap_get___ns3__registroCorreo(struct soap*, struct __ns3__registroCorreo *, const char*, const char*);

inline int soap_read___ns3__registroCorreo(struct soap *soap, struct __ns3__registroCorreo *p)
{
	if (p)
	{	soap_default___ns3__registroCorreo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__registroCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__registroCorreo(struct soap *soap, const char *URL, struct __ns3__registroCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__registroCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__registroCorreo(struct soap *soap, struct __ns3__registroCorreo *p)
{
	if (soap_read___ns3__registroCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__desligueClienteNumeroCliente_DEFINED
#define SOAP_TYPE___ns3__desligueClienteNumeroCliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__desligueClienteNumeroCliente(struct soap*, struct __ns3__desligueClienteNumeroCliente *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__desligueClienteNumeroCliente(struct soap*, const struct __ns3__desligueClienteNumeroCliente *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__desligueClienteNumeroCliente(struct soap*, const char*, int, const struct __ns3__desligueClienteNumeroCliente *, const char*);
SOAP_FMAC3 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC4 soap_in___ns3__desligueClienteNumeroCliente(struct soap*, const char*, struct __ns3__desligueClienteNumeroCliente *, const char*);
SOAP_FMAC1 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteNumeroCliente(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__desligueClienteNumeroCliente * soap_new___ns3__desligueClienteNumeroCliente(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__desligueClienteNumeroCliente(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__desligueClienteNumeroCliente * soap_new_req___ns3__desligueClienteNumeroCliente(
	struct soap *soap)
{
	struct __ns3__desligueClienteNumeroCliente *_p = soap_new___ns3__desligueClienteNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__desligueClienteNumeroCliente(soap, _p);
	}
	return _p;
}

inline struct __ns3__desligueClienteNumeroCliente * soap_new_set___ns3__desligueClienteNumeroCliente(
	struct soap *soap,
	ns3__desligueClienteNumeroClienteRequest *ns3__desligueClienteNumeroClienteRequest_)
{
	struct __ns3__desligueClienteNumeroCliente *_p = soap_new___ns3__desligueClienteNumeroCliente(soap);
	if (_p)
	{	soap_default___ns3__desligueClienteNumeroCliente(soap, _p);
		_p->ns3__desligueClienteNumeroClienteRequest_ = ns3__desligueClienteNumeroClienteRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__desligueClienteNumeroCliente(struct soap*, const struct __ns3__desligueClienteNumeroCliente *, const char*, const char*);

inline int soap_write___ns3__desligueClienteNumeroCliente(struct soap *soap, struct __ns3__desligueClienteNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__desligueClienteNumeroCliente(soap, p), 0) || soap_put___ns3__desligueClienteNumeroCliente(soap, p, "-ns3:desligueClienteNumeroCliente", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__desligueClienteNumeroCliente(struct soap *soap, const char *URL, struct __ns3__desligueClienteNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__desligueClienteNumeroCliente(soap, p), 0) || soap_put___ns3__desligueClienteNumeroCliente(soap, p, "-ns3:desligueClienteNumeroCliente", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__desligueClienteNumeroCliente(struct soap *soap, const char *URL, struct __ns3__desligueClienteNumeroCliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__desligueClienteNumeroCliente(soap, p), 0) || soap_put___ns3__desligueClienteNumeroCliente(soap, p, "-ns3:desligueClienteNumeroCliente", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC4 soap_get___ns3__desligueClienteNumeroCliente(struct soap*, struct __ns3__desligueClienteNumeroCliente *, const char*, const char*);

inline int soap_read___ns3__desligueClienteNumeroCliente(struct soap *soap, struct __ns3__desligueClienteNumeroCliente *p)
{
	if (p)
	{	soap_default___ns3__desligueClienteNumeroCliente(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__desligueClienteNumeroCliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__desligueClienteNumeroCliente(struct soap *soap, const char *URL, struct __ns3__desligueClienteNumeroCliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__desligueClienteNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__desligueClienteNumeroCliente(struct soap *soap, struct __ns3__desligueClienteNumeroCliente *p)
{
	if (soap_read___ns3__desligueClienteNumeroCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__desligueClienteCorreo_DEFINED
#define SOAP_TYPE___ns3__desligueClienteCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__desligueClienteCorreo(struct soap*, struct __ns3__desligueClienteCorreo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__desligueClienteCorreo(struct soap*, const struct __ns3__desligueClienteCorreo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__desligueClienteCorreo(struct soap*, const char*, int, const struct __ns3__desligueClienteCorreo *, const char*);
SOAP_FMAC3 struct __ns3__desligueClienteCorreo * SOAP_FMAC4 soap_in___ns3__desligueClienteCorreo(struct soap*, const char*, struct __ns3__desligueClienteCorreo *, const char*);
SOAP_FMAC1 struct __ns3__desligueClienteCorreo * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteCorreo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__desligueClienteCorreo * soap_new___ns3__desligueClienteCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__desligueClienteCorreo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__desligueClienteCorreo * soap_new_req___ns3__desligueClienteCorreo(
	struct soap *soap)
{
	struct __ns3__desligueClienteCorreo *_p = soap_new___ns3__desligueClienteCorreo(soap);
	if (_p)
	{	soap_default___ns3__desligueClienteCorreo(soap, _p);
	}
	return _p;
}

inline struct __ns3__desligueClienteCorreo * soap_new_set___ns3__desligueClienteCorreo(
	struct soap *soap,
	ns3__desligueClienteCorreoRequest *ns3__desligueClienteCorreoRequest_)
{
	struct __ns3__desligueClienteCorreo *_p = soap_new___ns3__desligueClienteCorreo(soap);
	if (_p)
	{	soap_default___ns3__desligueClienteCorreo(soap, _p);
		_p->ns3__desligueClienteCorreoRequest_ = ns3__desligueClienteCorreoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__desligueClienteCorreo(struct soap*, const struct __ns3__desligueClienteCorreo *, const char*, const char*);

inline int soap_write___ns3__desligueClienteCorreo(struct soap *soap, struct __ns3__desligueClienteCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__desligueClienteCorreo(soap, p), 0) || soap_put___ns3__desligueClienteCorreo(soap, p, "-ns3:desligueClienteCorreo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__desligueClienteCorreo(struct soap *soap, const char *URL, struct __ns3__desligueClienteCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__desligueClienteCorreo(soap, p), 0) || soap_put___ns3__desligueClienteCorreo(soap, p, "-ns3:desligueClienteCorreo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__desligueClienteCorreo(struct soap *soap, const char *URL, struct __ns3__desligueClienteCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__desligueClienteCorreo(soap, p), 0) || soap_put___ns3__desligueClienteCorreo(soap, p, "-ns3:desligueClienteCorreo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__desligueClienteCorreo * SOAP_FMAC4 soap_get___ns3__desligueClienteCorreo(struct soap*, struct __ns3__desligueClienteCorreo *, const char*, const char*);

inline int soap_read___ns3__desligueClienteCorreo(struct soap *soap, struct __ns3__desligueClienteCorreo *p)
{
	if (p)
	{	soap_default___ns3__desligueClienteCorreo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__desligueClienteCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__desligueClienteCorreo(struct soap *soap, const char *URL, struct __ns3__desligueClienteCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__desligueClienteCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__desligueClienteCorreo(struct soap *soap, struct __ns3__desligueClienteCorreo *p)
{
	if (soap_read___ns3__desligueClienteCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__validarFrecuencia_DEFINED
#define SOAP_TYPE___ns3__validarFrecuencia_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validarFrecuencia(struct soap*, struct __ns3__validarFrecuencia *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validarFrecuencia(struct soap*, const struct __ns3__validarFrecuencia *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validarFrecuencia(struct soap*, const char*, int, const struct __ns3__validarFrecuencia *, const char*);
SOAP_FMAC3 struct __ns3__validarFrecuencia * SOAP_FMAC4 soap_in___ns3__validarFrecuencia(struct soap*, const char*, struct __ns3__validarFrecuencia *, const char*);
SOAP_FMAC1 struct __ns3__validarFrecuencia * SOAP_FMAC2 soap_instantiate___ns3__validarFrecuencia(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__validarFrecuencia * soap_new___ns3__validarFrecuencia(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__validarFrecuencia(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__validarFrecuencia * soap_new_req___ns3__validarFrecuencia(
	struct soap *soap)
{
	struct __ns3__validarFrecuencia *_p = soap_new___ns3__validarFrecuencia(soap);
	if (_p)
	{	soap_default___ns3__validarFrecuencia(soap, _p);
	}
	return _p;
}

inline struct __ns3__validarFrecuencia * soap_new_set___ns3__validarFrecuencia(
	struct soap *soap,
	ns3__validarFrecuenciaRequest *ns3__validarFrecuenciaRequest_)
{
	struct __ns3__validarFrecuencia *_p = soap_new___ns3__validarFrecuencia(soap);
	if (_p)
	{	soap_default___ns3__validarFrecuencia(soap, _p);
		_p->ns3__validarFrecuenciaRequest_ = ns3__validarFrecuenciaRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validarFrecuencia(struct soap*, const struct __ns3__validarFrecuencia *, const char*, const char*);

inline int soap_write___ns3__validarFrecuencia(struct soap *soap, struct __ns3__validarFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__validarFrecuencia(soap, p), 0) || soap_put___ns3__validarFrecuencia(soap, p, "-ns3:validarFrecuencia", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__validarFrecuencia(struct soap *soap, const char *URL, struct __ns3__validarFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validarFrecuencia(soap, p), 0) || soap_put___ns3__validarFrecuencia(soap, p, "-ns3:validarFrecuencia", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__validarFrecuencia(struct soap *soap, const char *URL, struct __ns3__validarFrecuencia const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validarFrecuencia(soap, p), 0) || soap_put___ns3__validarFrecuencia(soap, p, "-ns3:validarFrecuencia", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__validarFrecuencia * SOAP_FMAC4 soap_get___ns3__validarFrecuencia(struct soap*, struct __ns3__validarFrecuencia *, const char*, const char*);

inline int soap_read___ns3__validarFrecuencia(struct soap *soap, struct __ns3__validarFrecuencia *p)
{
	if (p)
	{	soap_default___ns3__validarFrecuencia(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__validarFrecuencia(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__validarFrecuencia(struct soap *soap, const char *URL, struct __ns3__validarFrecuencia *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__validarFrecuencia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__validarFrecuencia(struct soap *soap, struct __ns3__validarFrecuencia *p)
{
	if (soap_read___ns3__validarFrecuencia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__validaCandidato_DEFINED
#define SOAP_TYPE___ns3__validaCandidato_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validaCandidato(struct soap*, struct __ns3__validaCandidato *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validaCandidato(struct soap*, const struct __ns3__validaCandidato *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validaCandidato(struct soap*, const char*, int, const struct __ns3__validaCandidato *, const char*);
SOAP_FMAC3 struct __ns3__validaCandidato * SOAP_FMAC4 soap_in___ns3__validaCandidato(struct soap*, const char*, struct __ns3__validaCandidato *, const char*);
SOAP_FMAC1 struct __ns3__validaCandidato * SOAP_FMAC2 soap_instantiate___ns3__validaCandidato(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__validaCandidato * soap_new___ns3__validaCandidato(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__validaCandidato(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__validaCandidato * soap_new_req___ns3__validaCandidato(
	struct soap *soap)
{
	struct __ns3__validaCandidato *_p = soap_new___ns3__validaCandidato(soap);
	if (_p)
	{	soap_default___ns3__validaCandidato(soap, _p);
	}
	return _p;
}

inline struct __ns3__validaCandidato * soap_new_set___ns3__validaCandidato(
	struct soap *soap,
	ns3__validaCandidatoRequest *ns3__validaCandidatoRequest_)
{
	struct __ns3__validaCandidato *_p = soap_new___ns3__validaCandidato(soap);
	if (_p)
	{	soap_default___ns3__validaCandidato(soap, _p);
		_p->ns3__validaCandidatoRequest_ = ns3__validaCandidatoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validaCandidato(struct soap*, const struct __ns3__validaCandidato *, const char*, const char*);

inline int soap_write___ns3__validaCandidato(struct soap *soap, struct __ns3__validaCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__validaCandidato(soap, p), 0) || soap_put___ns3__validaCandidato(soap, p, "-ns3:validaCandidato", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__validaCandidato(struct soap *soap, const char *URL, struct __ns3__validaCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validaCandidato(soap, p), 0) || soap_put___ns3__validaCandidato(soap, p, "-ns3:validaCandidato", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__validaCandidato(struct soap *soap, const char *URL, struct __ns3__validaCandidato const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validaCandidato(soap, p), 0) || soap_put___ns3__validaCandidato(soap, p, "-ns3:validaCandidato", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__validaCandidato * SOAP_FMAC4 soap_get___ns3__validaCandidato(struct soap*, struct __ns3__validaCandidato *, const char*, const char*);

inline int soap_read___ns3__validaCandidato(struct soap *soap, struct __ns3__validaCandidato *p)
{
	if (p)
	{	soap_default___ns3__validaCandidato(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__validaCandidato(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__validaCandidato(struct soap *soap, const char *URL, struct __ns3__validaCandidato *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__validaCandidato(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__validaCandidato(struct soap *soap, struct __ns3__validaCandidato *p)
{
	if (soap_read___ns3__validaCandidato(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__consultaCorreo_DEFINED
#define SOAP_TYPE___ns3__consultaCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultaCorreo(struct soap*, struct __ns3__consultaCorreo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultaCorreo(struct soap*, const struct __ns3__consultaCorreo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultaCorreo(struct soap*, const char*, int, const struct __ns3__consultaCorreo *, const char*);
SOAP_FMAC3 struct __ns3__consultaCorreo * SOAP_FMAC4 soap_in___ns3__consultaCorreo(struct soap*, const char*, struct __ns3__consultaCorreo *, const char*);
SOAP_FMAC1 struct __ns3__consultaCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__consultaCorreo * soap_new___ns3__consultaCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__consultaCorreo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__consultaCorreo * soap_new_req___ns3__consultaCorreo(
	struct soap *soap)
{
	struct __ns3__consultaCorreo *_p = soap_new___ns3__consultaCorreo(soap);
	if (_p)
	{	soap_default___ns3__consultaCorreo(soap, _p);
	}
	return _p;
}

inline struct __ns3__consultaCorreo * soap_new_set___ns3__consultaCorreo(
	struct soap *soap,
	ns3__consultaCorreoRequest *ns3__consultaCorreoRequest_)
{
	struct __ns3__consultaCorreo *_p = soap_new___ns3__consultaCorreo(soap);
	if (_p)
	{	soap_default___ns3__consultaCorreo(soap, _p);
		_p->ns3__consultaCorreoRequest_ = ns3__consultaCorreoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultaCorreo(struct soap*, const struct __ns3__consultaCorreo *, const char*, const char*);

inline int soap_write___ns3__consultaCorreo(struct soap *soap, struct __ns3__consultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__consultaCorreo(soap, p), 0) || soap_put___ns3__consultaCorreo(soap, p, "-ns3:consultaCorreo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__consultaCorreo(struct soap *soap, const char *URL, struct __ns3__consultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultaCorreo(soap, p), 0) || soap_put___ns3__consultaCorreo(soap, p, "-ns3:consultaCorreo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__consultaCorreo(struct soap *soap, const char *URL, struct __ns3__consultaCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__consultaCorreo(soap, p), 0) || soap_put___ns3__consultaCorreo(soap, p, "-ns3:consultaCorreo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__consultaCorreo * SOAP_FMAC4 soap_get___ns3__consultaCorreo(struct soap*, struct __ns3__consultaCorreo *, const char*, const char*);

inline int soap_read___ns3__consultaCorreo(struct soap *soap, struct __ns3__consultaCorreo *p)
{
	if (p)
	{	soap_default___ns3__consultaCorreo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__consultaCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__consultaCorreo(struct soap *soap, const char *URL, struct __ns3__consultaCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__consultaCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__consultaCorreo(struct soap *soap, struct __ns3__consultaCorreo *p)
{
	if (soap_read___ns3__consultaCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__validaSintaxisCorreo_DEFINED
#define SOAP_TYPE___ns3__validaSintaxisCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validaSintaxisCorreo(struct soap*, struct __ns3__validaSintaxisCorreo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validaSintaxisCorreo(struct soap*, const struct __ns3__validaSintaxisCorreo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validaSintaxisCorreo(struct soap*, const char*, int, const struct __ns3__validaSintaxisCorreo *, const char*);
SOAP_FMAC3 struct __ns3__validaSintaxisCorreo * SOAP_FMAC4 soap_in___ns3__validaSintaxisCorreo(struct soap*, const char*, struct __ns3__validaSintaxisCorreo *, const char*);
SOAP_FMAC1 struct __ns3__validaSintaxisCorreo * SOAP_FMAC2 soap_instantiate___ns3__validaSintaxisCorreo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__validaSintaxisCorreo * soap_new___ns3__validaSintaxisCorreo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__validaSintaxisCorreo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__validaSintaxisCorreo * soap_new_req___ns3__validaSintaxisCorreo(
	struct soap *soap)
{
	struct __ns3__validaSintaxisCorreo *_p = soap_new___ns3__validaSintaxisCorreo(soap);
	if (_p)
	{	soap_default___ns3__validaSintaxisCorreo(soap, _p);
	}
	return _p;
}

inline struct __ns3__validaSintaxisCorreo * soap_new_set___ns3__validaSintaxisCorreo(
	struct soap *soap,
	ns3__validaSintaxisCorreoRequest *ns3__validaSintaxisCorreoRequest_)
{
	struct __ns3__validaSintaxisCorreo *_p = soap_new___ns3__validaSintaxisCorreo(soap);
	if (_p)
	{	soap_default___ns3__validaSintaxisCorreo(soap, _p);
		_p->ns3__validaSintaxisCorreoRequest_ = ns3__validaSintaxisCorreoRequest_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validaSintaxisCorreo(struct soap*, const struct __ns3__validaSintaxisCorreo *, const char*, const char*);

inline int soap_write___ns3__validaSintaxisCorreo(struct soap *soap, struct __ns3__validaSintaxisCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__validaSintaxisCorreo(soap, p), 0) || soap_put___ns3__validaSintaxisCorreo(soap, p, "-ns3:validaSintaxisCorreo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__validaSintaxisCorreo(struct soap *soap, const char *URL, struct __ns3__validaSintaxisCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validaSintaxisCorreo(soap, p), 0) || soap_put___ns3__validaSintaxisCorreo(soap, p, "-ns3:validaSintaxisCorreo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__validaSintaxisCorreo(struct soap *soap, const char *URL, struct __ns3__validaSintaxisCorreo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns3__validaSintaxisCorreo(soap, p), 0) || soap_put___ns3__validaSintaxisCorreo(soap, p, "-ns3:validaSintaxisCorreo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__validaSintaxisCorreo * SOAP_FMAC4 soap_get___ns3__validaSintaxisCorreo(struct soap*, struct __ns3__validaSintaxisCorreo *, const char*, const char*);

inline int soap_read___ns3__validaSintaxisCorreo(struct soap *soap, struct __ns3__validaSintaxisCorreo *p)
{
	if (p)
	{	soap_default___ns3__validaSintaxisCorreo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__validaSintaxisCorreo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__validaSintaxisCorreo(struct soap *soap, const char *URL, struct __ns3__validaSintaxisCorreo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__validaSintaxisCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__validaSintaxisCorreo(struct soap *soap, struct __ns3__validaSintaxisCorreo *p)
{
	if (soap_read___ns3__validaSintaxisCorreo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Empleado_DEFINED
#define SOAP_TYPE_ns2__Empleado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Empleado(struct soap*, struct ns2__Empleado *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Empleado(struct soap*, const struct ns2__Empleado *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Empleado(struct soap*, const char*, int, const struct ns2__Empleado *, const char*);
SOAP_FMAC3 struct ns2__Empleado * SOAP_FMAC4 soap_in_ns2__Empleado(struct soap*, const char*, struct ns2__Empleado *, const char*);
SOAP_FMAC1 struct ns2__Empleado * SOAP_FMAC2 soap_instantiate_ns2__Empleado(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__Empleado * soap_new_ns2__Empleado(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Empleado(soap, n, NULL, NULL, NULL);
}

inline struct ns2__Empleado * soap_new_req_ns2__Empleado(
	struct soap *soap)
{
	struct ns2__Empleado *_p = soap_new_ns2__Empleado(soap);
	if (_p)
	{	soap_default_ns2__Empleado(soap, _p);
	}
	return _p;
}

inline struct ns2__Empleado * soap_new_set_ns2__Empleado(
	struct soap *soap,
	ns2__entrada *entradaEmpleado)
{
	struct ns2__Empleado *_p = soap_new_ns2__Empleado(soap);
	if (_p)
	{	soap_default_ns2__Empleado(soap, _p);
		_p->entradaEmpleado = entradaEmpleado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Empleado(struct soap*, const struct ns2__Empleado *, const char*, const char*);

inline int soap_write_ns2__Empleado(struct soap *soap, struct ns2__Empleado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__Empleado(soap, p), 0) || soap_put_ns2__Empleado(soap, p, "ns2:Empleado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Empleado(struct soap *soap, const char *URL, struct ns2__Empleado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__Empleado(soap, p), 0) || soap_put_ns2__Empleado(soap, p, "ns2:Empleado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Empleado(struct soap *soap, const char *URL, struct ns2__Empleado const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__Empleado(soap, p), 0) || soap_put_ns2__Empleado(soap, p, "ns2:Empleado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__Empleado * SOAP_FMAC4 soap_get_ns2__Empleado(struct soap*, struct ns2__Empleado *, const char*, const char*);

inline int soap_read_ns2__Empleado(struct soap *soap, struct ns2__Empleado *p)
{
	if (p)
	{	soap_default_ns2__Empleado(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__Empleado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Empleado(struct soap *soap, const char *URL, struct ns2__Empleado *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Empleado(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Empleado(struct soap *soap, struct ns2__Empleado *p)
{
	if (soap_read_ns2__Empleado(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__EmpleadoResponse_DEFINED
#define SOAP_TYPE_ns2__EmpleadoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EmpleadoResponse(struct soap*, struct ns2__EmpleadoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EmpleadoResponse(struct soap*, const struct ns2__EmpleadoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EmpleadoResponse(struct soap*, const char*, int, const struct ns2__EmpleadoResponse *, const char*);
SOAP_FMAC3 struct ns2__EmpleadoResponse * SOAP_FMAC4 soap_in_ns2__EmpleadoResponse(struct soap*, const char*, struct ns2__EmpleadoResponse *, const char*);
SOAP_FMAC1 struct ns2__EmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__EmpleadoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__EmpleadoResponse * soap_new_ns2__EmpleadoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__EmpleadoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__EmpleadoResponse * soap_new_req_ns2__EmpleadoResponse(
	struct soap *soap)
{
	struct ns2__EmpleadoResponse *_p = soap_new_ns2__EmpleadoResponse(soap);
	if (_p)
	{	soap_default_ns2__EmpleadoResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__EmpleadoResponse * soap_new_set_ns2__EmpleadoResponse(
	struct soap *soap,
	char *num_respuesta,
	char *num_adicional,
	char *num_dedo,
	char *fec_actualizacion)
{
	struct ns2__EmpleadoResponse *_p = soap_new_ns2__EmpleadoResponse(soap);
	if (_p)
	{	soap_default_ns2__EmpleadoResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
		_p->num_adicional = num_adicional;
		_p->num_dedo = num_dedo;
		_p->fec_actualizacion = fec_actualizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EmpleadoResponse(struct soap*, const struct ns2__EmpleadoResponse *, const char*, const char*);

inline int soap_write_ns2__EmpleadoResponse(struct soap *soap, struct ns2__EmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__EmpleadoResponse(soap, p), 0) || soap_put_ns2__EmpleadoResponse(soap, p, "ns2:EmpleadoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__EmpleadoResponse(struct soap *soap, const char *URL, struct ns2__EmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__EmpleadoResponse(soap, p), 0) || soap_put_ns2__EmpleadoResponse(soap, p, "ns2:EmpleadoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__EmpleadoResponse(struct soap *soap, const char *URL, struct ns2__EmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__EmpleadoResponse(soap, p), 0) || soap_put_ns2__EmpleadoResponse(soap, p, "ns2:EmpleadoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__EmpleadoResponse * SOAP_FMAC4 soap_get_ns2__EmpleadoResponse(struct soap*, struct ns2__EmpleadoResponse *, const char*, const char*);

inline int soap_read_ns2__EmpleadoResponse(struct soap *soap, struct ns2__EmpleadoResponse *p)
{
	if (p)
	{	soap_default_ns2__EmpleadoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__EmpleadoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__EmpleadoResponse(struct soap *soap, const char *URL, struct ns2__EmpleadoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__EmpleadoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__EmpleadoResponse(struct soap *soap, struct ns2__EmpleadoResponse *p)
{
	if (soap_read_ns2__EmpleadoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Cliente_DEFINED
#define SOAP_TYPE_ns2__Cliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Cliente(struct soap*, struct ns2__Cliente *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Cliente(struct soap*, const struct ns2__Cliente *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Cliente(struct soap*, const char*, int, const struct ns2__Cliente *, const char*);
SOAP_FMAC3 struct ns2__Cliente * SOAP_FMAC4 soap_in_ns2__Cliente(struct soap*, const char*, struct ns2__Cliente *, const char*);
SOAP_FMAC1 struct ns2__Cliente * SOAP_FMAC2 soap_instantiate_ns2__Cliente(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__Cliente * soap_new_ns2__Cliente(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Cliente(soap, n, NULL, NULL, NULL);
}

inline struct ns2__Cliente * soap_new_req_ns2__Cliente(
	struct soap *soap)
{
	struct ns2__Cliente *_p = soap_new_ns2__Cliente(soap);
	if (_p)
	{	soap_default_ns2__Cliente(soap, _p);
	}
	return _p;
}

inline struct ns2__Cliente * soap_new_set_ns2__Cliente(
	struct soap *soap,
	ns2__entrada *entradaCliente)
{
	struct ns2__Cliente *_p = soap_new_ns2__Cliente(soap);
	if (_p)
	{	soap_default_ns2__Cliente(soap, _p);
		_p->entradaCliente = entradaCliente;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Cliente(struct soap*, const struct ns2__Cliente *, const char*, const char*);

inline int soap_write_ns2__Cliente(struct soap *soap, struct ns2__Cliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__Cliente(soap, p), 0) || soap_put_ns2__Cliente(soap, p, "ns2:Cliente", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Cliente(struct soap *soap, const char *URL, struct ns2__Cliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__Cliente(soap, p), 0) || soap_put_ns2__Cliente(soap, p, "ns2:Cliente", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Cliente(struct soap *soap, const char *URL, struct ns2__Cliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__Cliente(soap, p), 0) || soap_put_ns2__Cliente(soap, p, "ns2:Cliente", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__Cliente * SOAP_FMAC4 soap_get_ns2__Cliente(struct soap*, struct ns2__Cliente *, const char*, const char*);

inline int soap_read_ns2__Cliente(struct soap *soap, struct ns2__Cliente *p)
{
	if (p)
	{	soap_default_ns2__Cliente(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__Cliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Cliente(struct soap *soap, const char *URL, struct ns2__Cliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Cliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Cliente(struct soap *soap, struct ns2__Cliente *p)
{
	if (soap_read_ns2__Cliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ClienteResponse_DEFINED
#define SOAP_TYPE_ns2__ClienteResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ClienteResponse(struct soap*, struct ns2__ClienteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ClienteResponse(struct soap*, const struct ns2__ClienteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClienteResponse(struct soap*, const char*, int, const struct ns2__ClienteResponse *, const char*);
SOAP_FMAC3 struct ns2__ClienteResponse * SOAP_FMAC4 soap_in_ns2__ClienteResponse(struct soap*, const char*, struct ns2__ClienteResponse *, const char*);
SOAP_FMAC1 struct ns2__ClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ClienteResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ClienteResponse * soap_new_ns2__ClienteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ClienteResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ClienteResponse * soap_new_req_ns2__ClienteResponse(
	struct soap *soap)
{
	struct ns2__ClienteResponse *_p = soap_new_ns2__ClienteResponse(soap);
	if (_p)
	{	soap_default_ns2__ClienteResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__ClienteResponse * soap_new_set_ns2__ClienteResponse(
	struct soap *soap,
	char *num_respuesta,
	char *num_adicional,
	char *num_dedo,
	char *fec_actualizacion)
{
	struct ns2__ClienteResponse *_p = soap_new_ns2__ClienteResponse(soap);
	if (_p)
	{	soap_default_ns2__ClienteResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
		_p->num_adicional = num_adicional;
		_p->num_dedo = num_dedo;
		_p->fec_actualizacion = fec_actualizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ClienteResponse(struct soap*, const struct ns2__ClienteResponse *, const char*, const char*);

inline int soap_write_ns2__ClienteResponse(struct soap *soap, struct ns2__ClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__ClienteResponse(soap, p), 0) || soap_put_ns2__ClienteResponse(soap, p, "ns2:ClienteResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ClienteResponse(struct soap *soap, const char *URL, struct ns2__ClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ClienteResponse(soap, p), 0) || soap_put_ns2__ClienteResponse(soap, p, "ns2:ClienteResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ClienteResponse(struct soap *soap, const char *URL, struct ns2__ClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ClienteResponse(soap, p), 0) || soap_put_ns2__ClienteResponse(soap, p, "ns2:ClienteResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ClienteResponse * SOAP_FMAC4 soap_get_ns2__ClienteResponse(struct soap*, struct ns2__ClienteResponse *, const char*, const char*);

inline int soap_read_ns2__ClienteResponse(struct soap *soap, struct ns2__ClienteResponse *p)
{
	if (p)
	{	soap_default_ns2__ClienteResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__ClienteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ClienteResponse(struct soap *soap, const char *URL, struct ns2__ClienteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ClienteResponse(struct soap *soap, struct ns2__ClienteResponse *p)
{
	if (soap_read_ns2__ClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ConsultaEmpleado_DEFINED
#define SOAP_TYPE_ns2__ConsultaEmpleado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaEmpleado(struct soap*, struct ns2__ConsultaEmpleado *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaEmpleado(struct soap*, const struct ns2__ConsultaEmpleado *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaEmpleado(struct soap*, const char*, int, const struct ns2__ConsultaEmpleado *, const char*);
SOAP_FMAC3 struct ns2__ConsultaEmpleado * SOAP_FMAC4 soap_in_ns2__ConsultaEmpleado(struct soap*, const char*, struct ns2__ConsultaEmpleado *, const char*);
SOAP_FMAC1 struct ns2__ConsultaEmpleado * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleado(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ConsultaEmpleado * soap_new_ns2__ConsultaEmpleado(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConsultaEmpleado(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ConsultaEmpleado * soap_new_req_ns2__ConsultaEmpleado(
	struct soap *soap)
{
	struct ns2__ConsultaEmpleado *_p = soap_new_ns2__ConsultaEmpleado(soap);
	if (_p)
	{	soap_default_ns2__ConsultaEmpleado(soap, _p);
	}
	return _p;
}

inline struct ns2__ConsultaEmpleado * soap_new_set_ns2__ConsultaEmpleado(
	struct soap *soap,
	ns2__entrada *entradaEmpleado)
{
	struct ns2__ConsultaEmpleado *_p = soap_new_ns2__ConsultaEmpleado(soap);
	if (_p)
	{	soap_default_ns2__ConsultaEmpleado(soap, _p);
		_p->entradaEmpleado = entradaEmpleado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaEmpleado(struct soap*, const struct ns2__ConsultaEmpleado *, const char*, const char*);

inline int soap_write_ns2__ConsultaEmpleado(struct soap *soap, struct ns2__ConsultaEmpleado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__ConsultaEmpleado(soap, p), 0) || soap_put_ns2__ConsultaEmpleado(soap, p, "ns2:ConsultaEmpleado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConsultaEmpleado(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaEmpleado(soap, p), 0) || soap_put_ns2__ConsultaEmpleado(soap, p, "ns2:ConsultaEmpleado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConsultaEmpleado(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleado const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaEmpleado(soap, p), 0) || soap_put_ns2__ConsultaEmpleado(soap, p, "ns2:ConsultaEmpleado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ConsultaEmpleado * SOAP_FMAC4 soap_get_ns2__ConsultaEmpleado(struct soap*, struct ns2__ConsultaEmpleado *, const char*, const char*);

inline int soap_read_ns2__ConsultaEmpleado(struct soap *soap, struct ns2__ConsultaEmpleado *p)
{
	if (p)
	{	soap_default_ns2__ConsultaEmpleado(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__ConsultaEmpleado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConsultaEmpleado(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleado *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConsultaEmpleado(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConsultaEmpleado(struct soap *soap, struct ns2__ConsultaEmpleado *p)
{
	if (soap_read_ns2__ConsultaEmpleado(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ConsultaEmpleadoResponse_DEFINED
#define SOAP_TYPE_ns2__ConsultaEmpleadoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaEmpleadoResponse(struct soap*, struct ns2__ConsultaEmpleadoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaEmpleadoResponse(struct soap*, const struct ns2__ConsultaEmpleadoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaEmpleadoResponse(struct soap*, const char*, int, const struct ns2__ConsultaEmpleadoResponse *, const char*);
SOAP_FMAC3 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC4 soap_in_ns2__ConsultaEmpleadoResponse(struct soap*, const char*, struct ns2__ConsultaEmpleadoResponse *, const char*);
SOAP_FMAC1 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleadoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ConsultaEmpleadoResponse * soap_new_ns2__ConsultaEmpleadoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConsultaEmpleadoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ConsultaEmpleadoResponse * soap_new_req_ns2__ConsultaEmpleadoResponse(
	struct soap *soap,
	char *num_respuesta)
{
	struct ns2__ConsultaEmpleadoResponse *_p = soap_new_ns2__ConsultaEmpleadoResponse(soap);
	if (_p)
	{	soap_default_ns2__ConsultaEmpleadoResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
	}
	return _p;
}

inline struct ns2__ConsultaEmpleadoResponse * soap_new_set_ns2__ConsultaEmpleadoResponse(
	struct soap *soap,
	char *num_respuesta)
{
	struct ns2__ConsultaEmpleadoResponse *_p = soap_new_ns2__ConsultaEmpleadoResponse(soap);
	if (_p)
	{	soap_default_ns2__ConsultaEmpleadoResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaEmpleadoResponse(struct soap*, const struct ns2__ConsultaEmpleadoResponse *, const char*, const char*);

inline int soap_write_ns2__ConsultaEmpleadoResponse(struct soap *soap, struct ns2__ConsultaEmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__ConsultaEmpleadoResponse(soap, p), 0) || soap_put_ns2__ConsultaEmpleadoResponse(soap, p, "ns2:ConsultaEmpleadoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConsultaEmpleadoResponse(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaEmpleadoResponse(soap, p), 0) || soap_put_ns2__ConsultaEmpleadoResponse(soap, p, "ns2:ConsultaEmpleadoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConsultaEmpleadoResponse(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaEmpleadoResponse(soap, p), 0) || soap_put_ns2__ConsultaEmpleadoResponse(soap, p, "ns2:ConsultaEmpleadoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC4 soap_get_ns2__ConsultaEmpleadoResponse(struct soap*, struct ns2__ConsultaEmpleadoResponse *, const char*, const char*);

inline int soap_read_ns2__ConsultaEmpleadoResponse(struct soap *soap, struct ns2__ConsultaEmpleadoResponse *p)
{
	if (p)
	{	soap_default_ns2__ConsultaEmpleadoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__ConsultaEmpleadoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConsultaEmpleadoResponse(struct soap *soap, const char *URL, struct ns2__ConsultaEmpleadoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConsultaEmpleadoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConsultaEmpleadoResponse(struct soap *soap, struct ns2__ConsultaEmpleadoResponse *p)
{
	if (soap_read_ns2__ConsultaEmpleadoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ConsultaCliente_DEFINED
#define SOAP_TYPE_ns2__ConsultaCliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaCliente(struct soap*, struct ns2__ConsultaCliente *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaCliente(struct soap*, const struct ns2__ConsultaCliente *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaCliente(struct soap*, const char*, int, const struct ns2__ConsultaCliente *, const char*);
SOAP_FMAC3 struct ns2__ConsultaCliente * SOAP_FMAC4 soap_in_ns2__ConsultaCliente(struct soap*, const char*, struct ns2__ConsultaCliente *, const char*);
SOAP_FMAC1 struct ns2__ConsultaCliente * SOAP_FMAC2 soap_instantiate_ns2__ConsultaCliente(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ConsultaCliente * soap_new_ns2__ConsultaCliente(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConsultaCliente(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ConsultaCliente * soap_new_req_ns2__ConsultaCliente(
	struct soap *soap)
{
	struct ns2__ConsultaCliente *_p = soap_new_ns2__ConsultaCliente(soap);
	if (_p)
	{	soap_default_ns2__ConsultaCliente(soap, _p);
	}
	return _p;
}

inline struct ns2__ConsultaCliente * soap_new_set_ns2__ConsultaCliente(
	struct soap *soap,
	ns2__entrada *entradaCliente)
{
	struct ns2__ConsultaCliente *_p = soap_new_ns2__ConsultaCliente(soap);
	if (_p)
	{	soap_default_ns2__ConsultaCliente(soap, _p);
		_p->entradaCliente = entradaCliente;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaCliente(struct soap*, const struct ns2__ConsultaCliente *, const char*, const char*);

inline int soap_write_ns2__ConsultaCliente(struct soap *soap, struct ns2__ConsultaCliente const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__ConsultaCliente(soap, p), 0) || soap_put_ns2__ConsultaCliente(soap, p, "ns2:ConsultaCliente", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConsultaCliente(struct soap *soap, const char *URL, struct ns2__ConsultaCliente const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaCliente(soap, p), 0) || soap_put_ns2__ConsultaCliente(soap, p, "ns2:ConsultaCliente", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConsultaCliente(struct soap *soap, const char *URL, struct ns2__ConsultaCliente const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaCliente(soap, p), 0) || soap_put_ns2__ConsultaCliente(soap, p, "ns2:ConsultaCliente", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ConsultaCliente * SOAP_FMAC4 soap_get_ns2__ConsultaCliente(struct soap*, struct ns2__ConsultaCliente *, const char*, const char*);

inline int soap_read_ns2__ConsultaCliente(struct soap *soap, struct ns2__ConsultaCliente *p)
{
	if (p)
	{	soap_default_ns2__ConsultaCliente(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__ConsultaCliente(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConsultaCliente(struct soap *soap, const char *URL, struct ns2__ConsultaCliente *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConsultaCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConsultaCliente(struct soap *soap, struct ns2__ConsultaCliente *p)
{
	if (soap_read_ns2__ConsultaCliente(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ConsultaClienteResponse_DEFINED
#define SOAP_TYPE_ns2__ConsultaClienteResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaClienteResponse(struct soap*, struct ns2__ConsultaClienteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaClienteResponse(struct soap*, const struct ns2__ConsultaClienteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaClienteResponse(struct soap*, const char*, int, const struct ns2__ConsultaClienteResponse *, const char*);
SOAP_FMAC3 struct ns2__ConsultaClienteResponse * SOAP_FMAC4 soap_in_ns2__ConsultaClienteResponse(struct soap*, const char*, struct ns2__ConsultaClienteResponse *, const char*);
SOAP_FMAC1 struct ns2__ConsultaClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaClienteResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ConsultaClienteResponse * soap_new_ns2__ConsultaClienteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConsultaClienteResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ConsultaClienteResponse * soap_new_req_ns2__ConsultaClienteResponse(
	struct soap *soap,
	char *num_respuesta)
{
	struct ns2__ConsultaClienteResponse *_p = soap_new_ns2__ConsultaClienteResponse(soap);
	if (_p)
	{	soap_default_ns2__ConsultaClienteResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
	}
	return _p;
}

inline struct ns2__ConsultaClienteResponse * soap_new_set_ns2__ConsultaClienteResponse(
	struct soap *soap,
	char *num_respuesta)
{
	struct ns2__ConsultaClienteResponse *_p = soap_new_ns2__ConsultaClienteResponse(soap);
	if (_p)
	{	soap_default_ns2__ConsultaClienteResponse(soap, _p);
		_p->num_respuesta = num_respuesta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaClienteResponse(struct soap*, const struct ns2__ConsultaClienteResponse *, const char*, const char*);

inline int soap_write_ns2__ConsultaClienteResponse(struct soap *soap, struct ns2__ConsultaClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns2__ConsultaClienteResponse(soap, p), 0) || soap_put_ns2__ConsultaClienteResponse(soap, p, "ns2:ConsultaClienteResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConsultaClienteResponse(struct soap *soap, const char *URL, struct ns2__ConsultaClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaClienteResponse(soap, p), 0) || soap_put_ns2__ConsultaClienteResponse(soap, p, "ns2:ConsultaClienteResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConsultaClienteResponse(struct soap *soap, const char *URL, struct ns2__ConsultaClienteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__ConsultaClienteResponse(soap, p), 0) || soap_put_ns2__ConsultaClienteResponse(soap, p, "ns2:ConsultaClienteResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ConsultaClienteResponse * SOAP_FMAC4 soap_get_ns2__ConsultaClienteResponse(struct soap*, struct ns2__ConsultaClienteResponse *, const char*, const char*);

inline int soap_read_ns2__ConsultaClienteResponse(struct soap *soap, struct ns2__ConsultaClienteResponse *p)
{
	if (p)
	{	soap_default_ns2__ConsultaClienteResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns2__ConsultaClienteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConsultaClienteResponse(struct soap *soap, const char *URL, struct ns2__ConsultaClienteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConsultaClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConsultaClienteResponse(struct soap *soap, struct ns2__ConsultaClienteResponse *p)
{
	if (soap_read_ns2__ConsultaClienteResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns3__ServiceException *ns3__ServiceException_,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns3__ServiceException_ = ns3__ServiceException_;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons3__insertaMovimientosRequest_DEFINED
#define SOAP_TYPE_PointerTons3__insertaMovimientosRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__insertaMovimientosRequest(struct soap*, ns3__insertaMovimientosRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__insertaMovimientosRequest(struct soap*, const char *, int, ns3__insertaMovimientosRequest *const*, const char *);
SOAP_FMAC3 ns3__insertaMovimientosRequest ** SOAP_FMAC4 soap_in_PointerTons3__insertaMovimientosRequest(struct soap*, const char*, ns3__insertaMovimientosRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__insertaMovimientosRequest(struct soap*, ns3__insertaMovimientosRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__insertaMovimientosRequest ** SOAP_FMAC4 soap_get_PointerTons3__insertaMovimientosRequest(struct soap*, ns3__insertaMovimientosRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__cierreEstadisticasRequest_DEFINED
#define SOAP_TYPE_PointerTons3__cierreEstadisticasRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__cierreEstadisticasRequest(struct soap*, ns3__cierreEstadisticasRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__cierreEstadisticasRequest(struct soap*, const char *, int, ns3__cierreEstadisticasRequest *const*, const char *);
SOAP_FMAC3 ns3__cierreEstadisticasRequest ** SOAP_FMAC4 soap_in_PointerTons3__cierreEstadisticasRequest(struct soap*, const char*, ns3__cierreEstadisticasRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__cierreEstadisticasRequest(struct soap*, ns3__cierreEstadisticasRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__cierreEstadisticasRequest ** SOAP_FMAC4 soap_get_PointerTons3__cierreEstadisticasRequest(struct soap*, ns3__cierreEstadisticasRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest_DEFINED
#define SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, ns3__consultarIndicadoresPorNumeroClienteRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, const char *, int, ns3__consultarIndicadoresPorNumeroClienteRequest *const*, const char *);
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, const char*, ns3__consultarIndicadoresPorNumeroClienteRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, ns3__consultarIndicadoresPorNumeroClienteRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, ns3__consultarIndicadoresPorNumeroClienteRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap*, ns3__consultarIndicadoresPorCorreoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap*, const char *, int, ns3__consultarIndicadoresPorCorreoRequest *const*, const char *);
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap*, const char*, ns3__consultarIndicadoresPorCorreoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap*, ns3__consultarIndicadoresPorCorreoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap*, ns3__consultarIndicadoresPorCorreoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest_DEFINED
#define SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap*, ns3__consultaCorreoPorNumeroClienteRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap*, const char *, int, ns3__consultaCorreoPorNumeroClienteRequest *const*, const char *);
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap*, const char*, ns3__consultaCorreoPorNumeroClienteRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap*, ns3__consultaCorreoPorNumeroClienteRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap*, ns3__consultaCorreoPorNumeroClienteRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest_DEFINED
#define SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__bloqueEstadisticaRequest(struct soap*, ns3__bloqueEstadisticaRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__bloqueEstadisticaRequest(struct soap*, const char *, int, ns3__bloqueEstadisticaRequest *const*, const char *);
SOAP_FMAC3 ns3__bloqueEstadisticaRequest ** SOAP_FMAC4 soap_in_PointerTons3__bloqueEstadisticaRequest(struct soap*, const char*, ns3__bloqueEstadisticaRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__bloqueEstadisticaRequest(struct soap*, ns3__bloqueEstadisticaRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__bloqueEstadisticaRequest ** SOAP_FMAC4 soap_get_PointerTons3__bloqueEstadisticaRequest(struct soap*, ns3__bloqueEstadisticaRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest_DEFINED
#define SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__registroCorreoBancoppelRequest(struct soap*, ns3__registroCorreoBancoppelRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__registroCorreoBancoppelRequest(struct soap*, const char *, int, ns3__registroCorreoBancoppelRequest *const*, const char *);
SOAP_FMAC3 ns3__registroCorreoBancoppelRequest ** SOAP_FMAC4 soap_in_PointerTons3__registroCorreoBancoppelRequest(struct soap*, const char*, ns3__registroCorreoBancoppelRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__registroCorreoBancoppelRequest(struct soap*, ns3__registroCorreoBancoppelRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__registroCorreoBancoppelRequest ** SOAP_FMAC4 soap_get_PointerTons3__registroCorreoBancoppelRequest(struct soap*, ns3__registroCorreoBancoppelRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__registroCorreoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__registroCorreoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__registroCorreoRequest(struct soap*, ns3__registroCorreoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__registroCorreoRequest(struct soap*, const char *, int, ns3__registroCorreoRequest *const*, const char *);
SOAP_FMAC3 ns3__registroCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__registroCorreoRequest(struct soap*, const char*, ns3__registroCorreoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__registroCorreoRequest(struct soap*, ns3__registroCorreoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__registroCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__registroCorreoRequest(struct soap*, ns3__registroCorreoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest_DEFINED
#define SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__desligueClienteNumeroClienteRequest(struct soap*, ns3__desligueClienteNumeroClienteRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__desligueClienteNumeroClienteRequest(struct soap*, const char *, int, ns3__desligueClienteNumeroClienteRequest *const*, const char *);
SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__desligueClienteNumeroClienteRequest(struct soap*, const char*, ns3__desligueClienteNumeroClienteRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__desligueClienteNumeroClienteRequest(struct soap*, ns3__desligueClienteNumeroClienteRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__desligueClienteNumeroClienteRequest(struct soap*, ns3__desligueClienteNumeroClienteRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__desligueClienteCorreoRequest(struct soap*, ns3__desligueClienteCorreoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__desligueClienteCorreoRequest(struct soap*, const char *, int, ns3__desligueClienteCorreoRequest *const*, const char *);
SOAP_FMAC3 ns3__desligueClienteCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__desligueClienteCorreoRequest(struct soap*, const char*, ns3__desligueClienteCorreoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__desligueClienteCorreoRequest(struct soap*, ns3__desligueClienteCorreoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__desligueClienteCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__desligueClienteCorreoRequest(struct soap*, ns3__desligueClienteCorreoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__validarFrecuenciaRequest_DEFINED
#define SOAP_TYPE_PointerTons3__validarFrecuenciaRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validarFrecuenciaRequest(struct soap*, ns3__validarFrecuenciaRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validarFrecuenciaRequest(struct soap*, const char *, int, ns3__validarFrecuenciaRequest *const*, const char *);
SOAP_FMAC3 ns3__validarFrecuenciaRequest ** SOAP_FMAC4 soap_in_PointerTons3__validarFrecuenciaRequest(struct soap*, const char*, ns3__validarFrecuenciaRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validarFrecuenciaRequest(struct soap*, ns3__validarFrecuenciaRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__validarFrecuenciaRequest ** SOAP_FMAC4 soap_get_PointerTons3__validarFrecuenciaRequest(struct soap*, ns3__validarFrecuenciaRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__validaCandidatoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__validaCandidatoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validaCandidatoRequest(struct soap*, ns3__validaCandidatoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validaCandidatoRequest(struct soap*, const char *, int, ns3__validaCandidatoRequest *const*, const char *);
SOAP_FMAC3 ns3__validaCandidatoRequest ** SOAP_FMAC4 soap_in_PointerTons3__validaCandidatoRequest(struct soap*, const char*, ns3__validaCandidatoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validaCandidatoRequest(struct soap*, ns3__validaCandidatoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__validaCandidatoRequest ** SOAP_FMAC4 soap_get_PointerTons3__validaCandidatoRequest(struct soap*, ns3__validaCandidatoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__consultaCorreoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__consultaCorreoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultaCorreoRequest(struct soap*, ns3__consultaCorreoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultaCorreoRequest(struct soap*, const char *, int, ns3__consultaCorreoRequest *const*, const char *);
SOAP_FMAC3 ns3__consultaCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultaCorreoRequest(struct soap*, const char*, ns3__consultaCorreoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultaCorreoRequest(struct soap*, ns3__consultaCorreoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__consultaCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultaCorreoRequest(struct soap*, ns3__consultaCorreoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest_DEFINED
#define SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validaSintaxisCorreoRequest(struct soap*, ns3__validaSintaxisCorreoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validaSintaxisCorreoRequest(struct soap*, const char *, int, ns3__validaSintaxisCorreoRequest *const*, const char *);
SOAP_FMAC3 ns3__validaSintaxisCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__validaSintaxisCorreoRequest(struct soap*, const char*, ns3__validaSintaxisCorreoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validaSintaxisCorreoRequest(struct soap*, ns3__validaSintaxisCorreoRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__validaSintaxisCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__validaSintaxisCorreoRequest(struct soap*, ns3__validaSintaxisCorreoRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__entrada_DEFINED
#define SOAP_TYPE_PointerTons2__entrada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__entrada(struct soap*, ns2__entrada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__entrada(struct soap*, const char *, int, ns2__entrada *const*, const char *);
SOAP_FMAC3 ns2__entrada ** SOAP_FMAC4 soap_in_PointerTons2__entrada(struct soap*, const char*, ns2__entrada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__entrada(struct soap*, ns2__entrada *const*, const char*, const char*);
SOAP_FMAC3 ns2__entrada ** SOAP_FMAC4 soap_get_PointerTons2__entrada(struct soap*, ns2__entrada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ServiceException_DEFINED
#define SOAP_TYPE_PointerTons3__ServiceException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ServiceException(struct soap*, ns3__ServiceException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ServiceException(struct soap*, const char *, int, ns3__ServiceException *const*, const char *);
SOAP_FMAC3 ns3__ServiceException ** SOAP_FMAC4 soap_in_PointerTons3__ServiceException(struct soap*, const char*, ns3__ServiceException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ServiceException(struct soap*, ns3__ServiceException *const*, const char*, const char*);
SOAP_FMAC3 ns3__ServiceException ** SOAP_FMAC4 soap_get_PointerTons3__ServiceException(struct soap*, ns3__ServiceException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__dataInsertaMovimientos_DEFINED
#define SOAP_TYPE_PointerTons3__dataInsertaMovimientos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataInsertaMovimientos(struct soap*, ns3__dataInsertaMovimientos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataInsertaMovimientos(struct soap*, const char *, int, ns3__dataInsertaMovimientos *const*, const char *);
SOAP_FMAC3 ns3__dataInsertaMovimientos ** SOAP_FMAC4 soap_in_PointerTons3__dataInsertaMovimientos(struct soap*, const char*, ns3__dataInsertaMovimientos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataInsertaMovimientos(struct soap*, ns3__dataInsertaMovimientos *const*, const char*, const char*);
SOAP_FMAC3 ns3__dataInsertaMovimientos ** SOAP_FMAC4 soap_get_PointerTons3__dataInsertaMovimientos(struct soap*, ns3__dataInsertaMovimientos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__dataCierreEstadisticas_DEFINED
#define SOAP_TYPE_PointerTons3__dataCierreEstadisticas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataCierreEstadisticas(struct soap*, ns3__dataCierreEstadisticas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataCierreEstadisticas(struct soap*, const char *, int, ns3__dataCierreEstadisticas *const*, const char *);
SOAP_FMAC3 ns3__dataCierreEstadisticas ** SOAP_FMAC4 soap_in_PointerTons3__dataCierreEstadisticas(struct soap*, const char*, ns3__dataCierreEstadisticas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataCierreEstadisticas(struct soap*, ns3__dataCierreEstadisticas *const*, const char*, const char*);
SOAP_FMAC3 ns3__dataCierreEstadisticas ** SOAP_FMAC4 soap_get_PointerTons3__dataCierreEstadisticas(struct soap*, ns3__dataCierreEstadisticas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__Indicador_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__Indicador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__Indicador(struct soap*, ns3__Indicador **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__Indicador(struct soap*, const char *, int, ns3__Indicador **const*, const char *);
SOAP_FMAC3 ns3__Indicador *** SOAP_FMAC4 soap_in_PointerToPointerTons3__Indicador(struct soap*, const char*, ns3__Indicador ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__Indicador(struct soap*, ns3__Indicador **const*, const char*, const char*);
SOAP_FMAC3 ns3__Indicador *** SOAP_FMAC4 soap_get_PointerToPointerTons3__Indicador(struct soap*, ns3__Indicador ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__Indicador_DEFINED
#define SOAP_TYPE_PointerTons3__Indicador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Indicador(struct soap*, ns3__Indicador *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Indicador(struct soap*, const char *, int, ns3__Indicador *const*, const char *);
SOAP_FMAC3 ns3__Indicador ** SOAP_FMAC4 soap_in_PointerTons3__Indicador(struct soap*, const char*, ns3__Indicador **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Indicador(struct soap*, ns3__Indicador *const*, const char*, const char*);
SOAP_FMAC3 ns3__Indicador ** SOAP_FMAC4 soap_get_PointerTons3__Indicador(struct soap*, ns3__Indicador **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente_DEFINED
#define SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataConsultaPorNumeroCliente(struct soap*, ns3__dataConsultaPorNumeroCliente *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataConsultaPorNumeroCliente(struct soap*, const char *, int, ns3__dataConsultaPorNumeroCliente *const*, const char *);
SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente ** SOAP_FMAC4 soap_in_PointerTons3__dataConsultaPorNumeroCliente(struct soap*, const char*, ns3__dataConsultaPorNumeroCliente **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataConsultaPorNumeroCliente(struct soap*, ns3__dataConsultaPorNumeroCliente *const*, const char*, const char*);
SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente ** SOAP_FMAC4 soap_get_PointerTons3__dataConsultaPorNumeroCliente(struct soap*, ns3__dataConsultaPorNumeroCliente **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__retornoBloqueEstadistica_DEFINED
#define SOAP_TYPE_PointerTons3__retornoBloqueEstadistica_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__retornoBloqueEstadistica(struct soap*, ns3__retornoBloqueEstadistica *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__retornoBloqueEstadistica(struct soap*, const char *, int, ns3__retornoBloqueEstadistica *const*, const char *);
SOAP_FMAC3 ns3__retornoBloqueEstadistica ** SOAP_FMAC4 soap_in_PointerTons3__retornoBloqueEstadistica(struct soap*, const char*, ns3__retornoBloqueEstadistica **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__retornoBloqueEstadistica(struct soap*, ns3__retornoBloqueEstadistica *const*, const char*, const char*);
SOAP_FMAC3 ns3__retornoBloqueEstadistica ** SOAP_FMAC4 soap_get_PointerTons3__retornoBloqueEstadistica(struct soap*, ns3__retornoBloqueEstadistica **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__estadistica_DEFINED
#define SOAP_TYPE_PointerTons3__estadistica_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__estadistica(struct soap*, ns3__estadistica *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__estadistica(struct soap*, const char *, int, ns3__estadistica *const*, const char *);
SOAP_FMAC3 ns3__estadistica ** SOAP_FMAC4 soap_in_PointerTons3__estadistica(struct soap*, const char*, ns3__estadistica **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__estadistica(struct soap*, ns3__estadistica *const*, const char*, const char*);
SOAP_FMAC3 ns3__estadistica ** SOAP_FMAC4 soap_get_PointerTons3__estadistica(struct soap*, ns3__estadistica **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, const char *, int, ns3__respuestaRegistroCorreoBancoppel **const*, const char *);
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel *** SOAP_FMAC4 soap_in_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, const char*, ns3__respuestaRegistroCorreoBancoppel ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel **const*, const char*, const char*);
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel *** SOAP_FMAC4 soap_get_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel_DEFINED
#define SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, const char *, int, ns3__respuestaRegistroCorreoBancoppel *const*, const char *);
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel ** SOAP_FMAC4 soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, const char*, ns3__respuestaRegistroCorreoBancoppel **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel *const*, const char*, const char*);
SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel ** SOAP_FMAC4 soap_get_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap*, ns3__respuestaRegistroCorreoBancoppel **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__respuestaRegistroCorreo_DEFINED
#define SOAP_TYPE_PointerTons3__respuestaRegistroCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaRegistroCorreo(struct soap*, ns3__respuestaRegistroCorreo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaRegistroCorreo(struct soap*, const char *, int, ns3__respuestaRegistroCorreo *const*, const char *);
SOAP_FMAC3 ns3__respuestaRegistroCorreo ** SOAP_FMAC4 soap_in_PointerTons3__respuestaRegistroCorreo(struct soap*, const char*, ns3__respuestaRegistroCorreo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaRegistroCorreo(struct soap*, ns3__respuestaRegistroCorreo *const*, const char*, const char*);
SOAP_FMAC3 ns3__respuestaRegistroCorreo ** SOAP_FMAC4 soap_get_PointerTons3__respuestaRegistroCorreo(struct soap*, ns3__respuestaRegistroCorreo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__respuestaDesligueCorreo_DEFINED
#define SOAP_TYPE_PointerTons3__respuestaDesligueCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaDesligueCorreo(struct soap*, ns3__respuestaDesligueCorreo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaDesligueCorreo(struct soap*, const char *, int, ns3__respuestaDesligueCorreo *const*, const char *);
SOAP_FMAC3 ns3__respuestaDesligueCorreo ** SOAP_FMAC4 soap_in_PointerTons3__respuestaDesligueCorreo(struct soap*, const char*, ns3__respuestaDesligueCorreo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaDesligueCorreo(struct soap*, ns3__respuestaDesligueCorreo *const*, const char*, const char*);
SOAP_FMAC3 ns3__respuestaDesligueCorreo ** SOAP_FMAC4 soap_get_PointerTons3__respuestaDesligueCorreo(struct soap*, ns3__respuestaDesligueCorreo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__resultadoFrecuencia_DEFINED
#define SOAP_TYPE_PointerTons3__resultadoFrecuencia_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__resultadoFrecuencia(struct soap*, ns3__resultadoFrecuencia *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__resultadoFrecuencia(struct soap*, const char *, int, ns3__resultadoFrecuencia *const*, const char *);
SOAP_FMAC3 ns3__resultadoFrecuencia ** SOAP_FMAC4 soap_in_PointerTons3__resultadoFrecuencia(struct soap*, const char*, ns3__resultadoFrecuencia **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__resultadoFrecuencia(struct soap*, ns3__resultadoFrecuencia *const*, const char*, const char*);
SOAP_FMAC3 ns3__resultadoFrecuencia ** SOAP_FMAC4 soap_get_PointerTons3__resultadoFrecuencia(struct soap*, ns3__resultadoFrecuencia **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToshort_DEFINED
#define SOAP_TYPE_PointerToshort_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToshort(struct soap*, short *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToshort(struct soap*, const char *, int, short *const*, const char *);
SOAP_FMAC3 short ** SOAP_FMAC4 soap_in_PointerToshort(struct soap*, const char*, short **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToshort(struct soap*, short *const*, const char*, const char*);
SOAP_FMAC3 short ** SOAP_FMAC4 soap_get_PointerToshort(struct soap*, short **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__resultadoCandidato_DEFINED
#define SOAP_TYPE_PointerTons3__resultadoCandidato_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__resultadoCandidato(struct soap*, ns3__resultadoCandidato *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__resultadoCandidato(struct soap*, const char *, int, ns3__resultadoCandidato *const*, const char *);
SOAP_FMAC3 ns3__resultadoCandidato ** SOAP_FMAC4 soap_in_PointerTons3__resultadoCandidato(struct soap*, const char*, ns3__resultadoCandidato **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__resultadoCandidato(struct soap*, ns3__resultadoCandidato *const*, const char*, const char*);
SOAP_FMAC3 ns3__resultadoCandidato ** SOAP_FMAC4 soap_get_PointerTons3__resultadoCandidato(struct soap*, ns3__resultadoCandidato **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__messageEntity_DEFINED
#define SOAP_TYPE_PointerTons3__messageEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__messageEntity(struct soap*, ns3__messageEntity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__messageEntity(struct soap*, const char *, int, ns3__messageEntity *const*, const char *);
SOAP_FMAC3 ns3__messageEntity ** SOAP_FMAC4 soap_in_PointerTons3__messageEntity(struct soap*, const char*, ns3__messageEntity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__messageEntity(struct soap*, ns3__messageEntity *const*, const char*, const char*);
SOAP_FMAC3 ns3__messageEntity ** SOAP_FMAC4 soap_get_PointerTons3__messageEntity(struct soap*, ns3__messageEntity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__dataConsultaCorreo_DEFINED
#define SOAP_TYPE_PointerTons3__dataConsultaCorreo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataConsultaCorreo(struct soap*, ns3__dataConsultaCorreo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataConsultaCorreo(struct soap*, const char *, int, ns3__dataConsultaCorreo *const*, const char *);
SOAP_FMAC3 ns3__dataConsultaCorreo ** SOAP_FMAC4 soap_in_PointerTons3__dataConsultaCorreo(struct soap*, const char*, ns3__dataConsultaCorreo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataConsultaCorreo(struct soap*, ns3__dataConsultaCorreo *const*, const char*, const char*);
SOAP_FMAC3 ns3__dataConsultaCorreo ** SOAP_FMAC4 soap_get_PointerTons3__dataConsultaCorreo(struct soap*, ns3__dataConsultaCorreo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__validacionesEmail_DEFINED
#define SOAP_TYPE_PointerTons3__validacionesEmail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validacionesEmail(struct soap*, ns3__validacionesEmail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validacionesEmail(struct soap*, const char *, int, ns3__validacionesEmail *const*, const char *);
SOAP_FMAC3 ns3__validacionesEmail ** SOAP_FMAC4 soap_in_PointerTons3__validacionesEmail(struct soap*, const char*, ns3__validacionesEmail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validacionesEmail(struct soap*, ns3__validacionesEmail *const*, const char*, const char*);
SOAP_FMAC3 ns3__validacionesEmail ** SOAP_FMAC4 soap_get_PointerTons3__validacionesEmail(struct soap*, ns3__validacionesEmail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
