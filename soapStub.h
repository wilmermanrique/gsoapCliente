/* soapStub.h
   Generated by gSOAP 2.8.55 for ah.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/aos.xsd"
#define SOAP_NAMESPACE_OF_ns2	"aos:autentificaHuella"
#define SOAP_NAMESPACE_OF_ns3	"http://coppel.com/ecommerce/ValidacionDeCorreosArg"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20855
# error "GSOAP VERSION 20855 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* ah.h:314 */
#ifndef SOAP_TYPE_ns3__messageCode
#define SOAP_TYPE_ns3__messageCode (51)
/* ns3:messageCode */
enum ns3__messageCode {
	ns3__messageCode__SUCCESS = 0,
	ns3__messageCode__FAILED = 1,
	ns3__messageCode__ERROR = 2
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns2__entrada;	/* ah.h:147 */
class ns3__validaSintaxisCorreoRequest;	/* ah.h:150 */
class ns3__validaSintaxisCorreoResponse;	/* ah.h:153 */
class ns3__validacionesEmail;	/* ah.h:156 */
class ns3__consultaCorreoRequest;	/* ah.h:159 */
class ns3__consultaCorreoResponse;	/* ah.h:162 */
class ns3__dataConsultaCorreo;	/* ah.h:165 */
class ns3__validaCandidatoRequest;	/* ah.h:168 */
class ns3__validaCandidatoResponse;	/* ah.h:171 */
class ns3__resultadoCandidato;	/* ah.h:174 */
class ns3__validarFrecuenciaRequest;	/* ah.h:177 */
class ns3__validarFrecuenciaResponse;	/* ah.h:180 */
class ns3__resultadoFrecuencia;	/* ah.h:183 */
class ns3__desligueClienteCorreoRequest;	/* ah.h:186 */
class ns3__desliqueClienteCorreoResponse;	/* ah.h:189 */
class ns3__respuestaDesligueCorreo;	/* ah.h:192 */
class ns3__desligueClienteNumeroClienteRequest;	/* ah.h:195 */
class ns3__desliqueClienteNumeroClienteResponse;	/* ah.h:198 */
class ns3__registroCorreoRequest;	/* ah.h:201 */
class ns3__registroCorreoResponse;	/* ah.h:204 */
class ns3__respuestaRegistroCorreo;	/* ah.h:207 */
class ns3__registroCorreoBancoppelRequest;	/* ah.h:210 */
class ns3__registroCorreoBancoppelResponse;	/* ah.h:213 */
class ns3__respuestaRegistroCorreoBancoppel;	/* ah.h:216 */
class ns3__bloqueEstadisticaRequest;	/* ah.h:219 */
class ns3__estadistica;	/* ah.h:222 */
class ns3__bloqueEstadisticaResponse;	/* ah.h:225 */
class ns3__retornoBloqueEstadistica;	/* ah.h:228 */
class ns3__consultaCorreoPorNumeroClienteRequest;	/* ah.h:231 */
class ns3__consultaCorreoPorNumeroClienteResponse;	/* ah.h:234 */
class ns3__dataConsultaPorNumeroCliente;	/* ah.h:237 */
class ns3__consultarIndicadoresPorCorreoRequest;	/* ah.h:240 */
class ns3__consultarIndicadoresPorCorreoResponse;	/* ah.h:243 */
class ns3__consultarIndicadoresPorNumeroClienteRequest;	/* ah.h:246 */
class ns3__consultarIndicadoresPorNumeroClienteResponse;	/* ah.h:249 */
class ns3__Indicador;	/* ah.h:252 */
class ns3__cierreEstadisticasRequest;	/* ah.h:255 */
class ns3__cierreEstadisticasResponse;	/* ah.h:258 */
class ns3__dataCierreEstadisticas;	/* ah.h:261 */
class ns3__insertaMovimientosRequest;	/* ah.h:264 */
class ns3__insertaMovimientosResponse;	/* ah.h:267 */
class ns3__dataInsertaMovimientos;	/* ah.h:270 */
class ns3__messageEntity;	/* ah.h:273 */
class ns3__ServiceException;	/* ah.h:276 */
struct ns2__ConsultaClienteResponse;	/* ah.h:1849 */
struct ns2__ConsultaCliente;	/* ah.h:1849 */
struct ns2__ConsultaEmpleadoResponse;	/* ah.h:1920 */
struct ns2__ConsultaEmpleado;	/* ah.h:1920 */
struct ns2__ClienteResponse;	/* ah.h:1931 */
struct ns2__Cliente;	/* ah.h:1999 */
struct ns2__EmpleadoResponse;	/* ah.h:2010 */
struct ns2__Empleado;	/* ah.h:2078 */
struct __ns3__validaSintaxisCorreo;	/* ah.h:2169 */
struct __ns3__consultaCorreo;	/* ah.h:2242 */
struct __ns3__validaCandidato;	/* ah.h:2315 */
struct __ns3__validarFrecuencia;	/* ah.h:2388 */
struct __ns3__desligueClienteCorreo;	/* ah.h:2461 */
struct __ns3__desligueClienteNumeroCliente;	/* ah.h:2534 */
struct __ns3__registroCorreo;	/* ah.h:2607 */
struct __ns3__registroCorreoBancoppel;	/* ah.h:2680 */
struct __ns3__bloqueEstadistica;	/* ah.h:2753 */
struct __ns3__consultaCorreoPorNumeroCliente;	/* ah.h:2826 */
struct __ns3__consultarIndicadoresPorCorreo;	/* ah.h:2899 */
struct __ns3__consultarIndicadoresPorNumeroCliente;	/* ah.h:2972 */
struct __ns3__cierreEstaditica;	/* ah.h:3045 */
struct __ns3__insertaMovimientos;	/* ah.h:3118 */

/* ah.h:147 */
#ifndef SOAP_TYPE_ns2__entrada
#define SOAP_TYPE_ns2__entrada (7)
/* complex XSD type 'ns2:entrada': */
class SOAP_CMAC ns2__entrada {
      public:
        /// Required element 'idu-num' of XSD type 'xsd:string'
        char *idu_num;
        /// Required element 'des-Template64' of XSD type 'xsd:string'
        char *des_Template64;
        /// Required element 'num-nivel' of XSD type 'xsd:string'
        char *num_nivel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__entrada
        virtual long soap_type(void) const { return SOAP_TYPE_ns2__entrada; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__entrada, default initialized and not managed by a soap context
        virtual ns2__entrada *soap_alloc(void) const { return SOAP_NEW(ns2__entrada); }
      public:
        /// Constructor with initializations
        ns2__entrada() : idu_num(), des_Template64(), num_nivel(), soap() { }
        virtual ~ns2__entrada() { }
        /// Friend allocator used by soap_new_ns2__entrada(struct soap*, int)
        friend SOAP_FMAC1 ns2__entrada * SOAP_FMAC2 soap_instantiate_ns2__entrada(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:150 */
#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoRequest
#define SOAP_TYPE_ns3__validaSintaxisCorreoRequest (8)
/* complex XSD type 'ns3:validaSintaxisCorreoRequest': */
class SOAP_CMAC ns3__validaSintaxisCorreoRequest {
      public:
        /// Optional element 'email' of XSD type 'xsd:string'
        char *email;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validaSintaxisCorreoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validaSintaxisCorreoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validaSintaxisCorreoRequest, default initialized and not managed by a soap context
        virtual ns3__validaSintaxisCorreoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__validaSintaxisCorreoRequest); }
      public:
        /// Constructor with initializations
        ns3__validaSintaxisCorreoRequest() : email(), soap() { }
        virtual ~ns3__validaSintaxisCorreoRequest() { }
        /// Friend allocator used by soap_new_ns3__validaSintaxisCorreoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__validaSintaxisCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:153 */
#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoResponse
#define SOAP_TYPE_ns3__validaSintaxisCorreoResponse (9)
/* complex XSD type 'ns3:validaSintaxisCorreoResponse': */
class SOAP_CMAC ns3__validaSintaxisCorreoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'validacionesEmail' of XSD type 'ns3:validacionesEmail'
        ns3__validacionesEmail *validacionesEmail;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validaSintaxisCorreoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validaSintaxisCorreoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validaSintaxisCorreoResponse, default initialized and not managed by a soap context
        virtual ns3__validaSintaxisCorreoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__validaSintaxisCorreoResponse); }
      public:
        /// Constructor with initializations
        ns3__validaSintaxisCorreoResponse() : code(), message(), validacionesEmail(), soap() { }
        virtual ~ns3__validaSintaxisCorreoResponse() { }
        /// Friend allocator used by soap_new_ns3__validaSintaxisCorreoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__validaSintaxisCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:156 */
#ifndef SOAP_TYPE_ns3__validacionesEmail
#define SOAP_TYPE_ns3__validacionesEmail (10)
/* complex XSD type 'ns3:validacionesEmail': */
class SOAP_CMAC ns3__validacionesEmail {
      public:
        /// Optional element 'dominiosExceptuados' of XSD type 'xsd:boolean'
        bool *dominiosExceptuados;
        /// Optional element 'reglasDominiosCorrectos' of XSD type 'xsd:boolean'
        bool *reglasDominiosCorrectos;
        /// Optional element 'reglasUsuarioPorDominio' of XSD type 'xsd:boolean'
        bool *reglasUsuarioPorDominio;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validacionesEmail
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validacionesEmail; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validacionesEmail, default initialized and not managed by a soap context
        virtual ns3__validacionesEmail *soap_alloc(void) const { return SOAP_NEW(ns3__validacionesEmail); }
      public:
        /// Constructor with initializations
        ns3__validacionesEmail() : dominiosExceptuados(), reglasDominiosCorrectos(), reglasUsuarioPorDominio(), soap() { }
        virtual ~ns3__validacionesEmail() { }
        /// Friend allocator used by soap_new_ns3__validacionesEmail(struct soap*, int)
        friend SOAP_FMAC1 ns3__validacionesEmail * SOAP_FMAC2 soap_instantiate_ns3__validacionesEmail(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:159 */
#ifndef SOAP_TYPE_ns3__consultaCorreoRequest
#define SOAP_TYPE_ns3__consultaCorreoRequest (11)
/* complex XSD type 'ns3:consultaCorreoRequest': */
class SOAP_CMAC ns3__consultaCorreoRequest {
      public:
        /// Optional element 'email' of XSD type 'xsd:string'
        char *email;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultaCorreoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultaCorreoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultaCorreoRequest, default initialized and not managed by a soap context
        virtual ns3__consultaCorreoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__consultaCorreoRequest); }
      public:
        /// Constructor with initializations
        ns3__consultaCorreoRequest() : email(), soap() { }
        virtual ~ns3__consultaCorreoRequest() { }
        /// Friend allocator used by soap_new_ns3__consultaCorreoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultaCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:162 */
#ifndef SOAP_TYPE_ns3__consultaCorreoResponse
#define SOAP_TYPE_ns3__consultaCorreoResponse (12)
/* complex XSD type 'ns3:consultaCorreoResponse': */
class SOAP_CMAC ns3__consultaCorreoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'dataConsultaCorreo' of XSD type 'ns3:dataConsultaCorreo'
        ns3__dataConsultaCorreo *dataConsultaCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultaCorreoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultaCorreoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultaCorreoResponse, default initialized and not managed by a soap context
        virtual ns3__consultaCorreoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__consultaCorreoResponse); }
      public:
        /// Constructor with initializations
        ns3__consultaCorreoResponse() : code(), message(), dataConsultaCorreo(), soap() { }
        virtual ~ns3__consultaCorreoResponse() { }
        /// Friend allocator used by soap_new_ns3__consultaCorreoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultaCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:165 */
#ifndef SOAP_TYPE_ns3__dataConsultaCorreo
#define SOAP_TYPE_ns3__dataConsultaCorreo (13)
/* complex XSD type 'ns3:dataConsultaCorreo': */
class SOAP_CMAC ns3__dataConsultaCorreo {
      public:
        /// Optional element 'respuesta' of XSD type 'xsd:int'
        int *respuesta;
        /// Optional element 'numcliente' of XSD type 'xsd:string'
        char *numcliente;
        /// Optional element 'numadicional' of XSD type 'xsd:string'
        char *numadicional;
        /// Optional element 'iduRegistroCorreo' of XSD type 'xsd:string'
        char *iduRegistroCorreo;
        /// Optional element 'flagCuenta' of XSD type 'xsd:string'
        char *flagCuenta;
        /// Optional element 'flagEstatus' of XSD type 'xsd:string'
        char *flagEstatus;
        /// Optional element 'iduRegistroActivacion' of XSD type 'xsd:string'
        char *iduRegistroActivacion;
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__dataConsultaCorreo
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__dataConsultaCorreo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__dataConsultaCorreo, default initialized and not managed by a soap context
        virtual ns3__dataConsultaCorreo *soap_alloc(void) const { return SOAP_NEW(ns3__dataConsultaCorreo); }
      public:
        /// Constructor with initializations
        ns3__dataConsultaCorreo() : respuesta(), numcliente(), numadicional(), iduRegistroCorreo(), flagCuenta(), flagEstatus(), iduRegistroActivacion(), messageEntity(), soap() { }
        virtual ~ns3__dataConsultaCorreo() { }
        /// Friend allocator used by soap_new_ns3__dataConsultaCorreo(struct soap*, int)
        friend SOAP_FMAC1 ns3__dataConsultaCorreo * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:168 */
#ifndef SOAP_TYPE_ns3__validaCandidatoRequest
#define SOAP_TYPE_ns3__validaCandidatoRequest (14)
/* complex XSD type 'ns3:validaCandidatoRequest': */
class SOAP_CMAC ns3__validaCandidatoRequest {
      public:
        /// Optional element 'empleado' of XSD type 'xsd:string'
        char *empleado;
        /// Optional element 'numeroCliente' of XSD type 'xsd:string'
        char *numeroCliente;
        /// Optional element 'claveDivision' of XSD type 'xsd:string'
        char *claveDivision;
        /// Optional element 'claveRegion' of XSD type 'xsd:string'
        char *claveRegion;
        /// Optional element 'montoCompra' of XSD type 'xsd:string'
        char *montoCompra;
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'caja' of XSD type 'xsd:string'
        char *caja;
        /// Optional element 'numeroCentro' of XSD type 'xsd:string'
        char *numeroCentro;
        /// Optional element 'numeroZona' of XSD type 'xsd:string'
        char *numeroZona;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Optional element 'tipoCliente' of XSD type 'xsd:string'
        char *tipoCliente;
        /// Optional element 'area' of XSD type 'xsd:string'
        char *area;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validaCandidatoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validaCandidatoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validaCandidatoRequest, default initialized and not managed by a soap context
        virtual ns3__validaCandidatoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__validaCandidatoRequest); }
      public:
        /// Constructor with initializations
        ns3__validaCandidatoRequest() : empleado(), numeroCliente(), claveDivision(), claveRegion(), montoCompra(), adicional(), caja(), numeroCentro(), numeroZona(), origen(), subOrigen(), tipoCliente(), area(), soap() { }
        virtual ~ns3__validaCandidatoRequest() { }
        /// Friend allocator used by soap_new_ns3__validaCandidatoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__validaCandidatoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:171 */
#ifndef SOAP_TYPE_ns3__validaCandidatoResponse
#define SOAP_TYPE_ns3__validaCandidatoResponse (15)
/* complex XSD type 'ns3:validaCandidatoResponse': */
class SOAP_CMAC ns3__validaCandidatoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'resultadoCandidato' of XSD type 'ns3:resultadoCandidato'
        ns3__resultadoCandidato *resultadoCandidato;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validaCandidatoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validaCandidatoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validaCandidatoResponse, default initialized and not managed by a soap context
        virtual ns3__validaCandidatoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__validaCandidatoResponse); }
      public:
        /// Constructor with initializations
        ns3__validaCandidatoResponse() : code(), message(), resultadoCandidato(), soap() { }
        virtual ~ns3__validaCandidatoResponse() { }
        /// Friend allocator used by soap_new_ns3__validaCandidatoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__validaCandidatoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:174 */
#ifndef SOAP_TYPE_ns3__resultadoCandidato
#define SOAP_TYPE_ns3__resultadoCandidato (16)
/* complex XSD type 'ns3:resultadoCandidato': */
class SOAP_CMAC ns3__resultadoCandidato {
      public:
        /// Optional element 'descripcionMensaje' of XSD type 'xsd:string'
        char *descripcionMensaje;
        /// Optional element 'nombreCorreo' of XSD type 'xsd:string'
        char *nombreCorreo;
        /// Optional element 'numeroValidaCorreo' of XSD type 'xsd:int'
        int *numeroValidaCorreo;
        /// Optional element 'opcCandidato' of XSD type 'xsd:short'
        short *opcCandidato;
        /// Optional element 'opcFlagEnviaCorreoValidacion' of XSD type 'xsd:short'
        short *opcFlagEnviaCorreoValidacion;
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Optional element 'opcFlagImprimir' of XSD type 'xsd:short'
        short *opcFlagImprimir;
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__resultadoCandidato
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__resultadoCandidato; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__resultadoCandidato, default initialized and not managed by a soap context
        virtual ns3__resultadoCandidato *soap_alloc(void) const { return SOAP_NEW(ns3__resultadoCandidato); }
      public:
        /// Constructor with initializations
        ns3__resultadoCandidato() : descripcionMensaje(), nombreCorreo(), numeroValidaCorreo(), opcCandidato(), opcFlagEnviaCorreoValidacion(), iduRegistroEstadistica(), opcFlagImprimir(), messageEntity(), soap() { }
        virtual ~ns3__resultadoCandidato() { }
        /// Friend allocator used by soap_new_ns3__resultadoCandidato(struct soap*, int)
        friend SOAP_FMAC1 ns3__resultadoCandidato * SOAP_FMAC2 soap_instantiate_ns3__resultadoCandidato(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:177 */
#ifndef SOAP_TYPE_ns3__validarFrecuenciaRequest
#define SOAP_TYPE_ns3__validarFrecuenciaRequest (17)
/* complex XSD type 'ns3:validarFrecuenciaRequest': */
class SOAP_CMAC ns3__validarFrecuenciaRequest {
      public:
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'numeroCliente' of XSD type 'xsd:string'
        char *numeroCliente;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Optional element 'tipoCliente' of XSD type 'xsd:string'
        char *tipoCliente;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validarFrecuenciaRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validarFrecuenciaRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validarFrecuenciaRequest, default initialized and not managed by a soap context
        virtual ns3__validarFrecuenciaRequest *soap_alloc(void) const { return SOAP_NEW(ns3__validarFrecuenciaRequest); }
      public:
        /// Constructor with initializations
        ns3__validarFrecuenciaRequest() : adicional(), numeroCliente(), origen(), subOrigen(), tipoCliente(), soap() { }
        virtual ~ns3__validarFrecuenciaRequest() { }
        /// Friend allocator used by soap_new_ns3__validarFrecuenciaRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__validarFrecuenciaRequest * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:180 */
#ifndef SOAP_TYPE_ns3__validarFrecuenciaResponse
#define SOAP_TYPE_ns3__validarFrecuenciaResponse (18)
/* complex XSD type 'ns3:validarFrecuenciaResponse': */
class SOAP_CMAC ns3__validarFrecuenciaResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'resultadoFrecuencia' of XSD type 'ns3:resultadoFrecuencia'
        ns3__resultadoFrecuencia *resultadoFrecuencia;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__validarFrecuenciaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__validarFrecuenciaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__validarFrecuenciaResponse, default initialized and not managed by a soap context
        virtual ns3__validarFrecuenciaResponse *soap_alloc(void) const { return SOAP_NEW(ns3__validarFrecuenciaResponse); }
      public:
        /// Constructor with initializations
        ns3__validarFrecuenciaResponse() : code(), message(), resultadoFrecuencia(), soap() { }
        virtual ~ns3__validarFrecuenciaResponse() { }
        /// Friend allocator used by soap_new_ns3__validarFrecuenciaResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__validarFrecuenciaResponse * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:183 */
#ifndef SOAP_TYPE_ns3__resultadoFrecuencia
#define SOAP_TYPE_ns3__resultadoFrecuencia (19)
/* complex XSD type 'ns3:resultadoFrecuencia': */
class SOAP_CMAC ns3__resultadoFrecuencia {
      public:
        /// Optional element 'descripcionMensaje' of XSD type 'xsd:string'
        char *descripcionMensaje;
        /// Optional element 'nombreCorreo' of XSD type 'xsd:string'
        char *nombreCorreo;
        /// Optional element 'numeroValidaCorreo' of XSD type 'xsd:int'
        int *numeroValidaCorreo;
        /// Optional element 'opcCandidato' of XSD type 'xsd:short'
        short *opcCandidato;
        /// Optional element 'opcFlagEnviaCorreoValidacion' of XSD type 'xsd:short'
        short *opcFlagEnviaCorreoValidacion;
        /// Optional element 'opcFlagImprimir' of XSD type 'xsd:short'
        short *opcFlagImprimir;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__resultadoFrecuencia
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__resultadoFrecuencia; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__resultadoFrecuencia, default initialized and not managed by a soap context
        virtual ns3__resultadoFrecuencia *soap_alloc(void) const { return SOAP_NEW(ns3__resultadoFrecuencia); }
      public:
        /// Constructor with initializations
        ns3__resultadoFrecuencia() : descripcionMensaje(), nombreCorreo(), numeroValidaCorreo(), opcCandidato(), opcFlagEnviaCorreoValidacion(), opcFlagImprimir(), soap() { }
        virtual ~ns3__resultadoFrecuencia() { }
        /// Friend allocator used by soap_new_ns3__resultadoFrecuencia(struct soap*, int)
        friend SOAP_FMAC1 ns3__resultadoFrecuencia * SOAP_FMAC2 soap_instantiate_ns3__resultadoFrecuencia(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:186 */
#ifndef SOAP_TYPE_ns3__desligueClienteCorreoRequest
#define SOAP_TYPE_ns3__desligueClienteCorreoRequest (20)
/* complex XSD type 'ns3:desligueClienteCorreoRequest': */
class SOAP_CMAC ns3__desligueClienteCorreoRequest {
      public:
        /// Optional element 'correo' of XSD type 'xsd:string'
        char *correo;
        /// Optional element 'iduRespuesta' of XSD type 'xsd:string'
        char *iduRespuesta;
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__desligueClienteCorreoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__desligueClienteCorreoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__desligueClienteCorreoRequest, default initialized and not managed by a soap context
        virtual ns3__desligueClienteCorreoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__desligueClienteCorreoRequest); }
      public:
        /// Constructor with initializations
        ns3__desligueClienteCorreoRequest() : correo(), iduRespuesta(), iduRegistroEstadistica(), soap() { }
        virtual ~ns3__desligueClienteCorreoRequest() { }
        /// Friend allocator used by soap_new_ns3__desligueClienteCorreoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__desligueClienteCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteCorreoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:189 */
#ifndef SOAP_TYPE_ns3__desliqueClienteCorreoResponse
#define SOAP_TYPE_ns3__desliqueClienteCorreoResponse (21)
/* complex XSD type 'ns3:desliqueClienteCorreoResponse': */
class SOAP_CMAC ns3__desliqueClienteCorreoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'respuestaDesligueCorreo' of XSD type 'ns3:respuestaDesligueCorreo'
        ns3__respuestaDesligueCorreo *respuestaDesligueCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__desliqueClienteCorreoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__desliqueClienteCorreoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__desliqueClienteCorreoResponse, default initialized and not managed by a soap context
        virtual ns3__desliqueClienteCorreoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__desliqueClienteCorreoResponse); }
      public:
        /// Constructor with initializations
        ns3__desliqueClienteCorreoResponse() : code(), message(), respuestaDesligueCorreo(), soap() { }
        virtual ~ns3__desliqueClienteCorreoResponse() { }
        /// Friend allocator used by soap_new_ns3__desliqueClienteCorreoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__desliqueClienteCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteCorreoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:192 */
#ifndef SOAP_TYPE_ns3__respuestaDesligueCorreo
#define SOAP_TYPE_ns3__respuestaDesligueCorreo (22)
/* complex XSD type 'ns3:respuestaDesligueCorreo': */
class SOAP_CMAC ns3__respuestaDesligueCorreo {
      public:
        /// Optional element 'respuesta' of XSD type 'xsd:int'
        int *respuesta;
        /// Optional element 'mensaje' of XSD type 'xsd:string'
        char *mensaje;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__respuestaDesligueCorreo
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__respuestaDesligueCorreo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__respuestaDesligueCorreo, default initialized and not managed by a soap context
        virtual ns3__respuestaDesligueCorreo *soap_alloc(void) const { return SOAP_NEW(ns3__respuestaDesligueCorreo); }
      public:
        /// Constructor with initializations
        ns3__respuestaDesligueCorreo() : respuesta(), mensaje(), soap() { }
        virtual ~ns3__respuestaDesligueCorreo() { }
        /// Friend allocator used by soap_new_ns3__respuestaDesligueCorreo(struct soap*, int)
        friend SOAP_FMAC1 ns3__respuestaDesligueCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaDesligueCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:195 */
#ifndef SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest
#define SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest (23)
/* complex XSD type 'ns3:desligueClienteNumeroClienteRequest': */
class SOAP_CMAC ns3__desligueClienteNumeroClienteRequest {
      public:
        /// Optional element 'numeroCliente' of XSD type 'xsd:string'
        char *numeroCliente;
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'iduRespuesta' of XSD type 'xsd:string'
        char *iduRespuesta;
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__desligueClienteNumeroClienteRequest, default initialized and not managed by a soap context
        virtual ns3__desligueClienteNumeroClienteRequest *soap_alloc(void) const { return SOAP_NEW(ns3__desligueClienteNumeroClienteRequest); }
      public:
        /// Constructor with initializations
        ns3__desligueClienteNumeroClienteRequest() : numeroCliente(), adicional(), iduRespuesta(), iduRegistroEstadistica(), soap() { }
        virtual ~ns3__desligueClienteNumeroClienteRequest() { }
        /// Friend allocator used by soap_new_ns3__desligueClienteNumeroClienteRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:198 */
#ifndef SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse
#define SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse (24)
/* complex XSD type 'ns3:desliqueClienteNumeroClienteResponse': */
class SOAP_CMAC ns3__desliqueClienteNumeroClienteResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'respuestaDesligueCorreo' of XSD type 'ns3:respuestaDesligueCorreo'
        ns3__respuestaDesligueCorreo *respuestaDesligueCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__desliqueClienteNumeroClienteResponse, default initialized and not managed by a soap context
        virtual ns3__desliqueClienteNumeroClienteResponse *soap_alloc(void) const { return SOAP_NEW(ns3__desliqueClienteNumeroClienteResponse); }
      public:
        /// Constructor with initializations
        ns3__desliqueClienteNumeroClienteResponse() : code(), message(), respuestaDesligueCorreo(), soap() { }
        virtual ~ns3__desliqueClienteNumeroClienteResponse() { }
        /// Friend allocator used by soap_new_ns3__desliqueClienteNumeroClienteResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:201 */
#ifndef SOAP_TYPE_ns3__registroCorreoRequest
#define SOAP_TYPE_ns3__registroCorreoRequest (25)
/* complex XSD type 'ns3:registroCorreoRequest': */
class SOAP_CMAC ns3__registroCorreoRequest {
      public:
        /// Optional element 'empleado' of XSD type 'xsd:string'
        char *empleado;
        /// Optional element 'numeroCliente' of XSD type 'xsd:string'
        char *numeroCliente;
        /// Optional element 'claveDivision' of XSD type 'xsd:string'
        char *claveDivision;
        /// Optional element 'claveRegion' of XSD type 'xsd:string'
        char *claveRegion;
        /// Optional element 'email' of XSD type 'xsd:string'
        char *email;
        /// Optional element 'puntualidad' of XSD type 'xsd:string'
        char *puntualidad;
        /// Optional element 'genero' of XSD type 'xsd:string'
        char *genero;
        /// Optional element 'numeroSolicitante' of XSD type 'xsd:string'
        char *numeroSolicitante;
        /// Optional element 'flagHuellaValor' of XSD type 'xsd:string'
        char *flagHuellaValor;
        /// Optional element 'numeroTiendaOrigen' of XSD type 'xsd:string'
        char *numeroTiendaOrigen;
        /// Optional element 'montoCompra' of XSD type 'xsd:string'
        char *montoCompra;
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'caja' of XSD type 'xsd:string'
        char *caja;
        /// Optional element 'numeroCentro' of XSD type 'xsd:string'
        char *numeroCentro;
        /// Optional element 'numeroZona' of XSD type 'xsd:string'
        char *numeroZona;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Optional element 'tipoCliente' of XSD type 'xsd:string'
        char *tipoCliente;
        /// Optional element 'area' of XSD type 'xsd:string'
        char *area;
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__registroCorreoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__registroCorreoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__registroCorreoRequest, default initialized and not managed by a soap context
        virtual ns3__registroCorreoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__registroCorreoRequest); }
      public:
        /// Constructor with initializations
        ns3__registroCorreoRequest() : empleado(), numeroCliente(), claveDivision(), claveRegion(), email(), puntualidad(), genero(), numeroSolicitante(), flagHuellaValor(), numeroTiendaOrigen(), montoCompra(), adicional(), caja(), numeroCentro(), numeroZona(), origen(), subOrigen(), tipoCliente(), area(), iduRegistroEstadistica(), soap() { }
        virtual ~ns3__registroCorreoRequest() { }
        /// Friend allocator used by soap_new_ns3__registroCorreoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__registroCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:204 */
#ifndef SOAP_TYPE_ns3__registroCorreoResponse
#define SOAP_TYPE_ns3__registroCorreoResponse (26)
/* complex XSD type 'ns3:registroCorreoResponse': */
class SOAP_CMAC ns3__registroCorreoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'respuestaRegistroCorreo' of XSD type 'ns3:respuestaRegistroCorreo'
        ns3__respuestaRegistroCorreo *respuestaRegistroCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__registroCorreoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__registroCorreoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__registroCorreoResponse, default initialized and not managed by a soap context
        virtual ns3__registroCorreoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__registroCorreoResponse); }
      public:
        /// Constructor with initializations
        ns3__registroCorreoResponse() : code(), message(), respuestaRegistroCorreo(), soap() { }
        virtual ~ns3__registroCorreoResponse() { }
        /// Friend allocator used by soap_new_ns3__registroCorreoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__registroCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:207 */
#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreo
#define SOAP_TYPE_ns3__respuestaRegistroCorreo (27)
/* complex XSD type 'ns3:respuestaRegistroCorreo': */
class SOAP_CMAC ns3__respuestaRegistroCorreo {
      public:
        /// Optional element 'respuesta' of XSD type 'xsd:int'
        int *respuesta;
        /// Optional element 'mensaje' of XSD type 'xsd:string'
        char *mensaje;
        /// Optional element 'tipoRegistro' of XSD type 'xsd:int'
        int *tipoRegistro;
        /// Optional element 'trigger' of XSD type 'xsd:string'
        char *trigger;
        /// Optional element 'iduRegistroCorreo' of XSD type 'xsd:int'
        int *iduRegistroCorreo;
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Optional element 'flagImprimir' of XSD type 'xsd:string'
        char *flagImprimir;
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__respuestaRegistroCorreo
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__respuestaRegistroCorreo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__respuestaRegistroCorreo, default initialized and not managed by a soap context
        virtual ns3__respuestaRegistroCorreo *soap_alloc(void) const { return SOAP_NEW(ns3__respuestaRegistroCorreo); }
      public:
        /// Constructor with initializations
        ns3__respuestaRegistroCorreo() : respuesta(), mensaje(), tipoRegistro(), trigger(), iduRegistroCorreo(), iduRegistroEstadistica(), flagImprimir(), messageEntity(), soap() { }
        virtual ~ns3__respuestaRegistroCorreo() { }
        /// Friend allocator used by soap_new_ns3__respuestaRegistroCorreo(struct soap*, int)
        friend SOAP_FMAC1 ns3__respuestaRegistroCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:210 */
#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelRequest
#define SOAP_TYPE_ns3__registroCorreoBancoppelRequest (28)
/* complex XSD type 'ns3:registroCorreoBancoppelRequest': */
class SOAP_CMAC ns3__registroCorreoBancoppelRequest {
      public:
        /// Optional element 'parametros' of XSD type 'xsd:string'
        char *parametros;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__registroCorreoBancoppelRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__registroCorreoBancoppelRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__registroCorreoBancoppelRequest, default initialized and not managed by a soap context
        virtual ns3__registroCorreoBancoppelRequest *soap_alloc(void) const { return SOAP_NEW(ns3__registroCorreoBancoppelRequest); }
      public:
        /// Constructor with initializations
        ns3__registroCorreoBancoppelRequest() : parametros(), soap() { }
        virtual ~ns3__registroCorreoBancoppelRequest() { }
        /// Friend allocator used by soap_new_ns3__registroCorreoBancoppelRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__registroCorreoBancoppelRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:213 */
#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelResponse
#define SOAP_TYPE_ns3__registroCorreoBancoppelResponse (29)
/* complex XSD type 'ns3:registroCorreoBancoppelResponse': */
class SOAP_CMAC ns3__registroCorreoBancoppelResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Sequence of elements 'respuestaRegistroCorreoList' of XSD type 'ns3:respuestaRegistroCorreoBancoppel' stored in dynamic array respuestaRegistroCorreoList of length __sizerespuestaRegistroCorreoList
        int __sizerespuestaRegistroCorreoList;
        ns3__respuestaRegistroCorreoBancoppel **respuestaRegistroCorreoList;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__registroCorreoBancoppelResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__registroCorreoBancoppelResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__registroCorreoBancoppelResponse, default initialized and not managed by a soap context
        virtual ns3__registroCorreoBancoppelResponse *soap_alloc(void) const { return SOAP_NEW(ns3__registroCorreoBancoppelResponse); }
      public:
        /// Constructor with initializations
        ns3__registroCorreoBancoppelResponse() : code(), message(), __sizerespuestaRegistroCorreoList(), respuestaRegistroCorreoList(), soap() { }
        virtual ~ns3__registroCorreoBancoppelResponse() { }
        /// Friend allocator used by soap_new_ns3__registroCorreoBancoppelResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__registroCorreoBancoppelResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:216 */
#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel
#define SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel (30)
/* complex XSD type 'ns3:respuestaRegistroCorreoBancoppel': */
class SOAP_CMAC ns3__respuestaRegistroCorreoBancoppel {
      public:
        /// Optional element 'respuesta' of XSD type 'xsd:int'
        int *respuesta;
        /// Optional element 'mensaje' of XSD type 'xsd:string'
        char *mensaje;
        /// Optional element 'tipoRegistro' of XSD type 'xsd:int'
        int *tipoRegistro;
        /// Optional element 'clienteCoppel' of XSD type 'xsd:string'
        char *clienteCoppel;
        /// Optional element 'clienteBancoppel' of XSD type 'xsd:string'
        char *clienteBancoppel;
        /// Optional element 'correo' of XSD type 'xsd:string'
        char *correo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__respuestaRegistroCorreoBancoppel, default initialized and not managed by a soap context
        virtual ns3__respuestaRegistroCorreoBancoppel *soap_alloc(void) const { return SOAP_NEW(ns3__respuestaRegistroCorreoBancoppel); }
      public:
        /// Constructor with initializations
        ns3__respuestaRegistroCorreoBancoppel() : respuesta(), mensaje(), tipoRegistro(), clienteCoppel(), clienteBancoppel(), correo(), soap() { }
        virtual ~ns3__respuestaRegistroCorreoBancoppel() { }
        /// Friend allocator used by soap_new_ns3__respuestaRegistroCorreoBancoppel(struct soap*, int)
        friend SOAP_FMAC1 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:219 */
#ifndef SOAP_TYPE_ns3__bloqueEstadisticaRequest
#define SOAP_TYPE_ns3__bloqueEstadisticaRequest (31)
/* complex XSD type 'ns3:bloqueEstadisticaRequest': */
class SOAP_CMAC ns3__bloqueEstadisticaRequest {
      public:
        /// Optional element 'estadistica' of XSD type 'ns3:estadistica'
        ns3__estadistica *estadistica;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__bloqueEstadisticaRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__bloqueEstadisticaRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__bloqueEstadisticaRequest, default initialized and not managed by a soap context
        virtual ns3__bloqueEstadisticaRequest *soap_alloc(void) const { return SOAP_NEW(ns3__bloqueEstadisticaRequest); }
      public:
        /// Constructor with initializations
        ns3__bloqueEstadisticaRequest() : estadistica(), soap() { }
        virtual ~ns3__bloqueEstadisticaRequest() { }
        /// Friend allocator used by soap_new_ns3__bloqueEstadisticaRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__bloqueEstadisticaRequest * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:222 */
#ifndef SOAP_TYPE_ns3__estadistica
#define SOAP_TYPE_ns3__estadistica (32)
/* complex XSD type 'ns3:estadistica': */
class SOAP_CMAC ns3__estadistica {
      public:
        /// Optional element 'division' of XSD type 'xsd:string'
        char *division;
        /// Optional element 'email' of XSD type 'xsd:string'
        char *email;
        /// Optional element 'genero' of XSD type 'xsd:string'
        char *genero;
        /// Optional element 'region' of XSD type 'xsd:string'
        char *region;
        /// Optional element 'fechaOportunidad' of XSD type 'xsd:string'
        char *fechaOportunidad;
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'captura' of XSD type 'xsd:string'
        char *captura;
        /// Optional element 'centro' of XSD type 'xsd:string'
        char *centro;
        /// Optional element 'numCliente' of XSD type 'xsd:string'
        char *numCliente;
        /// Optional element 'numEmpleado' of XSD type 'xsd:string'
        char *numEmpleado;
        /// Optional element 'oportunidad' of XSD type 'xsd:string'
        char *oportunidad;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'sintaxis' of XSD type 'xsd:string'
        char *sintaxis;
        /// Optional element 'strikeIron' of XSD type 'xsd:string'
        char *strikeIron;
        /// Optional element 'tipoCliente' of XSD type 'xsd:string'
        char *tipoCliente;
        /// Optional element 'zona' of XSD type 'xsd:string'
        char *zona;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__estadistica
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__estadistica; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__estadistica, default initialized and not managed by a soap context
        virtual ns3__estadistica *soap_alloc(void) const { return SOAP_NEW(ns3__estadistica); }
      public:
        /// Constructor with initializations
        ns3__estadistica() : division(), email(), genero(), region(), fechaOportunidad(), adicional(), captura(), centro(), numCliente(), numEmpleado(), oportunidad(), origen(), sintaxis(), strikeIron(), tipoCliente(), zona(), soap() { }
        virtual ~ns3__estadistica() { }
        /// Friend allocator used by soap_new_ns3__estadistica(struct soap*, int)
        friend SOAP_FMAC1 ns3__estadistica * SOAP_FMAC2 soap_instantiate_ns3__estadistica(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:225 */
#ifndef SOAP_TYPE_ns3__bloqueEstadisticaResponse
#define SOAP_TYPE_ns3__bloqueEstadisticaResponse (33)
/* complex XSD type 'ns3:bloqueEstadisticaResponse': */
class SOAP_CMAC ns3__bloqueEstadisticaResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'retornoBloqueEstadistica' of XSD type 'ns3:retornoBloqueEstadistica'
        ns3__retornoBloqueEstadistica *retornoBloqueEstadistica;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__bloqueEstadisticaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__bloqueEstadisticaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__bloqueEstadisticaResponse, default initialized and not managed by a soap context
        virtual ns3__bloqueEstadisticaResponse *soap_alloc(void) const { return SOAP_NEW(ns3__bloqueEstadisticaResponse); }
      public:
        /// Constructor with initializations
        ns3__bloqueEstadisticaResponse() : code(), message(), retornoBloqueEstadistica(), soap() { }
        virtual ~ns3__bloqueEstadisticaResponse() { }
        /// Friend allocator used by soap_new_ns3__bloqueEstadisticaResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__bloqueEstadisticaResponse * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:228 */
#ifndef SOAP_TYPE_ns3__retornoBloqueEstadistica
#define SOAP_TYPE_ns3__retornoBloqueEstadistica (34)
/* complex XSD type 'ns3:retornoBloqueEstadistica': */
class SOAP_CMAC ns3__retornoBloqueEstadistica {
      public:
        /// Optional element 'datoRegresa' of XSD type 'xsd:int'
        int *datoRegresa;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__retornoBloqueEstadistica
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__retornoBloqueEstadistica; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__retornoBloqueEstadistica, default initialized and not managed by a soap context
        virtual ns3__retornoBloqueEstadistica *soap_alloc(void) const { return SOAP_NEW(ns3__retornoBloqueEstadistica); }
      public:
        /// Constructor with initializations
        ns3__retornoBloqueEstadistica() : datoRegresa(), soap() { }
        virtual ~ns3__retornoBloqueEstadistica() { }
        /// Friend allocator used by soap_new_ns3__retornoBloqueEstadistica(struct soap*, int)
        friend SOAP_FMAC1 ns3__retornoBloqueEstadistica * SOAP_FMAC2 soap_instantiate_ns3__retornoBloqueEstadistica(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:231 */
#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest (35)
/* complex XSD type 'ns3:consultaCorreoPorNumeroClienteRequest': */
class SOAP_CMAC ns3__consultaCorreoPorNumeroClienteRequest {
      public:
        /// Optional element 'numeroCliente' of XSD type 'xsd:string'
        char *numeroCliente;
        /// Optional element 'numeroAdicional' of XSD type 'xsd:string'
        char *numeroAdicional;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultaCorreoPorNumeroClienteRequest, default initialized and not managed by a soap context
        virtual ns3__consultaCorreoPorNumeroClienteRequest *soap_alloc(void) const { return SOAP_NEW(ns3__consultaCorreoPorNumeroClienteRequest); }
      public:
        /// Constructor with initializations
        ns3__consultaCorreoPorNumeroClienteRequest() : numeroCliente(), numeroAdicional(), origen(), subOrigen(), soap() { }
        virtual ~ns3__consultaCorreoPorNumeroClienteRequest() { }
        /// Friend allocator used by soap_new_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:234 */
#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse (36)
/* complex XSD type 'ns3:consultaCorreoPorNumeroClienteResponse': */
class SOAP_CMAC ns3__consultaCorreoPorNumeroClienteResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'respuesta' of XSD type 'xsd:string'
        char *respuesta;
        /// Optional element 'data' of XSD type 'xsd:string'
        char *data;
        /// Optional element 'dataConsultaPorNumeroCliente' of XSD type 'ns3:dataConsultaPorNumeroCliente'
        ns3__dataConsultaPorNumeroCliente *dataConsultaPorNumeroCliente;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultaCorreoPorNumeroClienteResponse, default initialized and not managed by a soap context
        virtual ns3__consultaCorreoPorNumeroClienteResponse *soap_alloc(void) const { return SOAP_NEW(ns3__consultaCorreoPorNumeroClienteResponse); }
      public:
        /// Constructor with initializations
        ns3__consultaCorreoPorNumeroClienteResponse() : code(), message(), respuesta(), data(), dataConsultaPorNumeroCliente(), soap() { }
        virtual ~ns3__consultaCorreoPorNumeroClienteResponse() { }
        /// Friend allocator used by soap_new_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:237 */
#ifndef SOAP_TYPE_ns3__dataConsultaPorNumeroCliente
#define SOAP_TYPE_ns3__dataConsultaPorNumeroCliente (37)
/* complex XSD type 'ns3:dataConsultaPorNumeroCliente': */
class SOAP_CMAC ns3__dataConsultaPorNumeroCliente {
      public:
        /// Optional element 'respuesta' of XSD type 'xsd:int'
        int *respuesta;
        /// Optional element 'correo' of XSD type 'xsd:string'
        char *correo;
        /// Optional element 'iduRegistroCorreo' of XSD type 'xsd:string'
        char *iduRegistroCorreo;
        /// Optional element 'flagCuenta' of XSD type 'xsd:string'
        char *flagCuenta;
        /// Optional element 'flagEstatus' of XSD type 'xsd:string'
        char *flagEstatus;
        /// Optional element 'iduRegistroActivacion' of XSD type 'xsd:string'
        char *iduRegistroActivacion;
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__dataConsultaPorNumeroCliente
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__dataConsultaPorNumeroCliente; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__dataConsultaPorNumeroCliente, default initialized and not managed by a soap context
        virtual ns3__dataConsultaPorNumeroCliente *soap_alloc(void) const { return SOAP_NEW(ns3__dataConsultaPorNumeroCliente); }
      public:
        /// Constructor with initializations
        ns3__dataConsultaPorNumeroCliente() : respuesta(), correo(), iduRegistroCorreo(), flagCuenta(), flagEstatus(), iduRegistroActivacion(), messageEntity(), soap() { }
        virtual ~ns3__dataConsultaPorNumeroCliente() { }
        /// Friend allocator used by soap_new_ns3__dataConsultaPorNumeroCliente(struct soap*, int)
        friend SOAP_FMAC1 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:240 */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest (38)
/* complex XSD type 'ns3:consultarIndicadoresPorCorreoRequest': */
class SOAP_CMAC ns3__consultarIndicadoresPorCorreoRequest {
      public:
        /// Optional element 'email' of XSD type 'xsd:string'
        char *email;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultarIndicadoresPorCorreoRequest, default initialized and not managed by a soap context
        virtual ns3__consultarIndicadoresPorCorreoRequest *soap_alloc(void) const { return SOAP_NEW(ns3__consultarIndicadoresPorCorreoRequest); }
      public:
        /// Constructor with initializations
        ns3__consultarIndicadoresPorCorreoRequest() : email(), origen(), subOrigen(), soap() { }
        virtual ~ns3__consultarIndicadoresPorCorreoRequest() { }
        /// Friend allocator used by soap_new_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:243 */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse (39)
/* complex XSD type 'ns3:consultarIndicadoresPorCorreoResponse': */
class SOAP_CMAC ns3__consultarIndicadoresPorCorreoResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Sequence of elements 'IndicadoresCorreo' of XSD type 'ns3:Indicador' stored in dynamic array IndicadoresCorreo of length __sizeIndicadoresCorreo
        int __sizeIndicadoresCorreo;
        ns3__Indicador **IndicadoresCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultarIndicadoresPorCorreoResponse, default initialized and not managed by a soap context
        virtual ns3__consultarIndicadoresPorCorreoResponse *soap_alloc(void) const { return SOAP_NEW(ns3__consultarIndicadoresPorCorreoResponse); }
      public:
        /// Constructor with initializations
        ns3__consultarIndicadoresPorCorreoResponse() : code(), message(), __sizeIndicadoresCorreo(), IndicadoresCorreo(), soap() { }
        virtual ~ns3__consultarIndicadoresPorCorreoResponse() { }
        /// Friend allocator used by soap_new_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:246 */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest (40)
/* complex XSD type 'ns3:consultarIndicadoresPorNumeroClienteRequest': */
class SOAP_CMAC ns3__consultarIndicadoresPorNumeroClienteRequest {
      public:
        /// Optional element 'numCliente' of XSD type 'xsd:string'
        char *numCliente;
        /// Optional element 'adicional' of XSD type 'xsd:string'
        char *adicional;
        /// Optional element 'origen' of XSD type 'xsd:string'
        char *origen;
        /// Optional element 'subOrigen' of XSD type 'xsd:string'
        char *subOrigen;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultarIndicadoresPorNumeroClienteRequest, default initialized and not managed by a soap context
        virtual ns3__consultarIndicadoresPorNumeroClienteRequest *soap_alloc(void) const { return SOAP_NEW(ns3__consultarIndicadoresPorNumeroClienteRequest); }
      public:
        /// Constructor with initializations
        ns3__consultarIndicadoresPorNumeroClienteRequest() : numCliente(), adicional(), origen(), subOrigen(), soap() { }
        virtual ~ns3__consultarIndicadoresPorNumeroClienteRequest() { }
        /// Friend allocator used by soap_new_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:249 */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse (41)
/* complex XSD type 'ns3:consultarIndicadoresPorNumeroClienteResponse': */
class SOAP_CMAC ns3__consultarIndicadoresPorNumeroClienteResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Sequence of elements 'IndicadoresCorreo' of XSD type 'ns3:Indicador' stored in dynamic array IndicadoresCorreo of length __sizeIndicadoresCorreo
        int __sizeIndicadoresCorreo;
        ns3__Indicador **IndicadoresCorreo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__consultarIndicadoresPorNumeroClienteResponse, default initialized and not managed by a soap context
        virtual ns3__consultarIndicadoresPorNumeroClienteResponse *soap_alloc(void) const { return SOAP_NEW(ns3__consultarIndicadoresPorNumeroClienteResponse); }
      public:
        /// Constructor with initializations
        ns3__consultarIndicadoresPorNumeroClienteResponse() : code(), message(), __sizeIndicadoresCorreo(), IndicadoresCorreo(), soap() { }
        virtual ~ns3__consultarIndicadoresPorNumeroClienteResponse() { }
        /// Friend allocator used by soap_new_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:252 */
#ifndef SOAP_TYPE_ns3__Indicador
#define SOAP_TYPE_ns3__Indicador (42)
/* complex XSD type 'ns3:Indicador': */
class SOAP_CMAC ns3__Indicador {
      public:
        /// Optional element 'nombre' of XSD type 'xsd:string'
        char *nombre;
        /// Optional element 'valor' of XSD type 'xsd:int'
        int *valor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__Indicador
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__Indicador; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Indicador, default initialized and not managed by a soap context
        virtual ns3__Indicador *soap_alloc(void) const { return SOAP_NEW(ns3__Indicador); }
      public:
        /// Constructor with initializations
        ns3__Indicador() : nombre(), valor(), soap() { }
        virtual ~ns3__Indicador() { }
        /// Friend allocator used by soap_new_ns3__Indicador(struct soap*, int)
        friend SOAP_FMAC1 ns3__Indicador * SOAP_FMAC2 soap_instantiate_ns3__Indicador(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:255 */
#ifndef SOAP_TYPE_ns3__cierreEstadisticasRequest
#define SOAP_TYPE_ns3__cierreEstadisticasRequest (43)
/* complex XSD type 'ns3:cierreEstadisticasRequest': */
class SOAP_CMAC ns3__cierreEstadisticasRequest {
      public:
        /// Optional element 'iduRegistroEstadistica' of XSD type 'xsd:string'
        char *iduRegistroEstadistica;
        /// Optional element 'iduRegistroCorreo' of XSD type 'xsd:string'
        char *iduRegistroCorreo;
        /// Optional element 'correo' of XSD type 'xsd:string'
        char *correo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__cierreEstadisticasRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__cierreEstadisticasRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__cierreEstadisticasRequest, default initialized and not managed by a soap context
        virtual ns3__cierreEstadisticasRequest *soap_alloc(void) const { return SOAP_NEW(ns3__cierreEstadisticasRequest); }
      public:
        /// Constructor with initializations
        ns3__cierreEstadisticasRequest() : iduRegistroEstadistica(), iduRegistroCorreo(), correo(), soap() { }
        virtual ~ns3__cierreEstadisticasRequest() { }
        /// Friend allocator used by soap_new_ns3__cierreEstadisticasRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__cierreEstadisticasRequest * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:258 */
#ifndef SOAP_TYPE_ns3__cierreEstadisticasResponse
#define SOAP_TYPE_ns3__cierreEstadisticasResponse (44)
/* complex XSD type 'ns3:cierreEstadisticasResponse': */
class SOAP_CMAC ns3__cierreEstadisticasResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'dataCierreEstadisticas' of XSD type 'ns3:dataCierreEstadisticas'
        ns3__dataCierreEstadisticas *dataCierreEstadisticas;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__cierreEstadisticasResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__cierreEstadisticasResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__cierreEstadisticasResponse, default initialized and not managed by a soap context
        virtual ns3__cierreEstadisticasResponse *soap_alloc(void) const { return SOAP_NEW(ns3__cierreEstadisticasResponse); }
      public:
        /// Constructor with initializations
        ns3__cierreEstadisticasResponse() : code(), message(), dataCierreEstadisticas(), soap() { }
        virtual ~ns3__cierreEstadisticasResponse() { }
        /// Friend allocator used by soap_new_ns3__cierreEstadisticasResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__cierreEstadisticasResponse * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:261 */
#ifndef SOAP_TYPE_ns3__dataCierreEstadisticas
#define SOAP_TYPE_ns3__dataCierreEstadisticas (45)
/* complex XSD type 'ns3:dataCierreEstadisticas': */
class SOAP_CMAC ns3__dataCierreEstadisticas {
      public:
        /// Optional element 'iduPlantilla' of XSD type 'xsd:int'
        int *iduPlantilla;
        /// Optional element 'trigger' of XSD type 'xsd:string'
        char *trigger;
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__dataCierreEstadisticas
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__dataCierreEstadisticas; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__dataCierreEstadisticas, default initialized and not managed by a soap context
        virtual ns3__dataCierreEstadisticas *soap_alloc(void) const { return SOAP_NEW(ns3__dataCierreEstadisticas); }
      public:
        /// Constructor with initializations
        ns3__dataCierreEstadisticas() : iduPlantilla(), trigger(), messageEntity(), soap() { }
        virtual ~ns3__dataCierreEstadisticas() { }
        /// Friend allocator used by soap_new_ns3__dataCierreEstadisticas(struct soap*, int)
        friend SOAP_FMAC1 ns3__dataCierreEstadisticas * SOAP_FMAC2 soap_instantiate_ns3__dataCierreEstadisticas(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:264 */
#ifndef SOAP_TYPE_ns3__insertaMovimientosRequest
#define SOAP_TYPE_ns3__insertaMovimientosRequest (46)
/* complex XSD type 'ns3:insertaMovimientosRequest': */
class SOAP_CMAC ns3__insertaMovimientosRequest {
      public:
        /// Optional element 'iduRegistroCorreo' of XSD type 'xsd:string'
        char *iduRegistroCorreo;
        /// Optional element 'iduProceso' of XSD type 'xsd:string'
        char *iduProceso;
        /// Optional element 'json' of XSD type 'xsd:string'
        char *json;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__insertaMovimientosRequest
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__insertaMovimientosRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__insertaMovimientosRequest, default initialized and not managed by a soap context
        virtual ns3__insertaMovimientosRequest *soap_alloc(void) const { return SOAP_NEW(ns3__insertaMovimientosRequest); }
      public:
        /// Constructor with initializations
        ns3__insertaMovimientosRequest() : iduRegistroCorreo(), iduProceso(), json(), soap() { }
        virtual ~ns3__insertaMovimientosRequest() { }
        /// Friend allocator used by soap_new_ns3__insertaMovimientosRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__insertaMovimientosRequest * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:267 */
#ifndef SOAP_TYPE_ns3__insertaMovimientosResponse
#define SOAP_TYPE_ns3__insertaMovimientosResponse (47)
/* complex XSD type 'ns3:insertaMovimientosResponse': */
class SOAP_CMAC ns3__insertaMovimientosResponse {
      public:
        /// Required element 'code' of XSD type 'ns3:messageCode'
        enum ns3__messageCode code;
        /// Optional element 'message' of XSD type 'xsd:string'
        char *message;
        /// Optional element 'dataInsertaMovimientos' of XSD type 'ns3:dataInsertaMovimientos'
        ns3__dataInsertaMovimientos *dataInsertaMovimientos;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__insertaMovimientosResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__insertaMovimientosResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__insertaMovimientosResponse, default initialized and not managed by a soap context
        virtual ns3__insertaMovimientosResponse *soap_alloc(void) const { return SOAP_NEW(ns3__insertaMovimientosResponse); }
      public:
        /// Constructor with initializations
        ns3__insertaMovimientosResponse() : code(), message(), dataInsertaMovimientos(), soap() { }
        virtual ~ns3__insertaMovimientosResponse() { }
        /// Friend allocator used by soap_new_ns3__insertaMovimientosResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__insertaMovimientosResponse * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:270 */
#ifndef SOAP_TYPE_ns3__dataInsertaMovimientos
#define SOAP_TYPE_ns3__dataInsertaMovimientos (48)
/* complex XSD type 'ns3:dataInsertaMovimientos': */
class SOAP_CMAC ns3__dataInsertaMovimientos {
      public:
        /// Optional element 'messageEntity' of XSD type 'ns3:messageEntity'
        ns3__messageEntity *messageEntity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__dataInsertaMovimientos
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__dataInsertaMovimientos; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__dataInsertaMovimientos, default initialized and not managed by a soap context
        virtual ns3__dataInsertaMovimientos *soap_alloc(void) const { return SOAP_NEW(ns3__dataInsertaMovimientos); }
      public:
        /// Constructor with initializations
        ns3__dataInsertaMovimientos() : messageEntity(), soap() { }
        virtual ~ns3__dataInsertaMovimientos() { }
        /// Friend allocator used by soap_new_ns3__dataInsertaMovimientos(struct soap*, int)
        friend SOAP_FMAC1 ns3__dataInsertaMovimientos * SOAP_FMAC2 soap_instantiate_ns3__dataInsertaMovimientos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:273 */
#ifndef SOAP_TYPE_ns3__messageEntity
#define SOAP_TYPE_ns3__messageEntity (49)
/* complex XSD type 'ns3:messageEntity': */
class SOAP_CMAC ns3__messageEntity {
      public:
        /// Optional element 'mensajeOperador' of XSD type 'xsd:string'
        char *mensajeOperador;
        /// Optional element 'mensajeCliente' of XSD type 'xsd:string'
        char *mensajeCliente;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__messageEntity
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__messageEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__messageEntity, default initialized and not managed by a soap context
        virtual ns3__messageEntity *soap_alloc(void) const { return SOAP_NEW(ns3__messageEntity); }
      public:
        /// Constructor with initializations
        ns3__messageEntity() : mensajeOperador(), mensajeCliente(), soap() { }
        virtual ~ns3__messageEntity() { }
        /// Friend allocator used by soap_new_ns3__messageEntity(struct soap*, int)
        friend SOAP_FMAC1 ns3__messageEntity * SOAP_FMAC2 soap_instantiate_ns3__messageEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:276 */
#ifndef SOAP_TYPE_ns3__ServiceException
#define SOAP_TYPE_ns3__ServiceException (50)
/* complex XSD type 'ns3:ServiceException': */
class SOAP_CMAC ns3__ServiceException {
      public:
        /// Sequence of elements 'param' of XSD type 'xsd:string' stored in dynamic array param of length __sizeparam
        int __sizeparam;
        char **param;
        /// Required nillable (xsi:nil when NULL) element 'key' of XSD type 'xsd:string'
        char *key;
        /// Required nillable (xsi:nil when NULL) element 'description' of XSD type 'xsd:string'
        char *description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__ServiceException
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__ServiceException; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ServiceException, default initialized and not managed by a soap context
        virtual ns3__ServiceException *soap_alloc(void) const { return SOAP_NEW(ns3__ServiceException); }
      public:
        /// Constructor with initializations
        ns3__ServiceException() : __sizeparam(), param(), key(), description(), soap() { }
        virtual ~ns3__ServiceException() { }
        /// Friend allocator used by soap_new_ns3__ServiceException(struct soap*, int)
        friend SOAP_FMAC1 ns3__ServiceException * SOAP_FMAC2 soap_instantiate_ns3__ServiceException(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1762 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (75)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'ns3:ServiceException' of XSD type 'ns3:ServiceException' */
        ns3__ServiceException *ns3__ServiceException_;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : ns3__ServiceException_(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ah.h:1849 */
#ifndef SOAP_TYPE_ns2__ConsultaClienteResponse
#define SOAP_TYPE_ns2__ConsultaClienteResponse (82)
/* complex XSD type 'ns2:ConsultaClienteResponse': */
struct SOAP_CMAC ns2__ConsultaClienteResponse {
      public:
        /** Required element 'num-respuesta' of XSD type 'xsd:string' */
        char *num_respuesta;
      public:
        /** Return unique type id SOAP_TYPE_ns2__ConsultaClienteResponse */
        long soap_type() const { return SOAP_TYPE_ns2__ConsultaClienteResponse; }
        /** Constructor with member initializations */
        ns2__ConsultaClienteResponse() : num_respuesta() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__ConsultaClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaClienteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1849 */
#ifndef SOAP_TYPE_ns2__ConsultaCliente
#define SOAP_TYPE_ns2__ConsultaCliente (83)
/* complex XSD type 'ns2:ConsultaCliente': */
struct SOAP_CMAC ns2__ConsultaCliente {
      public:
        /** Optional element 'entradaCliente' of XSD type 'ns2:entrada' */
        ns2__entrada *entradaCliente;
      public:
        /** Return unique type id SOAP_TYPE_ns2__ConsultaCliente */
        long soap_type() const { return SOAP_TYPE_ns2__ConsultaCliente; }
        /** Constructor with member initializations */
        ns2__ConsultaCliente() : entradaCliente() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__ConsultaCliente * SOAP_FMAC2 soap_instantiate_ns2__ConsultaCliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1920 */
#ifndef SOAP_TYPE_ns2__ConsultaEmpleadoResponse
#define SOAP_TYPE_ns2__ConsultaEmpleadoResponse (85)
/* complex XSD type 'ns2:ConsultaEmpleadoResponse': */
struct SOAP_CMAC ns2__ConsultaEmpleadoResponse {
      public:
        /** Required element 'num-respuesta' of XSD type 'xsd:string' */
        char *num_respuesta;
      public:
        /** Return unique type id SOAP_TYPE_ns2__ConsultaEmpleadoResponse */
        long soap_type() const { return SOAP_TYPE_ns2__ConsultaEmpleadoResponse; }
        /** Constructor with member initializations */
        ns2__ConsultaEmpleadoResponse() : num_respuesta() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__ConsultaEmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleadoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1920 */
#ifndef SOAP_TYPE_ns2__ConsultaEmpleado
#define SOAP_TYPE_ns2__ConsultaEmpleado (86)
/* complex XSD type 'ns2:ConsultaEmpleado': */
struct SOAP_CMAC ns2__ConsultaEmpleado {
      public:
        /** Optional element 'entradaEmpleado' of XSD type 'ns2:entrada' */
        ns2__entrada *entradaEmpleado;
      public:
        /** Return unique type id SOAP_TYPE_ns2__ConsultaEmpleado */
        long soap_type() const { return SOAP_TYPE_ns2__ConsultaEmpleado; }
        /** Constructor with member initializations */
        ns2__ConsultaEmpleado() : entradaEmpleado() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__ConsultaEmpleado * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleado(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1931 */
#ifndef SOAP_TYPE_ns2__ClienteResponse
#define SOAP_TYPE_ns2__ClienteResponse (87)
/* complex XSD type 'ns2:ClienteResponse': */
struct SOAP_CMAC ns2__ClienteResponse {
      public:
        /** Optional element 'num-respuesta' of XSD type 'xsd:string' */
        char *num_respuesta;
        /** Optional element 'num-adicional' of XSD type 'xsd:string' */
        char *num_adicional;
        /** Optional element 'num-dedo' of XSD type 'xsd:string' */
        char *num_dedo;
        /** Optional element 'fec-actualizacion' of XSD type 'xsd:string' */
        char *fec_actualizacion;
      public:
        /** Return unique type id SOAP_TYPE_ns2__ClienteResponse */
        long soap_type() const { return SOAP_TYPE_ns2__ClienteResponse; }
        /** Constructor with member initializations */
        ns2__ClienteResponse() : num_respuesta(), num_adicional(), num_dedo(), fec_actualizacion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__ClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ClienteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:1999 */
#ifndef SOAP_TYPE_ns2__Cliente
#define SOAP_TYPE_ns2__Cliente (90)
/* complex XSD type 'ns2:Cliente': */
struct SOAP_CMAC ns2__Cliente {
      public:
        /** Optional element 'entradaCliente' of XSD type 'ns2:entrada' */
        ns2__entrada *entradaCliente;
      public:
        /** Return unique type id SOAP_TYPE_ns2__Cliente */
        long soap_type() const { return SOAP_TYPE_ns2__Cliente; }
        /** Constructor with member initializations */
        ns2__Cliente() : entradaCliente() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__Cliente * SOAP_FMAC2 soap_instantiate_ns2__Cliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2010 */
#ifndef SOAP_TYPE_ns2__EmpleadoResponse
#define SOAP_TYPE_ns2__EmpleadoResponse (91)
/* complex XSD type 'ns2:EmpleadoResponse': */
struct SOAP_CMAC ns2__EmpleadoResponse {
      public:
        /** Optional element 'num-respuesta' of XSD type 'xsd:string' */
        char *num_respuesta;
        /** Optional element 'num-adicional' of XSD type 'xsd:string' */
        char *num_adicional;
        /** Optional element 'num-dedo' of XSD type 'xsd:string' */
        char *num_dedo;
        /** Optional element 'fec-actualizacion' of XSD type 'xsd:string' */
        char *fec_actualizacion;
      public:
        /** Return unique type id SOAP_TYPE_ns2__EmpleadoResponse */
        long soap_type() const { return SOAP_TYPE_ns2__EmpleadoResponse; }
        /** Constructor with member initializations */
        ns2__EmpleadoResponse() : num_respuesta(), num_adicional(), num_dedo(), fec_actualizacion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__EmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__EmpleadoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2078 */
#ifndef SOAP_TYPE_ns2__Empleado
#define SOAP_TYPE_ns2__Empleado (94)
/* complex XSD type 'ns2:Empleado': */
struct SOAP_CMAC ns2__Empleado {
      public:
        /** Optional element 'entradaEmpleado' of XSD type 'ns2:entrada' */
        ns2__entrada *entradaEmpleado;
      public:
        /** Return unique type id SOAP_TYPE_ns2__Empleado */
        long soap_type() const { return SOAP_TYPE_ns2__Empleado; }
        /** Constructor with member initializations */
        ns2__Empleado() : entradaEmpleado() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__Empleado * SOAP_FMAC2 soap_instantiate_ns2__Empleado(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2169 */
#ifndef SOAP_TYPE___ns3__validaSintaxisCorreo
#define SOAP_TYPE___ns3__validaSintaxisCorreo (98)
/* Wrapper: */
struct SOAP_CMAC __ns3__validaSintaxisCorreo {
      public:
        /** Optional element 'ns3:validaSintaxisCorreoRequest' of XSD type 'ns3:validaSintaxisCorreoRequest' */
        ns3__validaSintaxisCorreoRequest *ns3__validaSintaxisCorreoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__validaSintaxisCorreo */
        long soap_type() const { return SOAP_TYPE___ns3__validaSintaxisCorreo; }
        /** Constructor with member initializations */
        __ns3__validaSintaxisCorreo() : ns3__validaSintaxisCorreoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__validaSintaxisCorreo * SOAP_FMAC2 soap_instantiate___ns3__validaSintaxisCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2242 */
#ifndef SOAP_TYPE___ns3__consultaCorreo
#define SOAP_TYPE___ns3__consultaCorreo (102)
/* Wrapper: */
struct SOAP_CMAC __ns3__consultaCorreo {
      public:
        /** Optional element 'ns3:consultaCorreoRequest' of XSD type 'ns3:consultaCorreoRequest' */
        ns3__consultaCorreoRequest *ns3__consultaCorreoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__consultaCorreo */
        long soap_type() const { return SOAP_TYPE___ns3__consultaCorreo; }
        /** Constructor with member initializations */
        __ns3__consultaCorreo() : ns3__consultaCorreoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__consultaCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2315 */
#ifndef SOAP_TYPE___ns3__validaCandidato
#define SOAP_TYPE___ns3__validaCandidato (106)
/* Wrapper: */
struct SOAP_CMAC __ns3__validaCandidato {
      public:
        /** Optional element 'ns3:validaCandidatoRequest' of XSD type 'ns3:validaCandidatoRequest' */
        ns3__validaCandidatoRequest *ns3__validaCandidatoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__validaCandidato */
        long soap_type() const { return SOAP_TYPE___ns3__validaCandidato; }
        /** Constructor with member initializations */
        __ns3__validaCandidato() : ns3__validaCandidatoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__validaCandidato * SOAP_FMAC2 soap_instantiate___ns3__validaCandidato(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2388 */
#ifndef SOAP_TYPE___ns3__validarFrecuencia
#define SOAP_TYPE___ns3__validarFrecuencia (110)
/* Wrapper: */
struct SOAP_CMAC __ns3__validarFrecuencia {
      public:
        /** Optional element 'ns3:validarFrecuenciaRequest' of XSD type 'ns3:validarFrecuenciaRequest' */
        ns3__validarFrecuenciaRequest *ns3__validarFrecuenciaRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__validarFrecuencia */
        long soap_type() const { return SOAP_TYPE___ns3__validarFrecuencia; }
        /** Constructor with member initializations */
        __ns3__validarFrecuencia() : ns3__validarFrecuenciaRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__validarFrecuencia * SOAP_FMAC2 soap_instantiate___ns3__validarFrecuencia(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2461 */
#ifndef SOAP_TYPE___ns3__desligueClienteCorreo
#define SOAP_TYPE___ns3__desligueClienteCorreo (114)
/* Wrapper: */
struct SOAP_CMAC __ns3__desligueClienteCorreo {
      public:
        /** Optional element 'ns3:desligueClienteCorreoRequest' of XSD type 'ns3:desligueClienteCorreoRequest' */
        ns3__desligueClienteCorreoRequest *ns3__desligueClienteCorreoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__desligueClienteCorreo */
        long soap_type() const { return SOAP_TYPE___ns3__desligueClienteCorreo; }
        /** Constructor with member initializations */
        __ns3__desligueClienteCorreo() : ns3__desligueClienteCorreoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__desligueClienteCorreo * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2534 */
#ifndef SOAP_TYPE___ns3__desligueClienteNumeroCliente
#define SOAP_TYPE___ns3__desligueClienteNumeroCliente (118)
/* Wrapper: */
struct SOAP_CMAC __ns3__desligueClienteNumeroCliente {
      public:
        /** Optional element 'ns3:desligueClienteNumeroClienteRequest' of XSD type 'ns3:desligueClienteNumeroClienteRequest' */
        ns3__desligueClienteNumeroClienteRequest *ns3__desligueClienteNumeroClienteRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__desligueClienteNumeroCliente */
        long soap_type() const { return SOAP_TYPE___ns3__desligueClienteNumeroCliente; }
        /** Constructor with member initializations */
        __ns3__desligueClienteNumeroCliente() : ns3__desligueClienteNumeroClienteRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__desligueClienteNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteNumeroCliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2607 */
#ifndef SOAP_TYPE___ns3__registroCorreo
#define SOAP_TYPE___ns3__registroCorreo (122)
/* Wrapper: */
struct SOAP_CMAC __ns3__registroCorreo {
      public:
        /** Optional element 'ns3:registroCorreoRequest' of XSD type 'ns3:registroCorreoRequest' */
        ns3__registroCorreoRequest *ns3__registroCorreoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__registroCorreo */
        long soap_type() const { return SOAP_TYPE___ns3__registroCorreo; }
        /** Constructor with member initializations */
        __ns3__registroCorreo() : ns3__registroCorreoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__registroCorreo * SOAP_FMAC2 soap_instantiate___ns3__registroCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2680 */
#ifndef SOAP_TYPE___ns3__registroCorreoBancoppel
#define SOAP_TYPE___ns3__registroCorreoBancoppel (126)
/* Wrapper: */
struct SOAP_CMAC __ns3__registroCorreoBancoppel {
      public:
        /** Optional element 'ns3:registroCorreoBancoppelRequest' of XSD type 'ns3:registroCorreoBancoppelRequest' */
        ns3__registroCorreoBancoppelRequest *ns3__registroCorreoBancoppelRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__registroCorreoBancoppel */
        long soap_type() const { return SOAP_TYPE___ns3__registroCorreoBancoppel; }
        /** Constructor with member initializations */
        __ns3__registroCorreoBancoppel() : ns3__registroCorreoBancoppelRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__registroCorreoBancoppel * SOAP_FMAC2 soap_instantiate___ns3__registroCorreoBancoppel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2753 */
#ifndef SOAP_TYPE___ns3__bloqueEstadistica
#define SOAP_TYPE___ns3__bloqueEstadistica (130)
/* Wrapper: */
struct SOAP_CMAC __ns3__bloqueEstadistica {
      public:
        /** Optional element 'ns3:bloqueEstadisticaRequest' of XSD type 'ns3:bloqueEstadisticaRequest' */
        ns3__bloqueEstadisticaRequest *ns3__bloqueEstadisticaRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__bloqueEstadistica */
        long soap_type() const { return SOAP_TYPE___ns3__bloqueEstadistica; }
        /** Constructor with member initializations */
        __ns3__bloqueEstadistica() : ns3__bloqueEstadisticaRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__bloqueEstadistica * SOAP_FMAC2 soap_instantiate___ns3__bloqueEstadistica(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2826 */
#ifndef SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente
#define SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente (134)
/* Wrapper: */
struct SOAP_CMAC __ns3__consultaCorreoPorNumeroCliente {
      public:
        /** Optional element 'ns3:consultaCorreoPorNumeroClienteRequest' of XSD type 'ns3:consultaCorreoPorNumeroClienteRequest' */
        ns3__consultaCorreoPorNumeroClienteRequest *ns3__consultaCorreoPorNumeroClienteRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente */
        long soap_type() const { return SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente; }
        /** Constructor with member initializations */
        __ns3__consultaCorreoPorNumeroCliente() : ns3__consultaCorreoPorNumeroClienteRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreoPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2899 */
#ifndef SOAP_TYPE___ns3__consultarIndicadoresPorCorreo
#define SOAP_TYPE___ns3__consultarIndicadoresPorCorreo (138)
/* Wrapper: */
struct SOAP_CMAC __ns3__consultarIndicadoresPorCorreo {
      public:
        /** Optional element 'ns3:consultarIndicadoresPorCorreoRequest' of XSD type 'ns3:consultarIndicadoresPorCorreoRequest' */
        ns3__consultarIndicadoresPorCorreoRequest *ns3__consultarIndicadoresPorCorreoRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__consultarIndicadoresPorCorreo */
        long soap_type() const { return SOAP_TYPE___ns3__consultarIndicadoresPorCorreo; }
        /** Constructor with member initializations */
        __ns3__consultarIndicadoresPorCorreo() : ns3__consultarIndicadoresPorCorreoRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorCorreo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:2972 */
#ifndef SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente
#define SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente (142)
/* Wrapper: */
struct SOAP_CMAC __ns3__consultarIndicadoresPorNumeroCliente {
      public:
        /** Optional element 'ns3:consultarIndicadoresPorNumeroClienteRequest' of XSD type 'ns3:consultarIndicadoresPorNumeroClienteRequest' */
        ns3__consultarIndicadoresPorNumeroClienteRequest *ns3__consultarIndicadoresPorNumeroClienteRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente */
        long soap_type() const { return SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente; }
        /** Constructor with member initializations */
        __ns3__consultarIndicadoresPorNumeroCliente() : ns3__consultarIndicadoresPorNumeroClienteRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:3045 */
#ifndef SOAP_TYPE___ns3__cierreEstaditica
#define SOAP_TYPE___ns3__cierreEstaditica (146)
/* Wrapper: */
struct SOAP_CMAC __ns3__cierreEstaditica {
      public:
        /** Optional element 'ns3:cierreEstadisticasRequest' of XSD type 'ns3:cierreEstadisticasRequest' */
        ns3__cierreEstadisticasRequest *ns3__cierreEstadisticasRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__cierreEstaditica */
        long soap_type() const { return SOAP_TYPE___ns3__cierreEstaditica; }
        /** Constructor with member initializations */
        __ns3__cierreEstaditica() : ns3__cierreEstadisticasRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__cierreEstaditica * SOAP_FMAC2 soap_instantiate___ns3__cierreEstaditica(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:3118 */
#ifndef SOAP_TYPE___ns3__insertaMovimientos
#define SOAP_TYPE___ns3__insertaMovimientos (150)
/* Wrapper: */
struct SOAP_CMAC __ns3__insertaMovimientos {
      public:
        /** Optional element 'ns3:insertaMovimientosRequest' of XSD type 'ns3:insertaMovimientosRequest' */
        ns3__insertaMovimientosRequest *ns3__insertaMovimientosRequest_;
      public:
        /** Return unique type id SOAP_TYPE___ns3__insertaMovimientos */
        long soap_type() const { return SOAP_TYPE___ns3__insertaMovimientos; }
        /** Constructor with member initializations */
        __ns3__insertaMovimientos() : ns3__insertaMovimientosRequest_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__insertaMovimientos * SOAP_FMAC2 soap_instantiate___ns3__insertaMovimientos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ah.h:3243 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (151)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ah.h:3243 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (152)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ah.h:3243 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (154)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ah.h:3243 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (155)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* short has binding name 'short' for type 'xsd:short' */
#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (60)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (54)
#endif

/* enum ns3__messageCode has binding name 'ns3__messageCode' for type 'ns3:messageCode' */
#ifndef SOAP_TYPE_ns3__messageCode
#define SOAP_TYPE_ns3__messageCode (51)
#endif

/* ns3__ServiceException has binding name 'ns3__ServiceException' for type 'ns3:ServiceException' */
#ifndef SOAP_TYPE_ns3__ServiceException
#define SOAP_TYPE_ns3__ServiceException (50)
#endif

/* ns3__messageEntity has binding name 'ns3__messageEntity' for type 'ns3:messageEntity' */
#ifndef SOAP_TYPE_ns3__messageEntity
#define SOAP_TYPE_ns3__messageEntity (49)
#endif

/* ns3__dataInsertaMovimientos has binding name 'ns3__dataInsertaMovimientos' for type 'ns3:dataInsertaMovimientos' */
#ifndef SOAP_TYPE_ns3__dataInsertaMovimientos
#define SOAP_TYPE_ns3__dataInsertaMovimientos (48)
#endif

/* ns3__insertaMovimientosResponse has binding name 'ns3__insertaMovimientosResponse' for type 'ns3:insertaMovimientosResponse' */
#ifndef SOAP_TYPE_ns3__insertaMovimientosResponse
#define SOAP_TYPE_ns3__insertaMovimientosResponse (47)
#endif

/* ns3__insertaMovimientosRequest has binding name 'ns3__insertaMovimientosRequest' for type 'ns3:insertaMovimientosRequest' */
#ifndef SOAP_TYPE_ns3__insertaMovimientosRequest
#define SOAP_TYPE_ns3__insertaMovimientosRequest (46)
#endif

/* ns3__dataCierreEstadisticas has binding name 'ns3__dataCierreEstadisticas' for type 'ns3:dataCierreEstadisticas' */
#ifndef SOAP_TYPE_ns3__dataCierreEstadisticas
#define SOAP_TYPE_ns3__dataCierreEstadisticas (45)
#endif

/* ns3__cierreEstadisticasResponse has binding name 'ns3__cierreEstadisticasResponse' for type 'ns3:cierreEstadisticasResponse' */
#ifndef SOAP_TYPE_ns3__cierreEstadisticasResponse
#define SOAP_TYPE_ns3__cierreEstadisticasResponse (44)
#endif

/* ns3__cierreEstadisticasRequest has binding name 'ns3__cierreEstadisticasRequest' for type 'ns3:cierreEstadisticasRequest' */
#ifndef SOAP_TYPE_ns3__cierreEstadisticasRequest
#define SOAP_TYPE_ns3__cierreEstadisticasRequest (43)
#endif

/* ns3__Indicador has binding name 'ns3__Indicador' for type 'ns3:Indicador' */
#ifndef SOAP_TYPE_ns3__Indicador
#define SOAP_TYPE_ns3__Indicador (42)
#endif

/* ns3__consultarIndicadoresPorNumeroClienteResponse has binding name 'ns3__consultarIndicadoresPorNumeroClienteResponse' for type 'ns3:consultarIndicadoresPorNumeroClienteResponse' */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse (41)
#endif

/* ns3__consultarIndicadoresPorNumeroClienteRequest has binding name 'ns3__consultarIndicadoresPorNumeroClienteRequest' for type 'ns3:consultarIndicadoresPorNumeroClienteRequest' */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest
#define SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest (40)
#endif

/* ns3__consultarIndicadoresPorCorreoResponse has binding name 'ns3__consultarIndicadoresPorCorreoResponse' for type 'ns3:consultarIndicadoresPorCorreoResponse' */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse (39)
#endif

/* ns3__consultarIndicadoresPorCorreoRequest has binding name 'ns3__consultarIndicadoresPorCorreoRequest' for type 'ns3:consultarIndicadoresPorCorreoRequest' */
#ifndef SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest
#define SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest (38)
#endif

/* ns3__dataConsultaPorNumeroCliente has binding name 'ns3__dataConsultaPorNumeroCliente' for type 'ns3:dataConsultaPorNumeroCliente' */
#ifndef SOAP_TYPE_ns3__dataConsultaPorNumeroCliente
#define SOAP_TYPE_ns3__dataConsultaPorNumeroCliente (37)
#endif

/* ns3__consultaCorreoPorNumeroClienteResponse has binding name 'ns3__consultaCorreoPorNumeroClienteResponse' for type 'ns3:consultaCorreoPorNumeroClienteResponse' */
#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse (36)
#endif

/* ns3__consultaCorreoPorNumeroClienteRequest has binding name 'ns3__consultaCorreoPorNumeroClienteRequest' for type 'ns3:consultaCorreoPorNumeroClienteRequest' */
#ifndef SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest
#define SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest (35)
#endif

/* ns3__retornoBloqueEstadistica has binding name 'ns3__retornoBloqueEstadistica' for type 'ns3:retornoBloqueEstadistica' */
#ifndef SOAP_TYPE_ns3__retornoBloqueEstadistica
#define SOAP_TYPE_ns3__retornoBloqueEstadistica (34)
#endif

/* ns3__bloqueEstadisticaResponse has binding name 'ns3__bloqueEstadisticaResponse' for type 'ns3:bloqueEstadisticaResponse' */
#ifndef SOAP_TYPE_ns3__bloqueEstadisticaResponse
#define SOAP_TYPE_ns3__bloqueEstadisticaResponse (33)
#endif

/* ns3__estadistica has binding name 'ns3__estadistica' for type 'ns3:estadistica' */
#ifndef SOAP_TYPE_ns3__estadistica
#define SOAP_TYPE_ns3__estadistica (32)
#endif

/* ns3__bloqueEstadisticaRequest has binding name 'ns3__bloqueEstadisticaRequest' for type 'ns3:bloqueEstadisticaRequest' */
#ifndef SOAP_TYPE_ns3__bloqueEstadisticaRequest
#define SOAP_TYPE_ns3__bloqueEstadisticaRequest (31)
#endif

/* ns3__respuestaRegistroCorreoBancoppel has binding name 'ns3__respuestaRegistroCorreoBancoppel' for type 'ns3:respuestaRegistroCorreoBancoppel' */
#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel
#define SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel (30)
#endif

/* ns3__registroCorreoBancoppelResponse has binding name 'ns3__registroCorreoBancoppelResponse' for type 'ns3:registroCorreoBancoppelResponse' */
#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelResponse
#define SOAP_TYPE_ns3__registroCorreoBancoppelResponse (29)
#endif

/* ns3__registroCorreoBancoppelRequest has binding name 'ns3__registroCorreoBancoppelRequest' for type 'ns3:registroCorreoBancoppelRequest' */
#ifndef SOAP_TYPE_ns3__registroCorreoBancoppelRequest
#define SOAP_TYPE_ns3__registroCorreoBancoppelRequest (28)
#endif

/* ns3__respuestaRegistroCorreo has binding name 'ns3__respuestaRegistroCorreo' for type 'ns3:respuestaRegistroCorreo' */
#ifndef SOAP_TYPE_ns3__respuestaRegistroCorreo
#define SOAP_TYPE_ns3__respuestaRegistroCorreo (27)
#endif

/* ns3__registroCorreoResponse has binding name 'ns3__registroCorreoResponse' for type 'ns3:registroCorreoResponse' */
#ifndef SOAP_TYPE_ns3__registroCorreoResponse
#define SOAP_TYPE_ns3__registroCorreoResponse (26)
#endif

/* ns3__registroCorreoRequest has binding name 'ns3__registroCorreoRequest' for type 'ns3:registroCorreoRequest' */
#ifndef SOAP_TYPE_ns3__registroCorreoRequest
#define SOAP_TYPE_ns3__registroCorreoRequest (25)
#endif

/* ns3__desliqueClienteNumeroClienteResponse has binding name 'ns3__desliqueClienteNumeroClienteResponse' for type 'ns3:desliqueClienteNumeroClienteResponse' */
#ifndef SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse
#define SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse (24)
#endif

/* ns3__desligueClienteNumeroClienteRequest has binding name 'ns3__desligueClienteNumeroClienteRequest' for type 'ns3:desligueClienteNumeroClienteRequest' */
#ifndef SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest
#define SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest (23)
#endif

/* ns3__respuestaDesligueCorreo has binding name 'ns3__respuestaDesligueCorreo' for type 'ns3:respuestaDesligueCorreo' */
#ifndef SOAP_TYPE_ns3__respuestaDesligueCorreo
#define SOAP_TYPE_ns3__respuestaDesligueCorreo (22)
#endif

/* ns3__desliqueClienteCorreoResponse has binding name 'ns3__desliqueClienteCorreoResponse' for type 'ns3:desliqueClienteCorreoResponse' */
#ifndef SOAP_TYPE_ns3__desliqueClienteCorreoResponse
#define SOAP_TYPE_ns3__desliqueClienteCorreoResponse (21)
#endif

/* ns3__desligueClienteCorreoRequest has binding name 'ns3__desligueClienteCorreoRequest' for type 'ns3:desligueClienteCorreoRequest' */
#ifndef SOAP_TYPE_ns3__desligueClienteCorreoRequest
#define SOAP_TYPE_ns3__desligueClienteCorreoRequest (20)
#endif

/* ns3__resultadoFrecuencia has binding name 'ns3__resultadoFrecuencia' for type 'ns3:resultadoFrecuencia' */
#ifndef SOAP_TYPE_ns3__resultadoFrecuencia
#define SOAP_TYPE_ns3__resultadoFrecuencia (19)
#endif

/* ns3__validarFrecuenciaResponse has binding name 'ns3__validarFrecuenciaResponse' for type 'ns3:validarFrecuenciaResponse' */
#ifndef SOAP_TYPE_ns3__validarFrecuenciaResponse
#define SOAP_TYPE_ns3__validarFrecuenciaResponse (18)
#endif

/* ns3__validarFrecuenciaRequest has binding name 'ns3__validarFrecuenciaRequest' for type 'ns3:validarFrecuenciaRequest' */
#ifndef SOAP_TYPE_ns3__validarFrecuenciaRequest
#define SOAP_TYPE_ns3__validarFrecuenciaRequest (17)
#endif

/* ns3__resultadoCandidato has binding name 'ns3__resultadoCandidato' for type 'ns3:resultadoCandidato' */
#ifndef SOAP_TYPE_ns3__resultadoCandidato
#define SOAP_TYPE_ns3__resultadoCandidato (16)
#endif

/* ns3__validaCandidatoResponse has binding name 'ns3__validaCandidatoResponse' for type 'ns3:validaCandidatoResponse' */
#ifndef SOAP_TYPE_ns3__validaCandidatoResponse
#define SOAP_TYPE_ns3__validaCandidatoResponse (15)
#endif

/* ns3__validaCandidatoRequest has binding name 'ns3__validaCandidatoRequest' for type 'ns3:validaCandidatoRequest' */
#ifndef SOAP_TYPE_ns3__validaCandidatoRequest
#define SOAP_TYPE_ns3__validaCandidatoRequest (14)
#endif

/* ns3__dataConsultaCorreo has binding name 'ns3__dataConsultaCorreo' for type 'ns3:dataConsultaCorreo' */
#ifndef SOAP_TYPE_ns3__dataConsultaCorreo
#define SOAP_TYPE_ns3__dataConsultaCorreo (13)
#endif

/* ns3__consultaCorreoResponse has binding name 'ns3__consultaCorreoResponse' for type 'ns3:consultaCorreoResponse' */
#ifndef SOAP_TYPE_ns3__consultaCorreoResponse
#define SOAP_TYPE_ns3__consultaCorreoResponse (12)
#endif

/* ns3__consultaCorreoRequest has binding name 'ns3__consultaCorreoRequest' for type 'ns3:consultaCorreoRequest' */
#ifndef SOAP_TYPE_ns3__consultaCorreoRequest
#define SOAP_TYPE_ns3__consultaCorreoRequest (11)
#endif

/* ns3__validacionesEmail has binding name 'ns3__validacionesEmail' for type 'ns3:validacionesEmail' */
#ifndef SOAP_TYPE_ns3__validacionesEmail
#define SOAP_TYPE_ns3__validacionesEmail (10)
#endif

/* ns3__validaSintaxisCorreoResponse has binding name 'ns3__validaSintaxisCorreoResponse' for type 'ns3:validaSintaxisCorreoResponse' */
#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoResponse
#define SOAP_TYPE_ns3__validaSintaxisCorreoResponse (9)
#endif

/* ns3__validaSintaxisCorreoRequest has binding name 'ns3__validaSintaxisCorreoRequest' for type 'ns3:validaSintaxisCorreoRequest' */
#ifndef SOAP_TYPE_ns3__validaSintaxisCorreoRequest
#define SOAP_TYPE_ns3__validaSintaxisCorreoRequest (8)
#endif

/* ns2__entrada has binding name 'ns2__entrada' for type 'ns2:entrada' */
#ifndef SOAP_TYPE_ns2__entrada
#define SOAP_TYPE_ns2__entrada (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (155)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (154)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (152)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (151)
#endif

/* struct ns2__Empleado has binding name 'ns2__Empleado' for type 'ns2:Empleado' */
#ifndef SOAP_TYPE_ns2__Empleado
#define SOAP_TYPE_ns2__Empleado (94)
#endif

/* struct ns2__EmpleadoResponse has binding name 'ns2__EmpleadoResponse' for type 'ns2:EmpleadoResponse' */
#ifndef SOAP_TYPE_ns2__EmpleadoResponse
#define SOAP_TYPE_ns2__EmpleadoResponse (91)
#endif

/* struct ns2__Cliente has binding name 'ns2__Cliente' for type 'ns2:Cliente' */
#ifndef SOAP_TYPE_ns2__Cliente
#define SOAP_TYPE_ns2__Cliente (90)
#endif

/* struct ns2__ClienteResponse has binding name 'ns2__ClienteResponse' for type 'ns2:ClienteResponse' */
#ifndef SOAP_TYPE_ns2__ClienteResponse
#define SOAP_TYPE_ns2__ClienteResponse (87)
#endif

/* struct ns2__ConsultaEmpleado has binding name 'ns2__ConsultaEmpleado' for type 'ns2:ConsultaEmpleado' */
#ifndef SOAP_TYPE_ns2__ConsultaEmpleado
#define SOAP_TYPE_ns2__ConsultaEmpleado (86)
#endif

/* struct ns2__ConsultaEmpleadoResponse has binding name 'ns2__ConsultaEmpleadoResponse' for type 'ns2:ConsultaEmpleadoResponse' */
#ifndef SOAP_TYPE_ns2__ConsultaEmpleadoResponse
#define SOAP_TYPE_ns2__ConsultaEmpleadoResponse (85)
#endif

/* struct ns2__ConsultaCliente has binding name 'ns2__ConsultaCliente' for type 'ns2:ConsultaCliente' */
#ifndef SOAP_TYPE_ns2__ConsultaCliente
#define SOAP_TYPE_ns2__ConsultaCliente (83)
#endif

/* struct ns2__ConsultaClienteResponse has binding name 'ns2__ConsultaClienteResponse' for type 'ns2:ConsultaClienteResponse' */
#ifndef SOAP_TYPE_ns2__ConsultaClienteResponse
#define SOAP_TYPE_ns2__ConsultaClienteResponse (82)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (75)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (157)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (156)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (153)
#endif

/* ns3__insertaMovimientosRequest * has binding name 'PointerTons3__insertaMovimientosRequest' for type 'ns3:insertaMovimientosRequest' */
#ifndef SOAP_TYPE_PointerTons3__insertaMovimientosRequest
#define SOAP_TYPE_PointerTons3__insertaMovimientosRequest (147)
#endif

/* ns3__cierreEstadisticasRequest * has binding name 'PointerTons3__cierreEstadisticasRequest' for type 'ns3:cierreEstadisticasRequest' */
#ifndef SOAP_TYPE_PointerTons3__cierreEstadisticasRequest
#define SOAP_TYPE_PointerTons3__cierreEstadisticasRequest (143)
#endif

/* ns3__consultarIndicadoresPorNumeroClienteRequest * has binding name 'PointerTons3__consultarIndicadoresPorNumeroClienteRequest' for type 'ns3:consultarIndicadoresPorNumeroClienteRequest' */
#ifndef SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest
#define SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest (139)
#endif

/* ns3__consultarIndicadoresPorCorreoRequest * has binding name 'PointerTons3__consultarIndicadoresPorCorreoRequest' for type 'ns3:consultarIndicadoresPorCorreoRequest' */
#ifndef SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest
#define SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest (135)
#endif

/* ns3__consultaCorreoPorNumeroClienteRequest * has binding name 'PointerTons3__consultaCorreoPorNumeroClienteRequest' for type 'ns3:consultaCorreoPorNumeroClienteRequest' */
#ifndef SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest
#define SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest (131)
#endif

/* ns3__bloqueEstadisticaRequest * has binding name 'PointerTons3__bloqueEstadisticaRequest' for type 'ns3:bloqueEstadisticaRequest' */
#ifndef SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest
#define SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest (127)
#endif

/* ns3__registroCorreoBancoppelRequest * has binding name 'PointerTons3__registroCorreoBancoppelRequest' for type 'ns3:registroCorreoBancoppelRequest' */
#ifndef SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest
#define SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest (123)
#endif

/* ns3__registroCorreoRequest * has binding name 'PointerTons3__registroCorreoRequest' for type 'ns3:registroCorreoRequest' */
#ifndef SOAP_TYPE_PointerTons3__registroCorreoRequest
#define SOAP_TYPE_PointerTons3__registroCorreoRequest (119)
#endif

/* ns3__desligueClienteNumeroClienteRequest * has binding name 'PointerTons3__desligueClienteNumeroClienteRequest' for type 'ns3:desligueClienteNumeroClienteRequest' */
#ifndef SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest
#define SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest (115)
#endif

/* ns3__desligueClienteCorreoRequest * has binding name 'PointerTons3__desligueClienteCorreoRequest' for type 'ns3:desligueClienteCorreoRequest' */
#ifndef SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest
#define SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest (111)
#endif

/* ns3__validarFrecuenciaRequest * has binding name 'PointerTons3__validarFrecuenciaRequest' for type 'ns3:validarFrecuenciaRequest' */
#ifndef SOAP_TYPE_PointerTons3__validarFrecuenciaRequest
#define SOAP_TYPE_PointerTons3__validarFrecuenciaRequest (107)
#endif

/* ns3__validaCandidatoRequest * has binding name 'PointerTons3__validaCandidatoRequest' for type 'ns3:validaCandidatoRequest' */
#ifndef SOAP_TYPE_PointerTons3__validaCandidatoRequest
#define SOAP_TYPE_PointerTons3__validaCandidatoRequest (103)
#endif

/* ns3__consultaCorreoRequest * has binding name 'PointerTons3__consultaCorreoRequest' for type 'ns3:consultaCorreoRequest' */
#ifndef SOAP_TYPE_PointerTons3__consultaCorreoRequest
#define SOAP_TYPE_PointerTons3__consultaCorreoRequest (99)
#endif

/* ns3__validaSintaxisCorreoRequest * has binding name 'PointerTons3__validaSintaxisCorreoRequest' for type 'ns3:validaSintaxisCorreoRequest' */
#ifndef SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest
#define SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest (95)
#endif

/* ns2__entrada * has binding name 'PointerTons2__entrada' for type 'ns2:entrada' */
#ifndef SOAP_TYPE_PointerTons2__entrada
#define SOAP_TYPE_PointerTons2__entrada (79)
#endif

/* ns3__ServiceException * has binding name 'PointerTons3__ServiceException' for type 'ns3:ServiceException' */
#ifndef SOAP_TYPE_PointerTons3__ServiceException
#define SOAP_TYPE_PointerTons3__ServiceException (76)
#endif

/* char ** has binding name 'PointerTostring' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (74)
#endif

/* ns3__dataInsertaMovimientos * has binding name 'PointerTons3__dataInsertaMovimientos' for type 'ns3:dataInsertaMovimientos' */
#ifndef SOAP_TYPE_PointerTons3__dataInsertaMovimientos
#define SOAP_TYPE_PointerTons3__dataInsertaMovimientos (73)
#endif

/* ns3__dataCierreEstadisticas * has binding name 'PointerTons3__dataCierreEstadisticas' for type 'ns3:dataCierreEstadisticas' */
#ifndef SOAP_TYPE_PointerTons3__dataCierreEstadisticas
#define SOAP_TYPE_PointerTons3__dataCierreEstadisticas (72)
#endif

/* ns3__Indicador ** has binding name 'PointerToPointerTons3__Indicador' for type 'ns3:Indicador' */
#ifndef SOAP_TYPE_PointerToPointerTons3__Indicador
#define SOAP_TYPE_PointerToPointerTons3__Indicador (71)
#endif

/* ns3__Indicador * has binding name 'PointerTons3__Indicador' for type 'ns3:Indicador' */
#ifndef SOAP_TYPE_PointerTons3__Indicador
#define SOAP_TYPE_PointerTons3__Indicador (70)
#endif

/* ns3__dataConsultaPorNumeroCliente * has binding name 'PointerTons3__dataConsultaPorNumeroCliente' for type 'ns3:dataConsultaPorNumeroCliente' */
#ifndef SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente
#define SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente (69)
#endif

/* ns3__retornoBloqueEstadistica * has binding name 'PointerTons3__retornoBloqueEstadistica' for type 'ns3:retornoBloqueEstadistica' */
#ifndef SOAP_TYPE_PointerTons3__retornoBloqueEstadistica
#define SOAP_TYPE_PointerTons3__retornoBloqueEstadistica (68)
#endif

/* ns3__estadistica * has binding name 'PointerTons3__estadistica' for type 'ns3:estadistica' */
#ifndef SOAP_TYPE_PointerTons3__estadistica
#define SOAP_TYPE_PointerTons3__estadistica (67)
#endif

/* ns3__respuestaRegistroCorreoBancoppel ** has binding name 'PointerToPointerTons3__respuestaRegistroCorreoBancoppel' for type 'ns3:respuestaRegistroCorreoBancoppel' */
#ifndef SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel
#define SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel (66)
#endif

/* ns3__respuestaRegistroCorreoBancoppel * has binding name 'PointerTons3__respuestaRegistroCorreoBancoppel' for type 'ns3:respuestaRegistroCorreoBancoppel' */
#ifndef SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel
#define SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel (65)
#endif

/* ns3__respuestaRegistroCorreo * has binding name 'PointerTons3__respuestaRegistroCorreo' for type 'ns3:respuestaRegistroCorreo' */
#ifndef SOAP_TYPE_PointerTons3__respuestaRegistroCorreo
#define SOAP_TYPE_PointerTons3__respuestaRegistroCorreo (64)
#endif

/* ns3__respuestaDesligueCorreo * has binding name 'PointerTons3__respuestaDesligueCorreo' for type 'ns3:respuestaDesligueCorreo' */
#ifndef SOAP_TYPE_PointerTons3__respuestaDesligueCorreo
#define SOAP_TYPE_PointerTons3__respuestaDesligueCorreo (63)
#endif

/* ns3__resultadoFrecuencia * has binding name 'PointerTons3__resultadoFrecuencia' for type 'ns3:resultadoFrecuencia' */
#ifndef SOAP_TYPE_PointerTons3__resultadoFrecuencia
#define SOAP_TYPE_PointerTons3__resultadoFrecuencia (62)
#endif

/* short * has binding name 'PointerToshort' for type 'xsd:short' */
#ifndef SOAP_TYPE_PointerToshort
#define SOAP_TYPE_PointerToshort (61)
#endif

/* ns3__resultadoCandidato * has binding name 'PointerTons3__resultadoCandidato' for type 'ns3:resultadoCandidato' */
#ifndef SOAP_TYPE_PointerTons3__resultadoCandidato
#define SOAP_TYPE_PointerTons3__resultadoCandidato (59)
#endif

/* ns3__messageEntity * has binding name 'PointerTons3__messageEntity' for type 'ns3:messageEntity' */
#ifndef SOAP_TYPE_PointerTons3__messageEntity
#define SOAP_TYPE_PointerTons3__messageEntity (58)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (57)
#endif

/* ns3__dataConsultaCorreo * has binding name 'PointerTons3__dataConsultaCorreo' for type 'ns3:dataConsultaCorreo' */
#ifndef SOAP_TYPE_PointerTons3__dataConsultaCorreo
#define SOAP_TYPE_PointerTons3__dataConsultaCorreo (56)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (55)
#endif

/* ns3__validacionesEmail * has binding name 'PointerTons3__validacionesEmail' for type 'ns3:validacionesEmail' */
#ifndef SOAP_TYPE_PointerTons3__validacionesEmail
#define SOAP_TYPE_PointerTons3__validacionesEmail (53)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
