/* soapC.cpp
   Generated by gSOAP 2.8.55 for ah.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.55 2019-10-31 23:56:51 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__messageCode:
		return soap_in_ns3__messageCode(soap, NULL, NULL, "ns3:messageCode");
	case SOAP_TYPE_ns3__ServiceException:
		return soap_in_ns3__ServiceException(soap, NULL, NULL, "ns3:ServiceException");
	case SOAP_TYPE_ns3__messageEntity:
		return soap_in_ns3__messageEntity(soap, NULL, NULL, "ns3:messageEntity");
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		return soap_in_ns3__dataInsertaMovimientos(soap, NULL, NULL, "ns3:dataInsertaMovimientos");
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		return soap_in_ns3__insertaMovimientosResponse(soap, NULL, NULL, "ns3:insertaMovimientosResponse");
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		return soap_in_ns3__insertaMovimientosRequest(soap, NULL, NULL, "ns3:insertaMovimientosRequest");
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		return soap_in_ns3__dataCierreEstadisticas(soap, NULL, NULL, "ns3:dataCierreEstadisticas");
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		return soap_in_ns3__cierreEstadisticasResponse(soap, NULL, NULL, "ns3:cierreEstadisticasResponse");
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		return soap_in_ns3__cierreEstadisticasRequest(soap, NULL, NULL, "ns3:cierreEstadisticasRequest");
	case SOAP_TYPE_ns3__Indicador:
		return soap_in_ns3__Indicador(soap, NULL, NULL, "ns3:Indicador");
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		return soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, NULL, NULL, "ns3:consultarIndicadoresPorNumeroClienteResponse");
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		return soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, NULL, NULL, "ns3:consultarIndicadoresPorNumeroClienteRequest");
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		return soap_in_ns3__consultarIndicadoresPorCorreoResponse(soap, NULL, NULL, "ns3:consultarIndicadoresPorCorreoResponse");
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		return soap_in_ns3__consultarIndicadoresPorCorreoRequest(soap, NULL, NULL, "ns3:consultarIndicadoresPorCorreoRequest");
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		return soap_in_ns3__dataConsultaPorNumeroCliente(soap, NULL, NULL, "ns3:dataConsultaPorNumeroCliente");
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		return soap_in_ns3__consultaCorreoPorNumeroClienteResponse(soap, NULL, NULL, "ns3:consultaCorreoPorNumeroClienteResponse");
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		return soap_in_ns3__consultaCorreoPorNumeroClienteRequest(soap, NULL, NULL, "ns3:consultaCorreoPorNumeroClienteRequest");
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		return soap_in_ns3__retornoBloqueEstadistica(soap, NULL, NULL, "ns3:retornoBloqueEstadistica");
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		return soap_in_ns3__bloqueEstadisticaResponse(soap, NULL, NULL, "ns3:bloqueEstadisticaResponse");
	case SOAP_TYPE_ns3__estadistica:
		return soap_in_ns3__estadistica(soap, NULL, NULL, "ns3:estadistica");
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		return soap_in_ns3__bloqueEstadisticaRequest(soap, NULL, NULL, "ns3:bloqueEstadisticaRequest");
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		return soap_in_ns3__respuestaRegistroCorreoBancoppel(soap, NULL, NULL, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		return soap_in_ns3__registroCorreoBancoppelResponse(soap, NULL, NULL, "ns3:registroCorreoBancoppelResponse");
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		return soap_in_ns3__registroCorreoBancoppelRequest(soap, NULL, NULL, "ns3:registroCorreoBancoppelRequest");
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		return soap_in_ns3__respuestaRegistroCorreo(soap, NULL, NULL, "ns3:respuestaRegistroCorreo");
	case SOAP_TYPE_ns3__registroCorreoResponse:
		return soap_in_ns3__registroCorreoResponse(soap, NULL, NULL, "ns3:registroCorreoResponse");
	case SOAP_TYPE_ns3__registroCorreoRequest:
		return soap_in_ns3__registroCorreoRequest(soap, NULL, NULL, "ns3:registroCorreoRequest");
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		return soap_in_ns3__desliqueClienteNumeroClienteResponse(soap, NULL, NULL, "ns3:desliqueClienteNumeroClienteResponse");
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		return soap_in_ns3__desligueClienteNumeroClienteRequest(soap, NULL, NULL, "ns3:desligueClienteNumeroClienteRequest");
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		return soap_in_ns3__respuestaDesligueCorreo(soap, NULL, NULL, "ns3:respuestaDesligueCorreo");
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		return soap_in_ns3__desliqueClienteCorreoResponse(soap, NULL, NULL, "ns3:desliqueClienteCorreoResponse");
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		return soap_in_ns3__desligueClienteCorreoRequest(soap, NULL, NULL, "ns3:desligueClienteCorreoRequest");
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		return soap_in_ns3__resultadoFrecuencia(soap, NULL, NULL, "ns3:resultadoFrecuencia");
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		return soap_in_ns3__validarFrecuenciaResponse(soap, NULL, NULL, "ns3:validarFrecuenciaResponse");
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		return soap_in_ns3__validarFrecuenciaRequest(soap, NULL, NULL, "ns3:validarFrecuenciaRequest");
	case SOAP_TYPE_ns3__resultadoCandidato:
		return soap_in_ns3__resultadoCandidato(soap, NULL, NULL, "ns3:resultadoCandidato");
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		return soap_in_ns3__validaCandidatoResponse(soap, NULL, NULL, "ns3:validaCandidatoResponse");
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		return soap_in_ns3__validaCandidatoRequest(soap, NULL, NULL, "ns3:validaCandidatoRequest");
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		return soap_in_ns3__dataConsultaCorreo(soap, NULL, NULL, "ns3:dataConsultaCorreo");
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		return soap_in_ns3__consultaCorreoResponse(soap, NULL, NULL, "ns3:consultaCorreoResponse");
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		return soap_in_ns3__consultaCorreoRequest(soap, NULL, NULL, "ns3:consultaCorreoRequest");
	case SOAP_TYPE_ns3__validacionesEmail:
		return soap_in_ns3__validacionesEmail(soap, NULL, NULL, "ns3:validacionesEmail");
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		return soap_in_ns3__validaSintaxisCorreoResponse(soap, NULL, NULL, "ns3:validaSintaxisCorreoResponse");
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		return soap_in_ns3__validaSintaxisCorreoRequest(soap, NULL, NULL, "ns3:validaSintaxisCorreoRequest");
	case SOAP_TYPE_ns2__entrada:
		return soap_in_ns2__entrada(soap, NULL, NULL, "ns2:entrada");
	case SOAP_TYPE_ns2__Empleado:
		return soap_in_ns2__Empleado(soap, NULL, NULL, "ns2:Empleado");
	case SOAP_TYPE_ns2__EmpleadoResponse:
		return soap_in_ns2__EmpleadoResponse(soap, NULL, NULL, "ns2:EmpleadoResponse");
	case SOAP_TYPE_ns2__Cliente:
		return soap_in_ns2__Cliente(soap, NULL, NULL, "ns2:Cliente");
	case SOAP_TYPE_ns2__ClienteResponse:
		return soap_in_ns2__ClienteResponse(soap, NULL, NULL, "ns2:ClienteResponse");
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		return soap_in_ns2__ConsultaEmpleado(soap, NULL, NULL, "ns2:ConsultaEmpleado");
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		return soap_in_ns2__ConsultaEmpleadoResponse(soap, NULL, NULL, "ns2:ConsultaEmpleadoResponse");
	case SOAP_TYPE_ns2__ConsultaCliente:
		return soap_in_ns2__ConsultaCliente(soap, NULL, NULL, "ns2:ConsultaCliente");
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		return soap_in_ns2__ConsultaClienteResponse(soap, NULL, NULL, "ns2:ConsultaClienteResponse");
	case SOAP_TYPE_PointerTons3__insertaMovimientosRequest:
		return soap_in_PointerTons3__insertaMovimientosRequest(soap, NULL, NULL, "ns3:insertaMovimientosRequest");
	case SOAP_TYPE_PointerTons3__cierreEstadisticasRequest:
		return soap_in_PointerTons3__cierreEstadisticasRequest(soap, NULL, NULL, "ns3:cierreEstadisticasRequest");
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest:
		return soap_in_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, NULL, NULL, "ns3:consultarIndicadoresPorNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest:
		return soap_in_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, NULL, NULL, "ns3:consultarIndicadoresPorCorreoRequest");
	case SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest:
		return soap_in_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, NULL, NULL, "ns3:consultaCorreoPorNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest:
		return soap_in_PointerTons3__bloqueEstadisticaRequest(soap, NULL, NULL, "ns3:bloqueEstadisticaRequest");
	case SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest:
		return soap_in_PointerTons3__registroCorreoBancoppelRequest(soap, NULL, NULL, "ns3:registroCorreoBancoppelRequest");
	case SOAP_TYPE_PointerTons3__registroCorreoRequest:
		return soap_in_PointerTons3__registroCorreoRequest(soap, NULL, NULL, "ns3:registroCorreoRequest");
	case SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest:
		return soap_in_PointerTons3__desligueClienteNumeroClienteRequest(soap, NULL, NULL, "ns3:desligueClienteNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest:
		return soap_in_PointerTons3__desligueClienteCorreoRequest(soap, NULL, NULL, "ns3:desligueClienteCorreoRequest");
	case SOAP_TYPE_PointerTons3__validarFrecuenciaRequest:
		return soap_in_PointerTons3__validarFrecuenciaRequest(soap, NULL, NULL, "ns3:validarFrecuenciaRequest");
	case SOAP_TYPE_PointerTons3__validaCandidatoRequest:
		return soap_in_PointerTons3__validaCandidatoRequest(soap, NULL, NULL, "ns3:validaCandidatoRequest");
	case SOAP_TYPE_PointerTons3__consultaCorreoRequest:
		return soap_in_PointerTons3__consultaCorreoRequest(soap, NULL, NULL, "ns3:consultaCorreoRequest");
	case SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest:
		return soap_in_PointerTons3__validaSintaxisCorreoRequest(soap, NULL, NULL, "ns3:validaSintaxisCorreoRequest");
	case SOAP_TYPE_PointerTons2__entrada:
		return soap_in_PointerTons2__entrada(soap, NULL, NULL, "ns2:entrada");
	case SOAP_TYPE_PointerTons3__ServiceException:
		return soap_in_PointerTons3__ServiceException(soap, NULL, NULL, "ns3:ServiceException");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons3__dataInsertaMovimientos:
		return soap_in_PointerTons3__dataInsertaMovimientos(soap, NULL, NULL, "ns3:dataInsertaMovimientos");
	case SOAP_TYPE_PointerTons3__dataCierreEstadisticas:
		return soap_in_PointerTons3__dataCierreEstadisticas(soap, NULL, NULL, "ns3:dataCierreEstadisticas");
	case SOAP_TYPE_PointerToPointerTons3__Indicador:
		return soap_in_PointerToPointerTons3__Indicador(soap, NULL, NULL, "ns3:Indicador");
	case SOAP_TYPE_PointerTons3__Indicador:
		return soap_in_PointerTons3__Indicador(soap, NULL, NULL, "ns3:Indicador");
	case SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente:
		return soap_in_PointerTons3__dataConsultaPorNumeroCliente(soap, NULL, NULL, "ns3:dataConsultaPorNumeroCliente");
	case SOAP_TYPE_PointerTons3__retornoBloqueEstadistica:
		return soap_in_PointerTons3__retornoBloqueEstadistica(soap, NULL, NULL, "ns3:retornoBloqueEstadistica");
	case SOAP_TYPE_PointerTons3__estadistica:
		return soap_in_PointerTons3__estadistica(soap, NULL, NULL, "ns3:estadistica");
	case SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel:
		return soap_in_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(soap, NULL, NULL, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel:
		return soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(soap, NULL, NULL, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreo:
		return soap_in_PointerTons3__respuestaRegistroCorreo(soap, NULL, NULL, "ns3:respuestaRegistroCorreo");
	case SOAP_TYPE_PointerTons3__respuestaDesligueCorreo:
		return soap_in_PointerTons3__respuestaDesligueCorreo(soap, NULL, NULL, "ns3:respuestaDesligueCorreo");
	case SOAP_TYPE_PointerTons3__resultadoFrecuencia:
		return soap_in_PointerTons3__resultadoFrecuencia(soap, NULL, NULL, "ns3:resultadoFrecuencia");
	case SOAP_TYPE_PointerToshort:
		return soap_in_PointerToshort(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_PointerTons3__resultadoCandidato:
		return soap_in_PointerTons3__resultadoCandidato(soap, NULL, NULL, "ns3:resultadoCandidato");
	case SOAP_TYPE_PointerTons3__messageEntity:
		return soap_in_PointerTons3__messageEntity(soap, NULL, NULL, "ns3:messageEntity");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons3__dataConsultaCorreo:
		return soap_in_PointerTons3__dataConsultaCorreo(soap, NULL, NULL, "ns3:dataConsultaCorreo");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTons3__validacionesEmail:
		return soap_in_PointerTons3__validacionesEmail(soap, NULL, NULL, "ns3:validacionesEmail");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:ServiceException"))
		{	*type = SOAP_TYPE_ns3__ServiceException;
			return soap_in_ns3__ServiceException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:messageEntity"))
		{	*type = SOAP_TYPE_ns3__messageEntity;
			return soap_in_ns3__messageEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:dataInsertaMovimientos"))
		{	*type = SOAP_TYPE_ns3__dataInsertaMovimientos;
			return soap_in_ns3__dataInsertaMovimientos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:insertaMovimientosResponse"))
		{	*type = SOAP_TYPE_ns3__insertaMovimientosResponse;
			return soap_in_ns3__insertaMovimientosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:insertaMovimientosRequest"))
		{	*type = SOAP_TYPE_ns3__insertaMovimientosRequest;
			return soap_in_ns3__insertaMovimientosRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:dataCierreEstadisticas"))
		{	*type = SOAP_TYPE_ns3__dataCierreEstadisticas;
			return soap_in_ns3__dataCierreEstadisticas(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:cierreEstadisticasResponse"))
		{	*type = SOAP_TYPE_ns3__cierreEstadisticasResponse;
			return soap_in_ns3__cierreEstadisticasResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:cierreEstadisticasRequest"))
		{	*type = SOAP_TYPE_ns3__cierreEstadisticasRequest;
			return soap_in_ns3__cierreEstadisticasRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Indicador"))
		{	*type = SOAP_TYPE_ns3__Indicador;
			return soap_in_ns3__Indicador(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultarIndicadoresPorNumeroClienteResponse"))
		{	*type = SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse;
			return soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultarIndicadoresPorNumeroClienteRequest"))
		{	*type = SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest;
			return soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultarIndicadoresPorCorreoResponse"))
		{	*type = SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse;
			return soap_in_ns3__consultarIndicadoresPorCorreoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultarIndicadoresPorCorreoRequest"))
		{	*type = SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest;
			return soap_in_ns3__consultarIndicadoresPorCorreoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:dataConsultaPorNumeroCliente"))
		{	*type = SOAP_TYPE_ns3__dataConsultaPorNumeroCliente;
			return soap_in_ns3__dataConsultaPorNumeroCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultaCorreoPorNumeroClienteResponse"))
		{	*type = SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse;
			return soap_in_ns3__consultaCorreoPorNumeroClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultaCorreoPorNumeroClienteRequest"))
		{	*type = SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest;
			return soap_in_ns3__consultaCorreoPorNumeroClienteRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:retornoBloqueEstadistica"))
		{	*type = SOAP_TYPE_ns3__retornoBloqueEstadistica;
			return soap_in_ns3__retornoBloqueEstadistica(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:bloqueEstadisticaResponse"))
		{	*type = SOAP_TYPE_ns3__bloqueEstadisticaResponse;
			return soap_in_ns3__bloqueEstadisticaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:estadistica"))
		{	*type = SOAP_TYPE_ns3__estadistica;
			return soap_in_ns3__estadistica(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:bloqueEstadisticaRequest"))
		{	*type = SOAP_TYPE_ns3__bloqueEstadisticaRequest;
			return soap_in_ns3__bloqueEstadisticaRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:respuestaRegistroCorreoBancoppel"))
		{	*type = SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel;
			return soap_in_ns3__respuestaRegistroCorreoBancoppel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:registroCorreoBancoppelResponse"))
		{	*type = SOAP_TYPE_ns3__registroCorreoBancoppelResponse;
			return soap_in_ns3__registroCorreoBancoppelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:registroCorreoBancoppelRequest"))
		{	*type = SOAP_TYPE_ns3__registroCorreoBancoppelRequest;
			return soap_in_ns3__registroCorreoBancoppelRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:respuestaRegistroCorreo"))
		{	*type = SOAP_TYPE_ns3__respuestaRegistroCorreo;
			return soap_in_ns3__respuestaRegistroCorreo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:registroCorreoResponse"))
		{	*type = SOAP_TYPE_ns3__registroCorreoResponse;
			return soap_in_ns3__registroCorreoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:registroCorreoRequest"))
		{	*type = SOAP_TYPE_ns3__registroCorreoRequest;
			return soap_in_ns3__registroCorreoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:desliqueClienteNumeroClienteResponse"))
		{	*type = SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse;
			return soap_in_ns3__desliqueClienteNumeroClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:desligueClienteNumeroClienteRequest"))
		{	*type = SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest;
			return soap_in_ns3__desligueClienteNumeroClienteRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:respuestaDesligueCorreo"))
		{	*type = SOAP_TYPE_ns3__respuestaDesligueCorreo;
			return soap_in_ns3__respuestaDesligueCorreo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:desliqueClienteCorreoResponse"))
		{	*type = SOAP_TYPE_ns3__desliqueClienteCorreoResponse;
			return soap_in_ns3__desliqueClienteCorreoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:desligueClienteCorreoRequest"))
		{	*type = SOAP_TYPE_ns3__desligueClienteCorreoRequest;
			return soap_in_ns3__desligueClienteCorreoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:resultadoFrecuencia"))
		{	*type = SOAP_TYPE_ns3__resultadoFrecuencia;
			return soap_in_ns3__resultadoFrecuencia(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validarFrecuenciaResponse"))
		{	*type = SOAP_TYPE_ns3__validarFrecuenciaResponse;
			return soap_in_ns3__validarFrecuenciaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validarFrecuenciaRequest"))
		{	*type = SOAP_TYPE_ns3__validarFrecuenciaRequest;
			return soap_in_ns3__validarFrecuenciaRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:resultadoCandidato"))
		{	*type = SOAP_TYPE_ns3__resultadoCandidato;
			return soap_in_ns3__resultadoCandidato(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validaCandidatoResponse"))
		{	*type = SOAP_TYPE_ns3__validaCandidatoResponse;
			return soap_in_ns3__validaCandidatoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validaCandidatoRequest"))
		{	*type = SOAP_TYPE_ns3__validaCandidatoRequest;
			return soap_in_ns3__validaCandidatoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:dataConsultaCorreo"))
		{	*type = SOAP_TYPE_ns3__dataConsultaCorreo;
			return soap_in_ns3__dataConsultaCorreo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultaCorreoResponse"))
		{	*type = SOAP_TYPE_ns3__consultaCorreoResponse;
			return soap_in_ns3__consultaCorreoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:consultaCorreoRequest"))
		{	*type = SOAP_TYPE_ns3__consultaCorreoRequest;
			return soap_in_ns3__consultaCorreoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validacionesEmail"))
		{	*type = SOAP_TYPE_ns3__validacionesEmail;
			return soap_in_ns3__validacionesEmail(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validaSintaxisCorreoResponse"))
		{	*type = SOAP_TYPE_ns3__validaSintaxisCorreoResponse;
			return soap_in_ns3__validaSintaxisCorreoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:validaSintaxisCorreoRequest"))
		{	*type = SOAP_TYPE_ns3__validaSintaxisCorreoRequest;
			return soap_in_ns3__validaSintaxisCorreoRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:entrada"))
		{	*type = SOAP_TYPE_ns2__entrada;
			return soap_in_ns2__entrada(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:messageCode"))
		{	*type = SOAP_TYPE_ns3__messageCode;
			return soap_in_ns3__messageCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Empleado"))
		{	*type = SOAP_TYPE_ns2__Empleado;
			return soap_in_ns2__Empleado(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:EmpleadoResponse"))
		{	*type = SOAP_TYPE_ns2__EmpleadoResponse;
			return soap_in_ns2__EmpleadoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Cliente"))
		{	*type = SOAP_TYPE_ns2__Cliente;
			return soap_in_ns2__Cliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ClienteResponse"))
		{	*type = SOAP_TYPE_ns2__ClienteResponse;
			return soap_in_ns2__ClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ConsultaEmpleado"))
		{	*type = SOAP_TYPE_ns2__ConsultaEmpleado;
			return soap_in_ns2__ConsultaEmpleado(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ConsultaEmpleadoResponse"))
		{	*type = SOAP_TYPE_ns2__ConsultaEmpleadoResponse;
			return soap_in_ns2__ConsultaEmpleadoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ConsultaCliente"))
		{	*type = SOAP_TYPE_ns2__ConsultaCliente;
			return soap_in_ns2__ConsultaCliente(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ConsultaClienteResponse"))
		{	*type = SOAP_TYPE_ns2__ConsultaClienteResponse;
			return soap_in_ns2__ConsultaClienteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns3__messageCode:
		return soap_out_ns3__messageCode(soap, tag, id, (const enum ns3__messageCode *)ptr, "ns3:messageCode");
	case SOAP_TYPE_ns3__ServiceException:
		return ((ns3__ServiceException *)ptr)->soap_out(soap, tag, id, "ns3:ServiceException");
	case SOAP_TYPE_ns3__messageEntity:
		return ((ns3__messageEntity *)ptr)->soap_out(soap, tag, id, "ns3:messageEntity");
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		return ((ns3__dataInsertaMovimientos *)ptr)->soap_out(soap, tag, id, "ns3:dataInsertaMovimientos");
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		return ((ns3__insertaMovimientosResponse *)ptr)->soap_out(soap, tag, id, "ns3:insertaMovimientosResponse");
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		return ((ns3__insertaMovimientosRequest *)ptr)->soap_out(soap, tag, id, "ns3:insertaMovimientosRequest");
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		return ((ns3__dataCierreEstadisticas *)ptr)->soap_out(soap, tag, id, "ns3:dataCierreEstadisticas");
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		return ((ns3__cierreEstadisticasResponse *)ptr)->soap_out(soap, tag, id, "ns3:cierreEstadisticasResponse");
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		return ((ns3__cierreEstadisticasRequest *)ptr)->soap_out(soap, tag, id, "ns3:cierreEstadisticasRequest");
	case SOAP_TYPE_ns3__Indicador:
		return ((ns3__Indicador *)ptr)->soap_out(soap, tag, id, "ns3:Indicador");
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		return ((ns3__consultarIndicadoresPorNumeroClienteResponse *)ptr)->soap_out(soap, tag, id, "ns3:consultarIndicadoresPorNumeroClienteResponse");
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		return ((ns3__consultarIndicadoresPorNumeroClienteRequest *)ptr)->soap_out(soap, tag, id, "ns3:consultarIndicadoresPorNumeroClienteRequest");
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		return ((ns3__consultarIndicadoresPorCorreoResponse *)ptr)->soap_out(soap, tag, id, "ns3:consultarIndicadoresPorCorreoResponse");
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		return ((ns3__consultarIndicadoresPorCorreoRequest *)ptr)->soap_out(soap, tag, id, "ns3:consultarIndicadoresPorCorreoRequest");
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		return ((ns3__dataConsultaPorNumeroCliente *)ptr)->soap_out(soap, tag, id, "ns3:dataConsultaPorNumeroCliente");
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		return ((ns3__consultaCorreoPorNumeroClienteResponse *)ptr)->soap_out(soap, tag, id, "ns3:consultaCorreoPorNumeroClienteResponse");
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		return ((ns3__consultaCorreoPorNumeroClienteRequest *)ptr)->soap_out(soap, tag, id, "ns3:consultaCorreoPorNumeroClienteRequest");
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		return ((ns3__retornoBloqueEstadistica *)ptr)->soap_out(soap, tag, id, "ns3:retornoBloqueEstadistica");
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		return ((ns3__bloqueEstadisticaResponse *)ptr)->soap_out(soap, tag, id, "ns3:bloqueEstadisticaResponse");
	case SOAP_TYPE_ns3__estadistica:
		return ((ns3__estadistica *)ptr)->soap_out(soap, tag, id, "ns3:estadistica");
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		return ((ns3__bloqueEstadisticaRequest *)ptr)->soap_out(soap, tag, id, "ns3:bloqueEstadisticaRequest");
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		return ((ns3__respuestaRegistroCorreoBancoppel *)ptr)->soap_out(soap, tag, id, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		return ((ns3__registroCorreoBancoppelResponse *)ptr)->soap_out(soap, tag, id, "ns3:registroCorreoBancoppelResponse");
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		return ((ns3__registroCorreoBancoppelRequest *)ptr)->soap_out(soap, tag, id, "ns3:registroCorreoBancoppelRequest");
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		return ((ns3__respuestaRegistroCorreo *)ptr)->soap_out(soap, tag, id, "ns3:respuestaRegistroCorreo");
	case SOAP_TYPE_ns3__registroCorreoResponse:
		return ((ns3__registroCorreoResponse *)ptr)->soap_out(soap, tag, id, "ns3:registroCorreoResponse");
	case SOAP_TYPE_ns3__registroCorreoRequest:
		return ((ns3__registroCorreoRequest *)ptr)->soap_out(soap, tag, id, "ns3:registroCorreoRequest");
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		return ((ns3__desliqueClienteNumeroClienteResponse *)ptr)->soap_out(soap, tag, id, "ns3:desliqueClienteNumeroClienteResponse");
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		return ((ns3__desligueClienteNumeroClienteRequest *)ptr)->soap_out(soap, tag, id, "ns3:desligueClienteNumeroClienteRequest");
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		return ((ns3__respuestaDesligueCorreo *)ptr)->soap_out(soap, tag, id, "ns3:respuestaDesligueCorreo");
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		return ((ns3__desliqueClienteCorreoResponse *)ptr)->soap_out(soap, tag, id, "ns3:desliqueClienteCorreoResponse");
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		return ((ns3__desligueClienteCorreoRequest *)ptr)->soap_out(soap, tag, id, "ns3:desligueClienteCorreoRequest");
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		return ((ns3__resultadoFrecuencia *)ptr)->soap_out(soap, tag, id, "ns3:resultadoFrecuencia");
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		return ((ns3__validarFrecuenciaResponse *)ptr)->soap_out(soap, tag, id, "ns3:validarFrecuenciaResponse");
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		return ((ns3__validarFrecuenciaRequest *)ptr)->soap_out(soap, tag, id, "ns3:validarFrecuenciaRequest");
	case SOAP_TYPE_ns3__resultadoCandidato:
		return ((ns3__resultadoCandidato *)ptr)->soap_out(soap, tag, id, "ns3:resultadoCandidato");
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		return ((ns3__validaCandidatoResponse *)ptr)->soap_out(soap, tag, id, "ns3:validaCandidatoResponse");
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		return ((ns3__validaCandidatoRequest *)ptr)->soap_out(soap, tag, id, "ns3:validaCandidatoRequest");
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		return ((ns3__dataConsultaCorreo *)ptr)->soap_out(soap, tag, id, "ns3:dataConsultaCorreo");
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		return ((ns3__consultaCorreoResponse *)ptr)->soap_out(soap, tag, id, "ns3:consultaCorreoResponse");
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		return ((ns3__consultaCorreoRequest *)ptr)->soap_out(soap, tag, id, "ns3:consultaCorreoRequest");
	case SOAP_TYPE_ns3__validacionesEmail:
		return ((ns3__validacionesEmail *)ptr)->soap_out(soap, tag, id, "ns3:validacionesEmail");
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		return ((ns3__validaSintaxisCorreoResponse *)ptr)->soap_out(soap, tag, id, "ns3:validaSintaxisCorreoResponse");
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		return ((ns3__validaSintaxisCorreoRequest *)ptr)->soap_out(soap, tag, id, "ns3:validaSintaxisCorreoRequest");
	case SOAP_TYPE_ns2__entrada:
		return ((ns2__entrada *)ptr)->soap_out(soap, tag, id, "ns2:entrada");
	case SOAP_TYPE_ns2__Empleado:
		return soap_out_ns2__Empleado(soap, tag, id, (const struct ns2__Empleado *)ptr, "ns2:Empleado");
	case SOAP_TYPE_ns2__EmpleadoResponse:
		return soap_out_ns2__EmpleadoResponse(soap, tag, id, (const struct ns2__EmpleadoResponse *)ptr, "ns2:EmpleadoResponse");
	case SOAP_TYPE_ns2__Cliente:
		return soap_out_ns2__Cliente(soap, tag, id, (const struct ns2__Cliente *)ptr, "ns2:Cliente");
	case SOAP_TYPE_ns2__ClienteResponse:
		return soap_out_ns2__ClienteResponse(soap, tag, id, (const struct ns2__ClienteResponse *)ptr, "ns2:ClienteResponse");
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		return soap_out_ns2__ConsultaEmpleado(soap, tag, id, (const struct ns2__ConsultaEmpleado *)ptr, "ns2:ConsultaEmpleado");
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		return soap_out_ns2__ConsultaEmpleadoResponse(soap, tag, id, (const struct ns2__ConsultaEmpleadoResponse *)ptr, "ns2:ConsultaEmpleadoResponse");
	case SOAP_TYPE_ns2__ConsultaCliente:
		return soap_out_ns2__ConsultaCliente(soap, tag, id, (const struct ns2__ConsultaCliente *)ptr, "ns2:ConsultaCliente");
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		return soap_out_ns2__ConsultaClienteResponse(soap, tag, id, (const struct ns2__ConsultaClienteResponse *)ptr, "ns2:ConsultaClienteResponse");
	case SOAP_TYPE_PointerTons3__insertaMovimientosRequest:
		return soap_out_PointerTons3__insertaMovimientosRequest(soap, tag, id, (ns3__insertaMovimientosRequest *const*)ptr, "ns3:insertaMovimientosRequest");
	case SOAP_TYPE_PointerTons3__cierreEstadisticasRequest:
		return soap_out_PointerTons3__cierreEstadisticasRequest(soap, tag, id, (ns3__cierreEstadisticasRequest *const*)ptr, "ns3:cierreEstadisticasRequest");
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest:
		return soap_out_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, tag, id, (ns3__consultarIndicadoresPorNumeroClienteRequest *const*)ptr, "ns3:consultarIndicadoresPorNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest:
		return soap_out_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, tag, id, (ns3__consultarIndicadoresPorCorreoRequest *const*)ptr, "ns3:consultarIndicadoresPorCorreoRequest");
	case SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest:
		return soap_out_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, tag, id, (ns3__consultaCorreoPorNumeroClienteRequest *const*)ptr, "ns3:consultaCorreoPorNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest:
		return soap_out_PointerTons3__bloqueEstadisticaRequest(soap, tag, id, (ns3__bloqueEstadisticaRequest *const*)ptr, "ns3:bloqueEstadisticaRequest");
	case SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest:
		return soap_out_PointerTons3__registroCorreoBancoppelRequest(soap, tag, id, (ns3__registroCorreoBancoppelRequest *const*)ptr, "ns3:registroCorreoBancoppelRequest");
	case SOAP_TYPE_PointerTons3__registroCorreoRequest:
		return soap_out_PointerTons3__registroCorreoRequest(soap, tag, id, (ns3__registroCorreoRequest *const*)ptr, "ns3:registroCorreoRequest");
	case SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest:
		return soap_out_PointerTons3__desligueClienteNumeroClienteRequest(soap, tag, id, (ns3__desligueClienteNumeroClienteRequest *const*)ptr, "ns3:desligueClienteNumeroClienteRequest");
	case SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest:
		return soap_out_PointerTons3__desligueClienteCorreoRequest(soap, tag, id, (ns3__desligueClienteCorreoRequest *const*)ptr, "ns3:desligueClienteCorreoRequest");
	case SOAP_TYPE_PointerTons3__validarFrecuenciaRequest:
		return soap_out_PointerTons3__validarFrecuenciaRequest(soap, tag, id, (ns3__validarFrecuenciaRequest *const*)ptr, "ns3:validarFrecuenciaRequest");
	case SOAP_TYPE_PointerTons3__validaCandidatoRequest:
		return soap_out_PointerTons3__validaCandidatoRequest(soap, tag, id, (ns3__validaCandidatoRequest *const*)ptr, "ns3:validaCandidatoRequest");
	case SOAP_TYPE_PointerTons3__consultaCorreoRequest:
		return soap_out_PointerTons3__consultaCorreoRequest(soap, tag, id, (ns3__consultaCorreoRequest *const*)ptr, "ns3:consultaCorreoRequest");
	case SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest:
		return soap_out_PointerTons3__validaSintaxisCorreoRequest(soap, tag, id, (ns3__validaSintaxisCorreoRequest *const*)ptr, "ns3:validaSintaxisCorreoRequest");
	case SOAP_TYPE_PointerTons2__entrada:
		return soap_out_PointerTons2__entrada(soap, tag, id, (ns2__entrada *const*)ptr, "ns2:entrada");
	case SOAP_TYPE_PointerTons3__ServiceException:
		return soap_out_PointerTons3__ServiceException(soap, tag, id, (ns3__ServiceException *const*)ptr, "ns3:ServiceException");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons3__dataInsertaMovimientos:
		return soap_out_PointerTons3__dataInsertaMovimientos(soap, tag, id, (ns3__dataInsertaMovimientos *const*)ptr, "ns3:dataInsertaMovimientos");
	case SOAP_TYPE_PointerTons3__dataCierreEstadisticas:
		return soap_out_PointerTons3__dataCierreEstadisticas(soap, tag, id, (ns3__dataCierreEstadisticas *const*)ptr, "ns3:dataCierreEstadisticas");
	case SOAP_TYPE_PointerToPointerTons3__Indicador:
		return soap_out_PointerToPointerTons3__Indicador(soap, tag, id, (ns3__Indicador **const*)ptr, "ns3:Indicador");
	case SOAP_TYPE_PointerTons3__Indicador:
		return soap_out_PointerTons3__Indicador(soap, tag, id, (ns3__Indicador *const*)ptr, "ns3:Indicador");
	case SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente:
		return soap_out_PointerTons3__dataConsultaPorNumeroCliente(soap, tag, id, (ns3__dataConsultaPorNumeroCliente *const*)ptr, "ns3:dataConsultaPorNumeroCliente");
	case SOAP_TYPE_PointerTons3__retornoBloqueEstadistica:
		return soap_out_PointerTons3__retornoBloqueEstadistica(soap, tag, id, (ns3__retornoBloqueEstadistica *const*)ptr, "ns3:retornoBloqueEstadistica");
	case SOAP_TYPE_PointerTons3__estadistica:
		return soap_out_PointerTons3__estadistica(soap, tag, id, (ns3__estadistica *const*)ptr, "ns3:estadistica");
	case SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel:
		return soap_out_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, id, (ns3__respuestaRegistroCorreoBancoppel **const*)ptr, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel:
		return soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, id, (ns3__respuestaRegistroCorreoBancoppel *const*)ptr, "ns3:respuestaRegistroCorreoBancoppel");
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreo:
		return soap_out_PointerTons3__respuestaRegistroCorreo(soap, tag, id, (ns3__respuestaRegistroCorreo *const*)ptr, "ns3:respuestaRegistroCorreo");
	case SOAP_TYPE_PointerTons3__respuestaDesligueCorreo:
		return soap_out_PointerTons3__respuestaDesligueCorreo(soap, tag, id, (ns3__respuestaDesligueCorreo *const*)ptr, "ns3:respuestaDesligueCorreo");
	case SOAP_TYPE_PointerTons3__resultadoFrecuencia:
		return soap_out_PointerTons3__resultadoFrecuencia(soap, tag, id, (ns3__resultadoFrecuencia *const*)ptr, "ns3:resultadoFrecuencia");
	case SOAP_TYPE_PointerToshort:
		return soap_out_PointerToshort(soap, tag, id, (short *const*)ptr, "xsd:short");
	case SOAP_TYPE_PointerTons3__resultadoCandidato:
		return soap_out_PointerTons3__resultadoCandidato(soap, tag, id, (ns3__resultadoCandidato *const*)ptr, "ns3:resultadoCandidato");
	case SOAP_TYPE_PointerTons3__messageEntity:
		return soap_out_PointerTons3__messageEntity(soap, tag, id, (ns3__messageEntity *const*)ptr, "ns3:messageEntity");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons3__dataConsultaCorreo:
		return soap_out_PointerTons3__dataConsultaCorreo(soap, tag, id, (ns3__dataConsultaCorreo *const*)ptr, "ns3:dataConsultaCorreo");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTons3__validacionesEmail:
		return soap_out_PointerTons3__validacionesEmail(soap, tag, id, (ns3__validacionesEmail *const*)ptr, "ns3:validacionesEmail");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap->error = SOAP_TYPE; /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns3__ServiceException:
		((ns3__ServiceException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__messageEntity:
		((ns3__messageEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		((ns3__dataInsertaMovimientos *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		((ns3__insertaMovimientosResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		((ns3__insertaMovimientosRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		((ns3__dataCierreEstadisticas *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		((ns3__cierreEstadisticasResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		((ns3__cierreEstadisticasRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__Indicador:
		((ns3__Indicador *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		((ns3__consultarIndicadoresPorNumeroClienteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		((ns3__consultarIndicadoresPorNumeroClienteRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		((ns3__consultarIndicadoresPorCorreoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		((ns3__consultarIndicadoresPorCorreoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		((ns3__dataConsultaPorNumeroCliente *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		((ns3__consultaCorreoPorNumeroClienteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		((ns3__consultaCorreoPorNumeroClienteRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		((ns3__retornoBloqueEstadistica *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		((ns3__bloqueEstadisticaResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__estadistica:
		((ns3__estadistica *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		((ns3__bloqueEstadisticaRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		((ns3__respuestaRegistroCorreoBancoppel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		((ns3__registroCorreoBancoppelResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		((ns3__registroCorreoBancoppelRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		((ns3__respuestaRegistroCorreo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__registroCorreoResponse:
		((ns3__registroCorreoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__registroCorreoRequest:
		((ns3__registroCorreoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		((ns3__desliqueClienteNumeroClienteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		((ns3__desligueClienteNumeroClienteRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		((ns3__respuestaDesligueCorreo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		((ns3__desliqueClienteCorreoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		((ns3__desligueClienteCorreoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		((ns3__resultadoFrecuencia *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		((ns3__validarFrecuenciaResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		((ns3__validarFrecuenciaRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__resultadoCandidato:
		((ns3__resultadoCandidato *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		((ns3__validaCandidatoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		((ns3__validaCandidatoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		((ns3__dataConsultaCorreo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		((ns3__consultaCorreoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		((ns3__consultaCorreoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validacionesEmail:
		((ns3__validacionesEmail *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		((ns3__validaSintaxisCorreoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		((ns3__validaSintaxisCorreoRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__entrada:
		((ns2__entrada *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__insertaMovimientos:
		soap_serialize___ns3__insertaMovimientos(soap, (const struct __ns3__insertaMovimientos *)ptr);
		break;
	case SOAP_TYPE___ns3__cierreEstaditica:
		soap_serialize___ns3__cierreEstaditica(soap, (const struct __ns3__cierreEstaditica *)ptr);
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente:
		soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(soap, (const struct __ns3__consultarIndicadoresPorNumeroCliente *)ptr);
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorCorreo:
		soap_serialize___ns3__consultarIndicadoresPorCorreo(soap, (const struct __ns3__consultarIndicadoresPorCorreo *)ptr);
		break;
	case SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente:
		soap_serialize___ns3__consultaCorreoPorNumeroCliente(soap, (const struct __ns3__consultaCorreoPorNumeroCliente *)ptr);
		break;
	case SOAP_TYPE___ns3__bloqueEstadistica:
		soap_serialize___ns3__bloqueEstadistica(soap, (const struct __ns3__bloqueEstadistica *)ptr);
		break;
	case SOAP_TYPE___ns3__registroCorreoBancoppel:
		soap_serialize___ns3__registroCorreoBancoppel(soap, (const struct __ns3__registroCorreoBancoppel *)ptr);
		break;
	case SOAP_TYPE___ns3__registroCorreo:
		soap_serialize___ns3__registroCorreo(soap, (const struct __ns3__registroCorreo *)ptr);
		break;
	case SOAP_TYPE___ns3__desligueClienteNumeroCliente:
		soap_serialize___ns3__desligueClienteNumeroCliente(soap, (const struct __ns3__desligueClienteNumeroCliente *)ptr);
		break;
	case SOAP_TYPE___ns3__desligueClienteCorreo:
		soap_serialize___ns3__desligueClienteCorreo(soap, (const struct __ns3__desligueClienteCorreo *)ptr);
		break;
	case SOAP_TYPE___ns3__validarFrecuencia:
		soap_serialize___ns3__validarFrecuencia(soap, (const struct __ns3__validarFrecuencia *)ptr);
		break;
	case SOAP_TYPE___ns3__validaCandidato:
		soap_serialize___ns3__validaCandidato(soap, (const struct __ns3__validaCandidato *)ptr);
		break;
	case SOAP_TYPE___ns3__consultaCorreo:
		soap_serialize___ns3__consultaCorreo(soap, (const struct __ns3__consultaCorreo *)ptr);
		break;
	case SOAP_TYPE___ns3__validaSintaxisCorreo:
		soap_serialize___ns3__validaSintaxisCorreo(soap, (const struct __ns3__validaSintaxisCorreo *)ptr);
		break;
	case SOAP_TYPE_ns2__Empleado:
		soap_serialize_ns2__Empleado(soap, (const struct ns2__Empleado *)ptr);
		break;
	case SOAP_TYPE_ns2__EmpleadoResponse:
		soap_serialize_ns2__EmpleadoResponse(soap, (const struct ns2__EmpleadoResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Cliente:
		soap_serialize_ns2__Cliente(soap, (const struct ns2__Cliente *)ptr);
		break;
	case SOAP_TYPE_ns2__ClienteResponse:
		soap_serialize_ns2__ClienteResponse(soap, (const struct ns2__ClienteResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		soap_serialize_ns2__ConsultaEmpleado(soap, (const struct ns2__ConsultaEmpleado *)ptr);
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		soap_serialize_ns2__ConsultaEmpleadoResponse(soap, (const struct ns2__ConsultaEmpleadoResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__ConsultaCliente:
		soap_serialize_ns2__ConsultaCliente(soap, (const struct ns2__ConsultaCliente *)ptr);
		break;
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		soap_serialize_ns2__ConsultaClienteResponse(soap, (const struct ns2__ConsultaClienteResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons3__insertaMovimientosRequest:
		soap_serialize_PointerTons3__insertaMovimientosRequest(soap, (ns3__insertaMovimientosRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__cierreEstadisticasRequest:
		soap_serialize_PointerTons3__cierreEstadisticasRequest(soap, (ns3__cierreEstadisticasRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorNumeroClienteRequest:
		soap_serialize_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, (ns3__consultarIndicadoresPorNumeroClienteRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__consultarIndicadoresPorCorreoRequest:
		soap_serialize_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, (ns3__consultarIndicadoresPorCorreoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__consultaCorreoPorNumeroClienteRequest:
		soap_serialize_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, (ns3__consultaCorreoPorNumeroClienteRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__bloqueEstadisticaRequest:
		soap_serialize_PointerTons3__bloqueEstadisticaRequest(soap, (ns3__bloqueEstadisticaRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__registroCorreoBancoppelRequest:
		soap_serialize_PointerTons3__registroCorreoBancoppelRequest(soap, (ns3__registroCorreoBancoppelRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__registroCorreoRequest:
		soap_serialize_PointerTons3__registroCorreoRequest(soap, (ns3__registroCorreoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__desligueClienteNumeroClienteRequest:
		soap_serialize_PointerTons3__desligueClienteNumeroClienteRequest(soap, (ns3__desligueClienteNumeroClienteRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__desligueClienteCorreoRequest:
		soap_serialize_PointerTons3__desligueClienteCorreoRequest(soap, (ns3__desligueClienteCorreoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__validarFrecuenciaRequest:
		soap_serialize_PointerTons3__validarFrecuenciaRequest(soap, (ns3__validarFrecuenciaRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__validaCandidatoRequest:
		soap_serialize_PointerTons3__validaCandidatoRequest(soap, (ns3__validaCandidatoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__consultaCorreoRequest:
		soap_serialize_PointerTons3__consultaCorreoRequest(soap, (ns3__consultaCorreoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__validaSintaxisCorreoRequest:
		soap_serialize_PointerTons3__validaSintaxisCorreoRequest(soap, (ns3__validaSintaxisCorreoRequest *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__entrada:
		soap_serialize_PointerTons2__entrada(soap, (ns2__entrada *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ServiceException:
		soap_serialize_PointerTons3__ServiceException(soap, (ns3__ServiceException *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__dataInsertaMovimientos:
		soap_serialize_PointerTons3__dataInsertaMovimientos(soap, (ns3__dataInsertaMovimientos *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__dataCierreEstadisticas:
		soap_serialize_PointerTons3__dataCierreEstadisticas(soap, (ns3__dataCierreEstadisticas *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__Indicador:
		soap_serialize_PointerToPointerTons3__Indicador(soap, (ns3__Indicador **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__Indicador:
		soap_serialize_PointerTons3__Indicador(soap, (ns3__Indicador *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__dataConsultaPorNumeroCliente:
		soap_serialize_PointerTons3__dataConsultaPorNumeroCliente(soap, (ns3__dataConsultaPorNumeroCliente *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__retornoBloqueEstadistica:
		soap_serialize_PointerTons3__retornoBloqueEstadistica(soap, (ns3__retornoBloqueEstadistica *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__estadistica:
		soap_serialize_PointerTons3__estadistica(soap, (ns3__estadistica *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__respuestaRegistroCorreoBancoppel:
		soap_serialize_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(soap, (ns3__respuestaRegistroCorreoBancoppel **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel:
		soap_serialize_PointerTons3__respuestaRegistroCorreoBancoppel(soap, (ns3__respuestaRegistroCorreoBancoppel *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__respuestaRegistroCorreo:
		soap_serialize_PointerTons3__respuestaRegistroCorreo(soap, (ns3__respuestaRegistroCorreo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__respuestaDesligueCorreo:
		soap_serialize_PointerTons3__respuestaDesligueCorreo(soap, (ns3__respuestaDesligueCorreo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__resultadoFrecuencia:
		soap_serialize_PointerTons3__resultadoFrecuencia(soap, (ns3__resultadoFrecuencia *const*)ptr);
		break;
	case SOAP_TYPE_PointerToshort:
		soap_serialize_PointerToshort(soap, (short *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__resultadoCandidato:
		soap_serialize_PointerTons3__resultadoCandidato(soap, (ns3__resultadoCandidato *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__messageEntity:
		soap_serialize_PointerTons3__messageEntity(soap, (ns3__messageEntity *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__dataConsultaCorreo:
		soap_serialize_PointerTons3__dataConsultaCorreo(soap, (ns3__dataConsultaCorreo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__validacionesEmail:
		soap_serialize_PointerTons3__validacionesEmail(soap, (ns3__validacionesEmail *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns2__entrada:
		return (void*)soap_instantiate_ns2__entrada(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		return (void*)soap_instantiate_ns3__validaSintaxisCorreoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		return (void*)soap_instantiate_ns3__validaSintaxisCorreoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validacionesEmail:
		return (void*)soap_instantiate_ns3__validacionesEmail(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		return (void*)soap_instantiate_ns3__consultaCorreoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		return (void*)soap_instantiate_ns3__consultaCorreoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		return (void*)soap_instantiate_ns3__dataConsultaCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		return (void*)soap_instantiate_ns3__validaCandidatoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		return (void*)soap_instantiate_ns3__validaCandidatoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__resultadoCandidato:
		return (void*)soap_instantiate_ns3__resultadoCandidato(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		return (void*)soap_instantiate_ns3__validarFrecuenciaRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		return (void*)soap_instantiate_ns3__validarFrecuenciaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		return (void*)soap_instantiate_ns3__resultadoFrecuencia(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		return (void*)soap_instantiate_ns3__desligueClienteCorreoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		return (void*)soap_instantiate_ns3__desliqueClienteCorreoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		return (void*)soap_instantiate_ns3__respuestaDesligueCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		return (void*)soap_instantiate_ns3__desligueClienteNumeroClienteRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		return (void*)soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__registroCorreoRequest:
		return (void*)soap_instantiate_ns3__registroCorreoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__registroCorreoResponse:
		return (void*)soap_instantiate_ns3__registroCorreoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		return (void*)soap_instantiate_ns3__respuestaRegistroCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		return (void*)soap_instantiate_ns3__registroCorreoBancoppelRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		return (void*)soap_instantiate_ns3__registroCorreoBancoppelResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		return (void*)soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		return (void*)soap_instantiate_ns3__bloqueEstadisticaRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__estadistica:
		return (void*)soap_instantiate_ns3__estadistica(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		return (void*)soap_instantiate_ns3__bloqueEstadisticaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		return (void*)soap_instantiate_ns3__retornoBloqueEstadistica(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		return (void*)soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		return (void*)soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		return (void*)soap_instantiate_ns3__dataConsultaPorNumeroCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		return (void*)soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		return (void*)soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		return (void*)soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		return (void*)soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__Indicador:
		return (void*)soap_instantiate_ns3__Indicador(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		return (void*)soap_instantiate_ns3__cierreEstadisticasRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		return (void*)soap_instantiate_ns3__cierreEstadisticasResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		return (void*)soap_instantiate_ns3__dataCierreEstadisticas(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		return (void*)soap_instantiate_ns3__insertaMovimientosRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		return (void*)soap_instantiate_ns3__insertaMovimientosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		return (void*)soap_instantiate_ns3__dataInsertaMovimientos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__messageEntity:
		return (void*)soap_instantiate_ns3__messageEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ServiceException:
		return (void*)soap_instantiate_ns3__ServiceException(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		return (void*)soap_instantiate_ns2__ConsultaClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ConsultaCliente:
		return (void*)soap_instantiate_ns2__ConsultaCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		return (void*)soap_instantiate_ns2__ConsultaEmpleadoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		return (void*)soap_instantiate_ns2__ConsultaEmpleado(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ClienteResponse:
		return (void*)soap_instantiate_ns2__ClienteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Cliente:
		return (void*)soap_instantiate_ns2__Cliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__EmpleadoResponse:
		return (void*)soap_instantiate_ns2__EmpleadoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Empleado:
		return (void*)soap_instantiate_ns2__Empleado(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__validaSintaxisCorreo:
		return (void*)soap_instantiate___ns3__validaSintaxisCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__consultaCorreo:
		return (void*)soap_instantiate___ns3__consultaCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__validaCandidato:
		return (void*)soap_instantiate___ns3__validaCandidato(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__validarFrecuencia:
		return (void*)soap_instantiate___ns3__validarFrecuencia(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__desligueClienteCorreo:
		return (void*)soap_instantiate___ns3__desligueClienteCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__desligueClienteNumeroCliente:
		return (void*)soap_instantiate___ns3__desligueClienteNumeroCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__registroCorreo:
		return (void*)soap_instantiate___ns3__registroCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__registroCorreoBancoppel:
		return (void*)soap_instantiate___ns3__registroCorreoBancoppel(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__bloqueEstadistica:
		return (void*)soap_instantiate___ns3__bloqueEstadistica(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente:
		return (void*)soap_instantiate___ns3__consultaCorreoPorNumeroCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__consultarIndicadoresPorCorreo:
		return (void*)soap_instantiate___ns3__consultarIndicadoresPorCorreo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente:
		return (void*)soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__cierreEstaditica:
		return (void*)soap_instantiate___ns3__cierreEstaditica(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__insertaMovimientos:
		return (void*)soap_instantiate___ns3__insertaMovimientos(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns2__entrada:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns2__entrada*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns2__entrada*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validaSintaxisCorreoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validaSintaxisCorreoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validaSintaxisCorreoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validaSintaxisCorreoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validacionesEmail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validacionesEmail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validacionesEmail*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultaCorreoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultaCorreoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultaCorreoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultaCorreoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__dataConsultaCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__dataConsultaCorreo*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validaCandidatoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validaCandidatoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validaCandidatoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validaCandidatoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__resultadoCandidato:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__resultadoCandidato*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__resultadoCandidato*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validarFrecuenciaRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validarFrecuenciaRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__validarFrecuenciaResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__validarFrecuenciaResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__resultadoFrecuencia*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__resultadoFrecuencia*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__desligueClienteCorreoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__desligueClienteCorreoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__desliqueClienteCorreoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__desliqueClienteCorreoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__respuestaDesligueCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__respuestaDesligueCorreo*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__desligueClienteNumeroClienteRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__desligueClienteNumeroClienteRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__desliqueClienteNumeroClienteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__desliqueClienteNumeroClienteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__registroCorreoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__registroCorreoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__registroCorreoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__registroCorreoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__registroCorreoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__registroCorreoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__respuestaRegistroCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__respuestaRegistroCorreo*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__registroCorreoBancoppelRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__registroCorreoBancoppelRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__registroCorreoBancoppelResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__registroCorreoBancoppelResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__respuestaRegistroCorreoBancoppel*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__respuestaRegistroCorreoBancoppel*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__bloqueEstadisticaRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__bloqueEstadisticaRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__estadistica:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__estadistica*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__estadistica*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__bloqueEstadisticaResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__bloqueEstadisticaResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__retornoBloqueEstadistica*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__retornoBloqueEstadistica*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultaCorreoPorNumeroClienteRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultaCorreoPorNumeroClienteRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultaCorreoPorNumeroClienteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultaCorreoPorNumeroClienteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__dataConsultaPorNumeroCliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__dataConsultaPorNumeroCliente*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultarIndicadoresPorCorreoRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultarIndicadoresPorCorreoRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultarIndicadoresPorCorreoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultarIndicadoresPorCorreoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultarIndicadoresPorNumeroClienteRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultarIndicadoresPorNumeroClienteRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__consultarIndicadoresPorNumeroClienteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__consultarIndicadoresPorNumeroClienteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__Indicador:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__Indicador*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__Indicador*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__cierreEstadisticasRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__cierreEstadisticasRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__cierreEstadisticasResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__cierreEstadisticasResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__dataCierreEstadisticas*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__dataCierreEstadisticas*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__insertaMovimientosRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__insertaMovimientosRequest*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__insertaMovimientosResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__insertaMovimientosResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__dataInsertaMovimientos*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__dataInsertaMovimientos*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__messageEntity:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__messageEntity*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__messageEntity*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__ServiceException:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__ServiceException*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__ServiceException*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__ConsultaClienteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__ConsultaClienteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__ConsultaCliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__ConsultaCliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__ConsultaCliente*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__ConsultaEmpleadoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__ConsultaEmpleadoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__ConsultaEmpleado*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__ConsultaEmpleado*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__ClienteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__ClienteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__ClienteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__Cliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__Cliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__Cliente*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__EmpleadoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__EmpleadoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__EmpleadoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__Empleado:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns2__Empleado*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns2__Empleado*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__validaSintaxisCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__validaSintaxisCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__validaSintaxisCorreo*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__consultaCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__consultaCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__consultaCorreo*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__validaCandidato:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__validaCandidato*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__validaCandidato*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__validarFrecuencia:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__validarFrecuencia*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__validarFrecuencia*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__desligueClienteCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__desligueClienteCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__desligueClienteCorreo*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__desligueClienteNumeroCliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__desligueClienteNumeroCliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__desligueClienteNumeroCliente*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__registroCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__registroCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__registroCorreo*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__registroCorreoBancoppel:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__registroCorreoBancoppel*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__registroCorreoBancoppel*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__bloqueEstadistica:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__bloqueEstadistica*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__bloqueEstadistica*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__consultaCorreoPorNumeroCliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__consultaCorreoPorNumeroCliente*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorCorreo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__consultarIndicadoresPorCorreo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__consultarIndicadoresPorCorreo*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__consultarIndicadoresPorNumeroCliente*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__consultarIndicadoresPorNumeroCliente*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__cierreEstaditica:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__cierreEstaditica*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__cierreEstaditica*>(p->ptr));
		break;
	case SOAP_TYPE___ns3__insertaMovimientos:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns3__insertaMovimientos*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns3__insertaMovimientos*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns2__entrada:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__entrada type=%d location=%p object=%p\n", t, p, q));
		*(ns2__entrada*)p = *(ns2__entrada*)q;
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validaSintaxisCorreoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validaSintaxisCorreoRequest*)p = *(ns3__validaSintaxisCorreoRequest*)q;
		break;
	case SOAP_TYPE_ns3__validaSintaxisCorreoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validaSintaxisCorreoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validaSintaxisCorreoResponse*)p = *(ns3__validaSintaxisCorreoResponse*)q;
		break;
	case SOAP_TYPE_ns3__validacionesEmail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validacionesEmail type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validacionesEmail*)p = *(ns3__validacionesEmail*)q;
		break;
	case SOAP_TYPE_ns3__consultaCorreoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultaCorreoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultaCorreoRequest*)p = *(ns3__consultaCorreoRequest*)q;
		break;
	case SOAP_TYPE_ns3__consultaCorreoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultaCorreoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultaCorreoResponse*)p = *(ns3__consultaCorreoResponse*)q;
		break;
	case SOAP_TYPE_ns3__dataConsultaCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__dataConsultaCorreo type=%d location=%p object=%p\n", t, p, q));
		*(ns3__dataConsultaCorreo*)p = *(ns3__dataConsultaCorreo*)q;
		break;
	case SOAP_TYPE_ns3__validaCandidatoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validaCandidatoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validaCandidatoRequest*)p = *(ns3__validaCandidatoRequest*)q;
		break;
	case SOAP_TYPE_ns3__validaCandidatoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validaCandidatoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validaCandidatoResponse*)p = *(ns3__validaCandidatoResponse*)q;
		break;
	case SOAP_TYPE_ns3__resultadoCandidato:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__resultadoCandidato type=%d location=%p object=%p\n", t, p, q));
		*(ns3__resultadoCandidato*)p = *(ns3__resultadoCandidato*)q;
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validarFrecuenciaRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validarFrecuenciaRequest*)p = *(ns3__validarFrecuenciaRequest*)q;
		break;
	case SOAP_TYPE_ns3__validarFrecuenciaResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__validarFrecuenciaResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__validarFrecuenciaResponse*)p = *(ns3__validarFrecuenciaResponse*)q;
		break;
	case SOAP_TYPE_ns3__resultadoFrecuencia:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__resultadoFrecuencia type=%d location=%p object=%p\n", t, p, q));
		*(ns3__resultadoFrecuencia*)p = *(ns3__resultadoFrecuencia*)q;
		break;
	case SOAP_TYPE_ns3__desligueClienteCorreoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__desligueClienteCorreoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__desligueClienteCorreoRequest*)p = *(ns3__desligueClienteCorreoRequest*)q;
		break;
	case SOAP_TYPE_ns3__desliqueClienteCorreoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__desliqueClienteCorreoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__desliqueClienteCorreoResponse*)p = *(ns3__desliqueClienteCorreoResponse*)q;
		break;
	case SOAP_TYPE_ns3__respuestaDesligueCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__respuestaDesligueCorreo type=%d location=%p object=%p\n", t, p, q));
		*(ns3__respuestaDesligueCorreo*)p = *(ns3__respuestaDesligueCorreo*)q;
		break;
	case SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__desligueClienteNumeroClienteRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__desligueClienteNumeroClienteRequest*)p = *(ns3__desligueClienteNumeroClienteRequest*)q;
		break;
	case SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__desliqueClienteNumeroClienteResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__desliqueClienteNumeroClienteResponse*)p = *(ns3__desliqueClienteNumeroClienteResponse*)q;
		break;
	case SOAP_TYPE_ns3__registroCorreoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__registroCorreoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__registroCorreoRequest*)p = *(ns3__registroCorreoRequest*)q;
		break;
	case SOAP_TYPE_ns3__registroCorreoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__registroCorreoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__registroCorreoResponse*)p = *(ns3__registroCorreoResponse*)q;
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__respuestaRegistroCorreo type=%d location=%p object=%p\n", t, p, q));
		*(ns3__respuestaRegistroCorreo*)p = *(ns3__respuestaRegistroCorreo*)q;
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__registroCorreoBancoppelRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__registroCorreoBancoppelRequest*)p = *(ns3__registroCorreoBancoppelRequest*)q;
		break;
	case SOAP_TYPE_ns3__registroCorreoBancoppelResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__registroCorreoBancoppelResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__registroCorreoBancoppelResponse*)p = *(ns3__registroCorreoBancoppelResponse*)q;
		break;
	case SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__respuestaRegistroCorreoBancoppel type=%d location=%p object=%p\n", t, p, q));
		*(ns3__respuestaRegistroCorreoBancoppel*)p = *(ns3__respuestaRegistroCorreoBancoppel*)q;
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__bloqueEstadisticaRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__bloqueEstadisticaRequest*)p = *(ns3__bloqueEstadisticaRequest*)q;
		break;
	case SOAP_TYPE_ns3__estadistica:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__estadistica type=%d location=%p object=%p\n", t, p, q));
		*(ns3__estadistica*)p = *(ns3__estadistica*)q;
		break;
	case SOAP_TYPE_ns3__bloqueEstadisticaResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__bloqueEstadisticaResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__bloqueEstadisticaResponse*)p = *(ns3__bloqueEstadisticaResponse*)q;
		break;
	case SOAP_TYPE_ns3__retornoBloqueEstadistica:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__retornoBloqueEstadistica type=%d location=%p object=%p\n", t, p, q));
		*(ns3__retornoBloqueEstadistica*)p = *(ns3__retornoBloqueEstadistica*)q;
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultaCorreoPorNumeroClienteRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultaCorreoPorNumeroClienteRequest*)p = *(ns3__consultaCorreoPorNumeroClienteRequest*)q;
		break;
	case SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultaCorreoPorNumeroClienteResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultaCorreoPorNumeroClienteResponse*)p = *(ns3__consultaCorreoPorNumeroClienteResponse*)q;
		break;
	case SOAP_TYPE_ns3__dataConsultaPorNumeroCliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__dataConsultaPorNumeroCliente type=%d location=%p object=%p\n", t, p, q));
		*(ns3__dataConsultaPorNumeroCliente*)p = *(ns3__dataConsultaPorNumeroCliente*)q;
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultarIndicadoresPorCorreoRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultarIndicadoresPorCorreoRequest*)p = *(ns3__consultarIndicadoresPorCorreoRequest*)q;
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultarIndicadoresPorCorreoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultarIndicadoresPorCorreoResponse*)p = *(ns3__consultarIndicadoresPorCorreoResponse*)q;
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultarIndicadoresPorNumeroClienteRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultarIndicadoresPorNumeroClienteRequest*)p = *(ns3__consultarIndicadoresPorNumeroClienteRequest*)q;
		break;
	case SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__consultarIndicadoresPorNumeroClienteResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__consultarIndicadoresPorNumeroClienteResponse*)p = *(ns3__consultarIndicadoresPorNumeroClienteResponse*)q;
		break;
	case SOAP_TYPE_ns3__Indicador:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__Indicador type=%d location=%p object=%p\n", t, p, q));
		*(ns3__Indicador*)p = *(ns3__Indicador*)q;
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__cierreEstadisticasRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__cierreEstadisticasRequest*)p = *(ns3__cierreEstadisticasRequest*)q;
		break;
	case SOAP_TYPE_ns3__cierreEstadisticasResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__cierreEstadisticasResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__cierreEstadisticasResponse*)p = *(ns3__cierreEstadisticasResponse*)q;
		break;
	case SOAP_TYPE_ns3__dataCierreEstadisticas:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__dataCierreEstadisticas type=%d location=%p object=%p\n", t, p, q));
		*(ns3__dataCierreEstadisticas*)p = *(ns3__dataCierreEstadisticas*)q;
		break;
	case SOAP_TYPE_ns3__insertaMovimientosRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__insertaMovimientosRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns3__insertaMovimientosRequest*)p = *(ns3__insertaMovimientosRequest*)q;
		break;
	case SOAP_TYPE_ns3__insertaMovimientosResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__insertaMovimientosResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns3__insertaMovimientosResponse*)p = *(ns3__insertaMovimientosResponse*)q;
		break;
	case SOAP_TYPE_ns3__dataInsertaMovimientos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__dataInsertaMovimientos type=%d location=%p object=%p\n", t, p, q));
		*(ns3__dataInsertaMovimientos*)p = *(ns3__dataInsertaMovimientos*)q;
		break;
	case SOAP_TYPE_ns3__messageEntity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__messageEntity type=%d location=%p object=%p\n", t, p, q));
		*(ns3__messageEntity*)p = *(ns3__messageEntity*)q;
		break;
	case SOAP_TYPE_ns3__ServiceException:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__ServiceException type=%d location=%p object=%p\n", t, p, q));
		*(ns3__ServiceException*)p = *(ns3__ServiceException*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE_ns2__ConsultaClienteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ConsultaClienteResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ConsultaClienteResponse*)p = *(struct ns2__ConsultaClienteResponse*)q;
		break;
	case SOAP_TYPE_ns2__ConsultaCliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ConsultaCliente type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ConsultaCliente*)p = *(struct ns2__ConsultaCliente*)q;
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleadoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ConsultaEmpleadoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ConsultaEmpleadoResponse*)p = *(struct ns2__ConsultaEmpleadoResponse*)q;
		break;
	case SOAP_TYPE_ns2__ConsultaEmpleado:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ConsultaEmpleado type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ConsultaEmpleado*)p = *(struct ns2__ConsultaEmpleado*)q;
		break;
	case SOAP_TYPE_ns2__ClienteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ClienteResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ClienteResponse*)p = *(struct ns2__ClienteResponse*)q;
		break;
	case SOAP_TYPE_ns2__Cliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__Cliente type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__Cliente*)p = *(struct ns2__Cliente*)q;
		break;
	case SOAP_TYPE_ns2__EmpleadoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__EmpleadoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__EmpleadoResponse*)p = *(struct ns2__EmpleadoResponse*)q;
		break;
	case SOAP_TYPE_ns2__Empleado:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__Empleado type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__Empleado*)p = *(struct ns2__Empleado*)q;
		break;
	case SOAP_TYPE___ns3__validaSintaxisCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__validaSintaxisCorreo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__validaSintaxisCorreo*)p = *(struct __ns3__validaSintaxisCorreo*)q;
		break;
	case SOAP_TYPE___ns3__consultaCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__consultaCorreo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__consultaCorreo*)p = *(struct __ns3__consultaCorreo*)q;
		break;
	case SOAP_TYPE___ns3__validaCandidato:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__validaCandidato type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__validaCandidato*)p = *(struct __ns3__validaCandidato*)q;
		break;
	case SOAP_TYPE___ns3__validarFrecuencia:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__validarFrecuencia type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__validarFrecuencia*)p = *(struct __ns3__validarFrecuencia*)q;
		break;
	case SOAP_TYPE___ns3__desligueClienteCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__desligueClienteCorreo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__desligueClienteCorreo*)p = *(struct __ns3__desligueClienteCorreo*)q;
		break;
	case SOAP_TYPE___ns3__desligueClienteNumeroCliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__desligueClienteNumeroCliente type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__desligueClienteNumeroCliente*)p = *(struct __ns3__desligueClienteNumeroCliente*)q;
		break;
	case SOAP_TYPE___ns3__registroCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__registroCorreo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__registroCorreo*)p = *(struct __ns3__registroCorreo*)q;
		break;
	case SOAP_TYPE___ns3__registroCorreoBancoppel:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__registroCorreoBancoppel type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__registroCorreoBancoppel*)p = *(struct __ns3__registroCorreoBancoppel*)q;
		break;
	case SOAP_TYPE___ns3__bloqueEstadistica:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__bloqueEstadistica type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__bloqueEstadistica*)p = *(struct __ns3__bloqueEstadistica*)q;
		break;
	case SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__consultaCorreoPorNumeroCliente type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__consultaCorreoPorNumeroCliente*)p = *(struct __ns3__consultaCorreoPorNumeroCliente*)q;
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorCorreo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__consultarIndicadoresPorCorreo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__consultarIndicadoresPorCorreo*)p = *(struct __ns3__consultarIndicadoresPorCorreo*)q;
		break;
	case SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__consultarIndicadoresPorNumeroCliente type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__consultarIndicadoresPorNumeroCliente*)p = *(struct __ns3__consultarIndicadoresPorNumeroCliente*)q;
		break;
	case SOAP_TYPE___ns3__cierreEstaditica:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__cierreEstaditica type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__cierreEstaditica*)p = *(struct __ns3__cierreEstaditica*)q;
		break;
	case SOAP_TYPE___ns3__insertaMovimientos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns3__insertaMovimientos type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns3__insertaMovimientos*)p = *(struct __ns3__insertaMovimientos*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return a;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n)
{
	short *a = static_cast<short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(short)));
	for (short *p = a; p && n--; ++p)
		soap_default_short(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_short(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns3__messageCode[] =
{	{ (LONG64)ns3__messageCode__SUCCESS, "SUCCESS" },
	{ (LONG64)ns3__messageCode__FAILED, "FAILED" },
	{ (LONG64)ns3__messageCode__ERROR, "ERROR" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__messageCode2s(struct soap *soap, enum ns3__messageCode n)
{	const char *s = soap_code_str(soap_codes_ns3__messageCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__messageCode(struct soap *soap, const char *tag, int id, const enum ns3__messageCode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__messageCode), type) || soap_send(soap, soap_ns3__messageCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__messageCode(struct soap *soap, const char *s, enum ns3__messageCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns3__messageCode, s);
	if (map)
		*a = (enum ns3__messageCode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum ns3__messageCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_in_ns3__messageCode(struct soap *soap, const char *tag, enum ns3__messageCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns3__messageCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__messageCode, sizeof(enum ns3__messageCode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns3__messageCode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns3__messageCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__messageCode, SOAP_TYPE_ns3__messageCode, sizeof(enum ns3__messageCode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_new_ns3__messageCode(struct soap *soap, int n)
{
	enum ns3__messageCode *a = static_cast<enum ns3__messageCode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns3__messageCode)));
	for (enum ns3__messageCode *p = a; p && n--; ++p)
		soap_default_ns3__messageCode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__messageCode(struct soap *soap, const enum ns3__messageCode *a, const char *tag, const char *type)
{
	if (soap_out_ns3__messageCode(soap, tag ? tag : "ns3:messageCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns3__messageCode * SOAP_FMAC4 soap_get_ns3__messageCode(struct soap *soap, enum ns3__messageCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__messageCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__ServiceException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__ServiceException::__sizeparam = 0;
	this->ns3__ServiceException::param = NULL;
	soap_default_string(soap, &this->ns3__ServiceException::key);
	soap_default_string(soap, &this->ns3__ServiceException::description);
	/* transient soap skipped */
}

void ns3__ServiceException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns3__ServiceException::param)
	{	int i;
		for (i = 0; i < (int)this->ns3__ServiceException::__sizeparam; i++)
		{
			soap_serialize_string(soap, (char*const*)(this->ns3__ServiceException::param + i));
		}
	}
	soap_serialize_string(soap, (char*const*)&this->ns3__ServiceException::key);
	soap_serialize_string(soap, (char*const*)&this->ns3__ServiceException::description);
#endif
}

int ns3__ServiceException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ServiceException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ServiceException(struct soap *soap, const char *tag, int id, const ns3__ServiceException *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ServiceException), type))
		return soap->error;
	if (a->ns3__ServiceException::param)
	{	int i;
		for (i = 0; i < (int)a->ns3__ServiceException::__sizeparam; i++)
			soap_out_string(soap, "param", -1, (char*const*)(a->ns3__ServiceException::param + i), "");
	}
	if (!a->ns3__ServiceException::key)
	{	if (soap_element_nil(soap, "key"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "key", -1, (char*const*)&a->ns3__ServiceException::key, ""))
		return soap->error;
	if (!a->ns3__ServiceException::description)
	{	if (soap_element_nil(soap, "description"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "description", -1, (char*const*)&a->ns3__ServiceException::description, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__ServiceException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ServiceException(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ServiceException * SOAP_FMAC4 soap_in_ns3__ServiceException(struct soap *soap, const char *tag, ns3__ServiceException *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ServiceException *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ServiceException, sizeof(ns3__ServiceException), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__ServiceException)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__ServiceException *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_param1 = NULL;
	size_t soap_flag_key1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "param", 1, NULL))
			{	if (a->ns3__ServiceException::param == NULL)
				{	if (soap_blist_param1 == NULL)
						soap_blist_param1 = soap_alloc_block(soap);
					a->ns3__ServiceException::param = (char **)soap_push_block_max(soap, soap_blist_param1, sizeof(char *));
					if (a->ns3__ServiceException::param == NULL)
						return NULL;
					*a->ns3__ServiceException::param = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "param", (char**)a->ns3__ServiceException::param, "xsd:string"))
				{	a->ns3__ServiceException::__sizeparam++;
					a->ns3__ServiceException::param = NULL;
					continue;
				}
			}
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "key", (char**)&a->ns3__ServiceException::key, "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "description", (char**)&a->ns3__ServiceException::description, "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns3__ServiceException::param)
			soap_pop_block(soap, soap_blist_param1);
		if (a->ns3__ServiceException::__sizeparam)
		{	a->ns3__ServiceException::param = (char **)soap_save_block(soap, soap_blist_param1, NULL, 1);
		}
		else
		{	a->ns3__ServiceException::param = NULL;
			if (soap_blist_param1)
				soap_end_block(soap, soap_blist_param1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key1 > 0 || soap_flag_description1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__ServiceException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ServiceException, SOAP_TYPE_ns3__ServiceException, sizeof(ns3__ServiceException), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__ServiceException * SOAP_FMAC2 soap_instantiate_ns3__ServiceException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ServiceException(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__ServiceException *p;
	size_t k = sizeof(ns3__ServiceException);
	if (n < 0)
	{	p = SOAP_NEW(ns3__ServiceException);
		if (p)
			((ns3__ServiceException*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__ServiceException, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__ServiceException*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__ServiceException location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__ServiceException, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__ServiceException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__ServiceException(soap, tag ? tag : "ns3:ServiceException", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__ServiceException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ServiceException(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ServiceException * SOAP_FMAC4 soap_get_ns3__ServiceException(struct soap *soap, ns3__ServiceException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ServiceException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__messageEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__messageEntity::mensajeOperador);
	soap_default_string(soap, &this->ns3__messageEntity::mensajeCliente);
	/* transient soap skipped */
}

void ns3__messageEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__messageEntity::mensajeOperador);
	soap_serialize_string(soap, (char*const*)&this->ns3__messageEntity::mensajeCliente);
#endif
}

int ns3__messageEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__messageEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__messageEntity(struct soap *soap, const char *tag, int id, const ns3__messageEntity *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__messageEntity), type))
		return soap->error;
	if (soap_out_string(soap, "mensajeOperador", -1, (char*const*)&a->ns3__messageEntity::mensajeOperador, ""))
		return soap->error;
	if (soap_out_string(soap, "mensajeCliente", -1, (char*const*)&a->ns3__messageEntity::mensajeCliente, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__messageEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__messageEntity(soap, tag, this, type);
}

SOAP_FMAC3 ns3__messageEntity * SOAP_FMAC4 soap_in_ns3__messageEntity(struct soap *soap, const char *tag, ns3__messageEntity *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__messageEntity *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__messageEntity, sizeof(ns3__messageEntity), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__messageEntity)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__messageEntity *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_mensajeOperador1 = 1;
	size_t soap_flag_mensajeCliente1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mensajeOperador1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "mensajeOperador", (char**)&a->ns3__messageEntity::mensajeOperador, "xsd:string"))
				{	soap_flag_mensajeOperador1--;
					continue;
				}
			}
			if (soap_flag_mensajeCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "mensajeCliente", (char**)&a->ns3__messageEntity::mensajeCliente, "xsd:string"))
				{	soap_flag_mensajeCliente1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__messageEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__messageEntity, SOAP_TYPE_ns3__messageEntity, sizeof(ns3__messageEntity), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__messageEntity * SOAP_FMAC2 soap_instantiate_ns3__messageEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__messageEntity(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__messageEntity *p;
	size_t k = sizeof(ns3__messageEntity);
	if (n < 0)
	{	p = SOAP_NEW(ns3__messageEntity);
		if (p)
			((ns3__messageEntity*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__messageEntity, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__messageEntity*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__messageEntity location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__messageEntity, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__messageEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__messageEntity(soap, tag ? tag : "ns3:messageEntity", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__messageEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__messageEntity(soap, this, tag, type);
}

SOAP_FMAC3 ns3__messageEntity * SOAP_FMAC4 soap_get_ns3__messageEntity(struct soap *soap, ns3__messageEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__messageEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__dataInsertaMovimientos::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__dataInsertaMovimientos::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__dataInsertaMovimientos::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__dataInsertaMovimientos::messageEntity);
#endif
}

int ns3__dataInsertaMovimientos::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__dataInsertaMovimientos(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataInsertaMovimientos(struct soap *soap, const char *tag, int id, const ns3__dataInsertaMovimientos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__dataInsertaMovimientos), type))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__dataInsertaMovimientos::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__dataInsertaMovimientos::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__dataInsertaMovimientos(soap, tag, this, type);
}

SOAP_FMAC3 ns3__dataInsertaMovimientos * SOAP_FMAC4 soap_in_ns3__dataInsertaMovimientos(struct soap *soap, const char *tag, ns3__dataInsertaMovimientos *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__dataInsertaMovimientos *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__dataInsertaMovimientos, sizeof(ns3__dataInsertaMovimientos), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__dataInsertaMovimientos)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__dataInsertaMovimientos *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__dataInsertaMovimientos::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__dataInsertaMovimientos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__dataInsertaMovimientos, SOAP_TYPE_ns3__dataInsertaMovimientos, sizeof(ns3__dataInsertaMovimientos), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__dataInsertaMovimientos * SOAP_FMAC2 soap_instantiate_ns3__dataInsertaMovimientos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__dataInsertaMovimientos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__dataInsertaMovimientos *p;
	size_t k = sizeof(ns3__dataInsertaMovimientos);
	if (n < 0)
	{	p = SOAP_NEW(ns3__dataInsertaMovimientos);
		if (p)
			((ns3__dataInsertaMovimientos*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__dataInsertaMovimientos, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__dataInsertaMovimientos*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__dataInsertaMovimientos location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__dataInsertaMovimientos, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__dataInsertaMovimientos::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__dataInsertaMovimientos(soap, tag ? tag : "ns3:dataInsertaMovimientos", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__dataInsertaMovimientos::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__dataInsertaMovimientos(soap, this, tag, type);
}

SOAP_FMAC3 ns3__dataInsertaMovimientos * SOAP_FMAC4 soap_get_ns3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__dataInsertaMovimientos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__insertaMovimientosResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__insertaMovimientosResponse::code);
	soap_default_string(soap, &this->ns3__insertaMovimientosResponse::message);
	this->ns3__insertaMovimientosResponse::dataInsertaMovimientos = NULL;
	/* transient soap skipped */
}

void ns3__insertaMovimientosResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__insertaMovimientosResponse::message);
	soap_serialize_PointerTons3__dataInsertaMovimientos(soap, &this->ns3__insertaMovimientosResponse::dataInsertaMovimientos);
#endif
}

int ns3__insertaMovimientosResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__insertaMovimientosResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__insertaMovimientosResponse(struct soap *soap, const char *tag, int id, const ns3__insertaMovimientosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__insertaMovimientosResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__insertaMovimientosResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__insertaMovimientosResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__dataInsertaMovimientos(soap, "dataInsertaMovimientos", -1, &a->ns3__insertaMovimientosResponse::dataInsertaMovimientos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__insertaMovimientosResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__insertaMovimientosResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__insertaMovimientosResponse * SOAP_FMAC4 soap_in_ns3__insertaMovimientosResponse(struct soap *soap, const char *tag, ns3__insertaMovimientosResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__insertaMovimientosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__insertaMovimientosResponse, sizeof(ns3__insertaMovimientosResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__insertaMovimientosResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__insertaMovimientosResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_dataInsertaMovimientos1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__insertaMovimientosResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__insertaMovimientosResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_dataInsertaMovimientos1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__dataInsertaMovimientos(soap, "dataInsertaMovimientos", &a->ns3__insertaMovimientosResponse::dataInsertaMovimientos, "ns3:dataInsertaMovimientos"))
				{	soap_flag_dataInsertaMovimientos1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__insertaMovimientosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__insertaMovimientosResponse, SOAP_TYPE_ns3__insertaMovimientosResponse, sizeof(ns3__insertaMovimientosResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__insertaMovimientosResponse * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__insertaMovimientosResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__insertaMovimientosResponse *p;
	size_t k = sizeof(ns3__insertaMovimientosResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__insertaMovimientosResponse);
		if (p)
			((ns3__insertaMovimientosResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__insertaMovimientosResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__insertaMovimientosResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__insertaMovimientosResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__insertaMovimientosResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__insertaMovimientosResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__insertaMovimientosResponse(soap, tag ? tag : "ns3:insertaMovimientosResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__insertaMovimientosResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__insertaMovimientosResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__insertaMovimientosResponse * SOAP_FMAC4 soap_get_ns3__insertaMovimientosResponse(struct soap *soap, ns3__insertaMovimientosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__insertaMovimientosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__insertaMovimientosRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__insertaMovimientosRequest::iduRegistroCorreo);
	soap_default_string(soap, &this->ns3__insertaMovimientosRequest::iduProceso);
	soap_default_string(soap, &this->ns3__insertaMovimientosRequest::json);
	/* transient soap skipped */
}

void ns3__insertaMovimientosRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__insertaMovimientosRequest::iduRegistroCorreo);
	soap_serialize_string(soap, (char*const*)&this->ns3__insertaMovimientosRequest::iduProceso);
	soap_serialize_string(soap, (char*const*)&this->ns3__insertaMovimientosRequest::json);
#endif
}

int ns3__insertaMovimientosRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__insertaMovimientosRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__insertaMovimientosRequest(struct soap *soap, const char *tag, int id, const ns3__insertaMovimientosRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__insertaMovimientosRequest), type))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroCorreo", -1, (char*const*)&a->ns3__insertaMovimientosRequest::iduRegistroCorreo, ""))
		return soap->error;
	if (soap_out_string(soap, "iduProceso", -1, (char*const*)&a->ns3__insertaMovimientosRequest::iduProceso, ""))
		return soap->error;
	if (soap_out_string(soap, "json", -1, (char*const*)&a->ns3__insertaMovimientosRequest::json, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__insertaMovimientosRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__insertaMovimientosRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__insertaMovimientosRequest * SOAP_FMAC4 soap_in_ns3__insertaMovimientosRequest(struct soap *soap, const char *tag, ns3__insertaMovimientosRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__insertaMovimientosRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__insertaMovimientosRequest, sizeof(ns3__insertaMovimientosRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__insertaMovimientosRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__insertaMovimientosRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_iduRegistroCorreo1 = 1;
	size_t soap_flag_iduProceso1 = 1;
	size_t soap_flag_json1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_iduRegistroCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroCorreo", (char**)&a->ns3__insertaMovimientosRequest::iduRegistroCorreo, "xsd:string"))
				{	soap_flag_iduRegistroCorreo1--;
					continue;
				}
			}
			if (soap_flag_iduProceso1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduProceso", (char**)&a->ns3__insertaMovimientosRequest::iduProceso, "xsd:string"))
				{	soap_flag_iduProceso1--;
					continue;
				}
			}
			if (soap_flag_json1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "json", (char**)&a->ns3__insertaMovimientosRequest::json, "xsd:string"))
				{	soap_flag_json1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__insertaMovimientosRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__insertaMovimientosRequest, SOAP_TYPE_ns3__insertaMovimientosRequest, sizeof(ns3__insertaMovimientosRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__insertaMovimientosRequest * SOAP_FMAC2 soap_instantiate_ns3__insertaMovimientosRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__insertaMovimientosRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__insertaMovimientosRequest *p;
	size_t k = sizeof(ns3__insertaMovimientosRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__insertaMovimientosRequest);
		if (p)
			((ns3__insertaMovimientosRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__insertaMovimientosRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__insertaMovimientosRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__insertaMovimientosRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__insertaMovimientosRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__insertaMovimientosRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__insertaMovimientosRequest(soap, tag ? tag : "ns3:insertaMovimientosRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__insertaMovimientosRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__insertaMovimientosRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__insertaMovimientosRequest * SOAP_FMAC4 soap_get_ns3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__insertaMovimientosRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__dataCierreEstadisticas::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__dataCierreEstadisticas::iduPlantilla = NULL;
	soap_default_string(soap, &this->ns3__dataCierreEstadisticas::trigger);
	this->ns3__dataCierreEstadisticas::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__dataCierreEstadisticas::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__dataCierreEstadisticas::iduPlantilla);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataCierreEstadisticas::trigger);
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__dataCierreEstadisticas::messageEntity);
#endif
}

int ns3__dataCierreEstadisticas::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__dataCierreEstadisticas(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataCierreEstadisticas(struct soap *soap, const char *tag, int id, const ns3__dataCierreEstadisticas *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__dataCierreEstadisticas), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "iduPlantilla", -1, &a->ns3__dataCierreEstadisticas::iduPlantilla, ""))
		return soap->error;
	if (soap_out_string(soap, "trigger", -1, (char*const*)&a->ns3__dataCierreEstadisticas::trigger, ""))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__dataCierreEstadisticas::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__dataCierreEstadisticas::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__dataCierreEstadisticas(soap, tag, this, type);
}

SOAP_FMAC3 ns3__dataCierreEstadisticas * SOAP_FMAC4 soap_in_ns3__dataCierreEstadisticas(struct soap *soap, const char *tag, ns3__dataCierreEstadisticas *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__dataCierreEstadisticas *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__dataCierreEstadisticas, sizeof(ns3__dataCierreEstadisticas), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__dataCierreEstadisticas)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__dataCierreEstadisticas *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_iduPlantilla1 = 1;
	size_t soap_flag_trigger1 = 1;
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_iduPlantilla1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "iduPlantilla", &a->ns3__dataCierreEstadisticas::iduPlantilla, "xsd:int"))
				{	soap_flag_iduPlantilla1--;
					continue;
				}
			}
			if (soap_flag_trigger1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "trigger", (char**)&a->ns3__dataCierreEstadisticas::trigger, "xsd:string"))
				{	soap_flag_trigger1--;
					continue;
				}
			}
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__dataCierreEstadisticas::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__dataCierreEstadisticas *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__dataCierreEstadisticas, SOAP_TYPE_ns3__dataCierreEstadisticas, sizeof(ns3__dataCierreEstadisticas), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__dataCierreEstadisticas * SOAP_FMAC2 soap_instantiate_ns3__dataCierreEstadisticas(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__dataCierreEstadisticas(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__dataCierreEstadisticas *p;
	size_t k = sizeof(ns3__dataCierreEstadisticas);
	if (n < 0)
	{	p = SOAP_NEW(ns3__dataCierreEstadisticas);
		if (p)
			((ns3__dataCierreEstadisticas*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__dataCierreEstadisticas, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__dataCierreEstadisticas*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__dataCierreEstadisticas location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__dataCierreEstadisticas, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__dataCierreEstadisticas::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__dataCierreEstadisticas(soap, tag ? tag : "ns3:dataCierreEstadisticas", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__dataCierreEstadisticas::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__dataCierreEstadisticas(soap, this, tag, type);
}

SOAP_FMAC3 ns3__dataCierreEstadisticas * SOAP_FMAC4 soap_get_ns3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__dataCierreEstadisticas(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__cierreEstadisticasResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__cierreEstadisticasResponse::code);
	soap_default_string(soap, &this->ns3__cierreEstadisticasResponse::message);
	this->ns3__cierreEstadisticasResponse::dataCierreEstadisticas = NULL;
	/* transient soap skipped */
}

void ns3__cierreEstadisticasResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__cierreEstadisticasResponse::message);
	soap_serialize_PointerTons3__dataCierreEstadisticas(soap, &this->ns3__cierreEstadisticasResponse::dataCierreEstadisticas);
#endif
}

int ns3__cierreEstadisticasResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__cierreEstadisticasResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__cierreEstadisticasResponse(struct soap *soap, const char *tag, int id, const ns3__cierreEstadisticasResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__cierreEstadisticasResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__cierreEstadisticasResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__cierreEstadisticasResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__dataCierreEstadisticas(soap, "dataCierreEstadisticas", -1, &a->ns3__cierreEstadisticasResponse::dataCierreEstadisticas, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__cierreEstadisticasResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__cierreEstadisticasResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__cierreEstadisticasResponse * SOAP_FMAC4 soap_in_ns3__cierreEstadisticasResponse(struct soap *soap, const char *tag, ns3__cierreEstadisticasResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__cierreEstadisticasResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__cierreEstadisticasResponse, sizeof(ns3__cierreEstadisticasResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__cierreEstadisticasResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__cierreEstadisticasResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_dataCierreEstadisticas1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__cierreEstadisticasResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__cierreEstadisticasResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_dataCierreEstadisticas1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__dataCierreEstadisticas(soap, "dataCierreEstadisticas", &a->ns3__cierreEstadisticasResponse::dataCierreEstadisticas, "ns3:dataCierreEstadisticas"))
				{	soap_flag_dataCierreEstadisticas1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__cierreEstadisticasResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__cierreEstadisticasResponse, SOAP_TYPE_ns3__cierreEstadisticasResponse, sizeof(ns3__cierreEstadisticasResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__cierreEstadisticasResponse * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__cierreEstadisticasResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__cierreEstadisticasResponse *p;
	size_t k = sizeof(ns3__cierreEstadisticasResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__cierreEstadisticasResponse);
		if (p)
			((ns3__cierreEstadisticasResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__cierreEstadisticasResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__cierreEstadisticasResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__cierreEstadisticasResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__cierreEstadisticasResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__cierreEstadisticasResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__cierreEstadisticasResponse(soap, tag ? tag : "ns3:cierreEstadisticasResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__cierreEstadisticasResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__cierreEstadisticasResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__cierreEstadisticasResponse * SOAP_FMAC4 soap_get_ns3__cierreEstadisticasResponse(struct soap *soap, ns3__cierreEstadisticasResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__cierreEstadisticasResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__cierreEstadisticasRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__cierreEstadisticasRequest::iduRegistroEstadistica);
	soap_default_string(soap, &this->ns3__cierreEstadisticasRequest::iduRegistroCorreo);
	soap_default_string(soap, &this->ns3__cierreEstadisticasRequest::correo);
	/* transient soap skipped */
}

void ns3__cierreEstadisticasRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__cierreEstadisticasRequest::iduRegistroEstadistica);
	soap_serialize_string(soap, (char*const*)&this->ns3__cierreEstadisticasRequest::iduRegistroCorreo);
	soap_serialize_string(soap, (char*const*)&this->ns3__cierreEstadisticasRequest::correo);
#endif
}

int ns3__cierreEstadisticasRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__cierreEstadisticasRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__cierreEstadisticasRequest(struct soap *soap, const char *tag, int id, const ns3__cierreEstadisticasRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__cierreEstadisticasRequest), type))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__cierreEstadisticasRequest::iduRegistroEstadistica, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroCorreo", -1, (char*const*)&a->ns3__cierreEstadisticasRequest::iduRegistroCorreo, ""))
		return soap->error;
	if (soap_out_string(soap, "correo", -1, (char*const*)&a->ns3__cierreEstadisticasRequest::correo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__cierreEstadisticasRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__cierreEstadisticasRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__cierreEstadisticasRequest * SOAP_FMAC4 soap_in_ns3__cierreEstadisticasRequest(struct soap *soap, const char *tag, ns3__cierreEstadisticasRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__cierreEstadisticasRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__cierreEstadisticasRequest, sizeof(ns3__cierreEstadisticasRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__cierreEstadisticasRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__cierreEstadisticasRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	size_t soap_flag_iduRegistroCorreo1 = 1;
	size_t soap_flag_correo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__cierreEstadisticasRequest::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroCorreo", (char**)&a->ns3__cierreEstadisticasRequest::iduRegistroCorreo, "xsd:string"))
				{	soap_flag_iduRegistroCorreo1--;
					continue;
				}
			}
			if (soap_flag_correo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "correo", (char**)&a->ns3__cierreEstadisticasRequest::correo, "xsd:string"))
				{	soap_flag_correo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__cierreEstadisticasRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__cierreEstadisticasRequest, SOAP_TYPE_ns3__cierreEstadisticasRequest, sizeof(ns3__cierreEstadisticasRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__cierreEstadisticasRequest * SOAP_FMAC2 soap_instantiate_ns3__cierreEstadisticasRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__cierreEstadisticasRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__cierreEstadisticasRequest *p;
	size_t k = sizeof(ns3__cierreEstadisticasRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__cierreEstadisticasRequest);
		if (p)
			((ns3__cierreEstadisticasRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__cierreEstadisticasRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__cierreEstadisticasRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__cierreEstadisticasRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__cierreEstadisticasRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__cierreEstadisticasRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__cierreEstadisticasRequest(soap, tag ? tag : "ns3:cierreEstadisticasRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__cierreEstadisticasRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__cierreEstadisticasRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__cierreEstadisticasRequest * SOAP_FMAC4 soap_get_ns3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__cierreEstadisticasRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__Indicador::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__Indicador::nombre);
	this->ns3__Indicador::valor = NULL;
	/* transient soap skipped */
}

void ns3__Indicador::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__Indicador::nombre);
	soap_serialize_PointerToint(soap, &this->ns3__Indicador::valor);
#endif
}

int ns3__Indicador::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__Indicador(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Indicador(struct soap *soap, const char *tag, int id, const ns3__Indicador *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__Indicador), type))
		return soap->error;
	if (soap_out_string(soap, "nombre", -1, (char*const*)&a->ns3__Indicador::nombre, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "valor", -1, &a->ns3__Indicador::valor, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__Indicador::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__Indicador(soap, tag, this, type);
}

SOAP_FMAC3 ns3__Indicador * SOAP_FMAC4 soap_in_ns3__Indicador(struct soap *soap, const char *tag, ns3__Indicador *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__Indicador *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__Indicador, sizeof(ns3__Indicador), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__Indicador)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__Indicador *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_nombre1 = 1;
	size_t soap_flag_valor1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nombre1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "nombre", (char**)&a->ns3__Indicador::nombre, "xsd:string"))
				{	soap_flag_nombre1--;
					continue;
				}
			}
			if (soap_flag_valor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "valor", &a->ns3__Indicador::valor, "xsd:int"))
				{	soap_flag_valor1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__Indicador *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__Indicador, SOAP_TYPE_ns3__Indicador, sizeof(ns3__Indicador), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__Indicador * SOAP_FMAC2 soap_instantiate_ns3__Indicador(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__Indicador(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__Indicador *p;
	size_t k = sizeof(ns3__Indicador);
	if (n < 0)
	{	p = SOAP_NEW(ns3__Indicador);
		if (p)
			((ns3__Indicador*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__Indicador, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__Indicador*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__Indicador location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__Indicador, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__Indicador::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__Indicador(soap, tag ? tag : "ns3:Indicador", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__Indicador::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__Indicador(soap, this, tag, type);
}

SOAP_FMAC3 ns3__Indicador * SOAP_FMAC4 soap_get_ns3__Indicador(struct soap *soap, ns3__Indicador *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__Indicador(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultarIndicadoresPorNumeroClienteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__consultarIndicadoresPorNumeroClienteResponse::code);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorNumeroClienteResponse::message);
	this->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo = 0;
	this->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = NULL;
	/* transient soap skipped */
}

void ns3__consultarIndicadoresPorNumeroClienteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorNumeroClienteResponse::message);
	if (this->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo)
	{	int i;
		for (i = 0; i < (int)this->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo; i++)
		{
			soap_serialize_PointerTons3__Indicador(soap, this->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo + i);
		}
	}
#endif
}

int ns3__consultarIndicadoresPorNumeroClienteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, const char *tag, int id, const ns3__consultarIndicadoresPorNumeroClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__consultarIndicadoresPorNumeroClienteResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__consultarIndicadoresPorNumeroClienteResponse::message, ""))
		return soap->error;
	if (a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo)
	{	int i;
		for (i = 0; i < (int)a->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo; i++)
			if (soap_out_PointerTons3__Indicador(soap, "IndicadoresCorreo", -1, a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns3__consultarIndicadoresPorNumeroClienteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorNumeroClienteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultarIndicadoresPorNumeroClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse, sizeof(ns3__consultarIndicadoresPorNumeroClienteResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultarIndicadoresPorNumeroClienteResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	struct soap_blist *soap_blist_IndicadoresCorreo1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__consultarIndicadoresPorNumeroClienteResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__consultarIndicadoresPorNumeroClienteResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "IndicadoresCorreo", 1, NULL))
			{	if (a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo == NULL)
				{	if (soap_blist_IndicadoresCorreo1 == NULL)
						soap_blist_IndicadoresCorreo1 = soap_alloc_block(soap);
					a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = (ns3__Indicador **)soap_push_block_max(soap, soap_blist_IndicadoresCorreo1, sizeof(ns3__Indicador *));
					if (a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo == NULL)
						return NULL;
					*a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons3__Indicador(soap, "IndicadoresCorreo", a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo, "ns3:Indicador"))
				{	a->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo++;
					a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo)
			soap_pop_block(soap, soap_blist_IndicadoresCorreo1);
		if (a->ns3__consultarIndicadoresPorNumeroClienteResponse::__sizeIndicadoresCorreo)
		{	a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = (ns3__Indicador **)soap_save_block(soap, soap_blist_IndicadoresCorreo1, NULL, 1);
		}
		else
		{	a->ns3__consultarIndicadoresPorNumeroClienteResponse::IndicadoresCorreo = NULL;
			if (soap_blist_IndicadoresCorreo1)
				soap_end_block(soap, soap_blist_IndicadoresCorreo1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__consultarIndicadoresPorNumeroClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse, sizeof(ns3__consultarIndicadoresPorNumeroClienteResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultarIndicadoresPorNumeroClienteResponse *p;
	size_t k = sizeof(ns3__consultarIndicadoresPorNumeroClienteResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultarIndicadoresPorNumeroClienteResponse);
		if (p)
			((ns3__consultarIndicadoresPorNumeroClienteResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultarIndicadoresPorNumeroClienteResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultarIndicadoresPorNumeroClienteResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultarIndicadoresPorNumeroClienteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultarIndicadoresPorNumeroClienteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, tag ? tag : "ns3:consultarIndicadoresPorNumeroClienteResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultarIndicadoresPorNumeroClienteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorNumeroClienteResponse(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultarIndicadoresPorNumeroClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultarIndicadoresPorNumeroClienteRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorNumeroClienteRequest::numCliente);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorNumeroClienteRequest::adicional);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorNumeroClienteRequest::origen);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorNumeroClienteRequest::subOrigen);
	/* transient soap skipped */
}

void ns3__consultarIndicadoresPorNumeroClienteRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorNumeroClienteRequest::numCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorNumeroClienteRequest::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorNumeroClienteRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorNumeroClienteRequest::subOrigen);
#endif
}

int ns3__consultarIndicadoresPorNumeroClienteRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *tag, int id, const ns3__consultarIndicadoresPorNumeroClienteRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest), type))
		return soap->error;
	if (soap_out_string(soap, "numCliente", -1, (char*const*)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::numCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::subOrigen, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultarIndicadoresPorNumeroClienteRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorNumeroClienteRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultarIndicadoresPorNumeroClienteRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, sizeof(ns3__consultarIndicadoresPorNumeroClienteRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultarIndicadoresPorNumeroClienteRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_numCliente1 = 1;
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numCliente", (char**)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::numCliente, "xsd:string"))
				{	soap_flag_numCliente1--;
					continue;
				}
			}
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__consultarIndicadoresPorNumeroClienteRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__consultarIndicadoresPorNumeroClienteRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, sizeof(ns3__consultarIndicadoresPorNumeroClienteRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultarIndicadoresPorNumeroClienteRequest *p;
	size_t k = sizeof(ns3__consultarIndicadoresPorNumeroClienteRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultarIndicadoresPorNumeroClienteRequest);
		if (p)
			((ns3__consultarIndicadoresPorNumeroClienteRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultarIndicadoresPorNumeroClienteRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultarIndicadoresPorNumeroClienteRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultarIndicadoresPorNumeroClienteRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultarIndicadoresPorNumeroClienteRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, tag ? tag : "ns3:consultarIndicadoresPorNumeroClienteRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultarIndicadoresPorNumeroClienteRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultarIndicadoresPorCorreoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__consultarIndicadoresPorCorreoResponse::code);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorCorreoResponse::message);
	this->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo = 0;
	this->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = NULL;
	/* transient soap skipped */
}

void ns3__consultarIndicadoresPorCorreoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorCorreoResponse::message);
	if (this->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo)
	{	int i;
		for (i = 0; i < (int)this->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo; i++)
		{
			soap_serialize_PointerTons3__Indicador(soap, this->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo + i);
		}
	}
#endif
}

int ns3__consultarIndicadoresPorCorreoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultarIndicadoresPorCorreoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, const char *tag, int id, const ns3__consultarIndicadoresPorCorreoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__consultarIndicadoresPorCorreoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__consultarIndicadoresPorCorreoResponse::message, ""))
		return soap->error;
	if (a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo)
	{	int i;
		for (i = 0; i < (int)a->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo; i++)
			if (soap_out_PointerTons3__Indicador(soap, "IndicadoresCorreo", -1, a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns3__consultarIndicadoresPorCorreoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultarIndicadoresPorCorreoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorCorreoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultarIndicadoresPorCorreoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse, sizeof(ns3__consultarIndicadoresPorCorreoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultarIndicadoresPorCorreoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	struct soap_blist *soap_blist_IndicadoresCorreo1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__consultarIndicadoresPorCorreoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__consultarIndicadoresPorCorreoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "IndicadoresCorreo", 1, NULL))
			{	if (a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo == NULL)
				{	if (soap_blist_IndicadoresCorreo1 == NULL)
						soap_blist_IndicadoresCorreo1 = soap_alloc_block(soap);
					a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = (ns3__Indicador **)soap_push_block_max(soap, soap_blist_IndicadoresCorreo1, sizeof(ns3__Indicador *));
					if (a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo == NULL)
						return NULL;
					*a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons3__Indicador(soap, "IndicadoresCorreo", a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo, "ns3:Indicador"))
				{	a->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo++;
					a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo)
			soap_pop_block(soap, soap_blist_IndicadoresCorreo1);
		if (a->ns3__consultarIndicadoresPorCorreoResponse::__sizeIndicadoresCorreo)
		{	a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = (ns3__Indicador **)soap_save_block(soap, soap_blist_IndicadoresCorreo1, NULL, 1);
		}
		else
		{	a->ns3__consultarIndicadoresPorCorreoResponse::IndicadoresCorreo = NULL;
			if (soap_blist_IndicadoresCorreo1)
				soap_end_block(soap, soap_blist_IndicadoresCorreo1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__consultarIndicadoresPorCorreoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse, sizeof(ns3__consultarIndicadoresPorCorreoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultarIndicadoresPorCorreoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultarIndicadoresPorCorreoResponse *p;
	size_t k = sizeof(ns3__consultarIndicadoresPorCorreoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultarIndicadoresPorCorreoResponse);
		if (p)
			((ns3__consultarIndicadoresPorCorreoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultarIndicadoresPorCorreoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultarIndicadoresPorCorreoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultarIndicadoresPorCorreoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultarIndicadoresPorCorreoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultarIndicadoresPorCorreoResponse(soap, tag ? tag : "ns3:consultarIndicadoresPorCorreoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultarIndicadoresPorCorreoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultarIndicadoresPorCorreoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoResponse * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorCorreoResponse(struct soap *soap, ns3__consultarIndicadoresPorCorreoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultarIndicadoresPorCorreoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultarIndicadoresPorCorreoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorCorreoRequest::email);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorCorreoRequest::origen);
	soap_default_string(soap, &this->ns3__consultarIndicadoresPorCorreoRequest::subOrigen);
	/* transient soap skipped */
}

void ns3__consultarIndicadoresPorCorreoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorCorreoRequest::email);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorCorreoRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultarIndicadoresPorCorreoRequest::subOrigen);
#endif
}

int ns3__consultarIndicadoresPorCorreoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultarIndicadoresPorCorreoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *tag, int id, const ns3__consultarIndicadoresPorCorreoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "email", -1, (char*const*)&a->ns3__consultarIndicadoresPorCorreoRequest::email, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__consultarIndicadoresPorCorreoRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__consultarIndicadoresPorCorreoRequest::subOrigen, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultarIndicadoresPorCorreoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultarIndicadoresPorCorreoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC4 soap_in_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorCorreoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultarIndicadoresPorCorreoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, sizeof(ns3__consultarIndicadoresPorCorreoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultarIndicadoresPorCorreoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_email1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "email", (char**)&a->ns3__consultarIndicadoresPorCorreoRequest::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__consultarIndicadoresPorCorreoRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__consultarIndicadoresPorCorreoRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__consultarIndicadoresPorCorreoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, sizeof(ns3__consultarIndicadoresPorCorreoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultarIndicadoresPorCorreoRequest *p;
	size_t k = sizeof(ns3__consultarIndicadoresPorCorreoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultarIndicadoresPorCorreoRequest);
		if (p)
			((ns3__consultarIndicadoresPorCorreoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultarIndicadoresPorCorreoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultarIndicadoresPorCorreoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultarIndicadoresPorCorreoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultarIndicadoresPorCorreoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultarIndicadoresPorCorreoRequest(soap, tag ? tag : "ns3:consultarIndicadoresPorCorreoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultarIndicadoresPorCorreoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultarIndicadoresPorCorreoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest * SOAP_FMAC4 soap_get_ns3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultarIndicadoresPorCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__dataConsultaPorNumeroCliente::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__dataConsultaPorNumeroCliente::respuesta = NULL;
	soap_default_string(soap, &this->ns3__dataConsultaPorNumeroCliente::correo);
	soap_default_string(soap, &this->ns3__dataConsultaPorNumeroCliente::iduRegistroCorreo);
	soap_default_string(soap, &this->ns3__dataConsultaPorNumeroCliente::flagCuenta);
	soap_default_string(soap, &this->ns3__dataConsultaPorNumeroCliente::flagEstatus);
	soap_default_string(soap, &this->ns3__dataConsultaPorNumeroCliente::iduRegistroActivacion);
	this->ns3__dataConsultaPorNumeroCliente::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__dataConsultaPorNumeroCliente::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__dataConsultaPorNumeroCliente::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaPorNumeroCliente::correo);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaPorNumeroCliente::iduRegistroCorreo);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaPorNumeroCliente::flagCuenta);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaPorNumeroCliente::flagEstatus);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaPorNumeroCliente::iduRegistroActivacion);
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__dataConsultaPorNumeroCliente::messageEntity);
#endif
}

int ns3__dataConsultaPorNumeroCliente::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__dataConsultaPorNumeroCliente(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataConsultaPorNumeroCliente(struct soap *soap, const char *tag, int id, const ns3__dataConsultaPorNumeroCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "respuesta", -1, &a->ns3__dataConsultaPorNumeroCliente::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "correo", -1, (char*const*)&a->ns3__dataConsultaPorNumeroCliente::correo, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroCorreo", -1, (char*const*)&a->ns3__dataConsultaPorNumeroCliente::iduRegistroCorreo, ""))
		return soap->error;
	if (soap_out_string(soap, "flagCuenta", -1, (char*const*)&a->ns3__dataConsultaPorNumeroCliente::flagCuenta, ""))
		return soap->error;
	if (soap_out_string(soap, "flagEstatus", -1, (char*const*)&a->ns3__dataConsultaPorNumeroCliente::flagEstatus, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroActivacion", -1, (char*const*)&a->ns3__dataConsultaPorNumeroCliente::iduRegistroActivacion, ""))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__dataConsultaPorNumeroCliente::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__dataConsultaPorNumeroCliente::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__dataConsultaPorNumeroCliente(soap, tag, this, type);
}

SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC4 soap_in_ns3__dataConsultaPorNumeroCliente(struct soap *soap, const char *tag, ns3__dataConsultaPorNumeroCliente *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__dataConsultaPorNumeroCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, sizeof(ns3__dataConsultaPorNumeroCliente), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__dataConsultaPorNumeroCliente)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__dataConsultaPorNumeroCliente *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_correo1 = 1;
	size_t soap_flag_iduRegistroCorreo1 = 1;
	size_t soap_flag_flagCuenta1 = 1;
	size_t soap_flag_flagEstatus1 = 1;
	size_t soap_flag_iduRegistroActivacion1 = 1;
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_respuesta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "respuesta", &a->ns3__dataConsultaPorNumeroCliente::respuesta, "xsd:int"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_correo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "correo", (char**)&a->ns3__dataConsultaPorNumeroCliente::correo, "xsd:string"))
				{	soap_flag_correo1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroCorreo", (char**)&a->ns3__dataConsultaPorNumeroCliente::iduRegistroCorreo, "xsd:string"))
				{	soap_flag_iduRegistroCorreo1--;
					continue;
				}
			}
			if (soap_flag_flagCuenta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagCuenta", (char**)&a->ns3__dataConsultaPorNumeroCliente::flagCuenta, "xsd:string"))
				{	soap_flag_flagCuenta1--;
					continue;
				}
			}
			if (soap_flag_flagEstatus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagEstatus", (char**)&a->ns3__dataConsultaPorNumeroCliente::flagEstatus, "xsd:string"))
				{	soap_flag_flagEstatus1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroActivacion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroActivacion", (char**)&a->ns3__dataConsultaPorNumeroCliente::iduRegistroActivacion, "xsd:string"))
				{	soap_flag_iduRegistroActivacion1--;
					continue;
				}
			}
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__dataConsultaPorNumeroCliente::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__dataConsultaPorNumeroCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, sizeof(ns3__dataConsultaPorNumeroCliente), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaPorNumeroCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__dataConsultaPorNumeroCliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__dataConsultaPorNumeroCliente *p;
	size_t k = sizeof(ns3__dataConsultaPorNumeroCliente);
	if (n < 0)
	{	p = SOAP_NEW(ns3__dataConsultaPorNumeroCliente);
		if (p)
			((ns3__dataConsultaPorNumeroCliente*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__dataConsultaPorNumeroCliente, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__dataConsultaPorNumeroCliente*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__dataConsultaPorNumeroCliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__dataConsultaPorNumeroCliente::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__dataConsultaPorNumeroCliente(soap, tag ? tag : "ns3:dataConsultaPorNumeroCliente", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__dataConsultaPorNumeroCliente::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__dataConsultaPorNumeroCliente(soap, this, tag, type);
}

SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente * SOAP_FMAC4 soap_get_ns3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__dataConsultaPorNumeroCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultaCorreoPorNumeroClienteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__consultaCorreoPorNumeroClienteResponse::code);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteResponse::message);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteResponse::respuesta);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteResponse::data);
	this->ns3__consultaCorreoPorNumeroClienteResponse::dataConsultaPorNumeroCliente = NULL;
	/* transient soap skipped */
}

void ns3__consultaCorreoPorNumeroClienteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteResponse::message);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteResponse::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteResponse::data);
	soap_serialize_PointerTons3__dataConsultaPorNumeroCliente(soap, &this->ns3__consultaCorreoPorNumeroClienteResponse::dataConsultaPorNumeroCliente);
#endif
}

int ns3__consultaCorreoPorNumeroClienteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultaCorreoPorNumeroClienteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, const char *tag, int id, const ns3__consultaCorreoPorNumeroClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__consultaCorreoPorNumeroClienteResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteResponse::message, ""))
		return soap->error;
	if (soap_out_string(soap, "respuesta", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteResponse::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "data", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteResponse::data, ""))
		return soap->error;
	if (soap_out_PointerTons3__dataConsultaPorNumeroCliente(soap, "dataConsultaPorNumeroCliente", -1, &a->ns3__consultaCorreoPorNumeroClienteResponse::dataConsultaPorNumeroCliente, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultaCorreoPorNumeroClienteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultaCorreoPorNumeroClienteResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, const char *tag, ns3__consultaCorreoPorNumeroClienteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultaCorreoPorNumeroClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse, sizeof(ns3__consultaCorreoPorNumeroClienteResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultaCorreoPorNumeroClienteResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_data1 = 1;
	size_t soap_flag_dataConsultaPorNumeroCliente1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__consultaCorreoPorNumeroClienteResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__consultaCorreoPorNumeroClienteResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_respuesta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "respuesta", (char**)&a->ns3__consultaCorreoPorNumeroClienteResponse::respuesta, "xsd:string"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_data1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "data", (char**)&a->ns3__consultaCorreoPorNumeroClienteResponse::data, "xsd:string"))
				{	soap_flag_data1--;
					continue;
				}
			}
			if (soap_flag_dataConsultaPorNumeroCliente1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__dataConsultaPorNumeroCliente(soap, "dataConsultaPorNumeroCliente", &a->ns3__consultaCorreoPorNumeroClienteResponse::dataConsultaPorNumeroCliente, "ns3:dataConsultaPorNumeroCliente"))
				{	soap_flag_dataConsultaPorNumeroCliente1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__consultaCorreoPorNumeroClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse, sizeof(ns3__consultaCorreoPorNumeroClienteResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultaCorreoPorNumeroClienteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultaCorreoPorNumeroClienteResponse *p;
	size_t k = sizeof(ns3__consultaCorreoPorNumeroClienteResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultaCorreoPorNumeroClienteResponse);
		if (p)
			((ns3__consultaCorreoPorNumeroClienteResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultaCorreoPorNumeroClienteResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultaCorreoPorNumeroClienteResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultaCorreoPorNumeroClienteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultaCorreoPorNumeroClienteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultaCorreoPorNumeroClienteResponse(soap, tag ? tag : "ns3:consultaCorreoPorNumeroClienteResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultaCorreoPorNumeroClienteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultaCorreoPorNumeroClienteResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__consultaCorreoPorNumeroClienteResponse(struct soap *soap, ns3__consultaCorreoPorNumeroClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultaCorreoPorNumeroClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultaCorreoPorNumeroClienteRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteRequest::numeroCliente);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteRequest::numeroAdicional);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteRequest::origen);
	soap_default_string(soap, &this->ns3__consultaCorreoPorNumeroClienteRequest::subOrigen);
	/* transient soap skipped */
}

void ns3__consultaCorreoPorNumeroClienteRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteRequest::numeroCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteRequest::numeroAdicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoPorNumeroClienteRequest::subOrigen);
#endif
}

int ns3__consultaCorreoPorNumeroClienteRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultaCorreoPorNumeroClienteRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *tag, int id, const ns3__consultaCorreoPorNumeroClienteRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest), type))
		return soap->error;
	if (soap_out_string(soap, "numeroCliente", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteRequest::numeroCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroAdicional", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteRequest::numeroAdicional, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__consultaCorreoPorNumeroClienteRequest::subOrigen, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultaCorreoPorNumeroClienteRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultaCorreoPorNumeroClienteRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *tag, ns3__consultaCorreoPorNumeroClienteRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultaCorreoPorNumeroClienteRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, sizeof(ns3__consultaCorreoPorNumeroClienteRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultaCorreoPorNumeroClienteRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_numeroCliente1 = 1;
	size_t soap_flag_numeroAdicional1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numeroCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCliente", (char**)&a->ns3__consultaCorreoPorNumeroClienteRequest::numeroCliente, "xsd:string"))
				{	soap_flag_numeroCliente1--;
					continue;
				}
			}
			if (soap_flag_numeroAdicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroAdicional", (char**)&a->ns3__consultaCorreoPorNumeroClienteRequest::numeroAdicional, "xsd:string"))
				{	soap_flag_numeroAdicional1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__consultaCorreoPorNumeroClienteRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__consultaCorreoPorNumeroClienteRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__consultaCorreoPorNumeroClienteRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, sizeof(ns3__consultaCorreoPorNumeroClienteRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultaCorreoPorNumeroClienteRequest *p;
	size_t k = sizeof(ns3__consultaCorreoPorNumeroClienteRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultaCorreoPorNumeroClienteRequest);
		if (p)
			((ns3__consultaCorreoPorNumeroClienteRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultaCorreoPorNumeroClienteRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultaCorreoPorNumeroClienteRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultaCorreoPorNumeroClienteRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultaCorreoPorNumeroClienteRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultaCorreoPorNumeroClienteRequest(soap, tag ? tag : "ns3:consultaCorreoPorNumeroClienteRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultaCorreoPorNumeroClienteRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultaCorreoPorNumeroClienteRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultaCorreoPorNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__retornoBloqueEstadistica::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__retornoBloqueEstadistica::datoRegresa = NULL;
	/* transient soap skipped */
}

void ns3__retornoBloqueEstadistica::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__retornoBloqueEstadistica::datoRegresa);
#endif
}

int ns3__retornoBloqueEstadistica::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__retornoBloqueEstadistica(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__retornoBloqueEstadistica(struct soap *soap, const char *tag, int id, const ns3__retornoBloqueEstadistica *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__retornoBloqueEstadistica), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "datoRegresa", -1, &a->ns3__retornoBloqueEstadistica::datoRegresa, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__retornoBloqueEstadistica::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__retornoBloqueEstadistica(soap, tag, this, type);
}

SOAP_FMAC3 ns3__retornoBloqueEstadistica * SOAP_FMAC4 soap_in_ns3__retornoBloqueEstadistica(struct soap *soap, const char *tag, ns3__retornoBloqueEstadistica *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__retornoBloqueEstadistica *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__retornoBloqueEstadistica, sizeof(ns3__retornoBloqueEstadistica), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__retornoBloqueEstadistica)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__retornoBloqueEstadistica *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_datoRegresa1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_datoRegresa1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "datoRegresa", &a->ns3__retornoBloqueEstadistica::datoRegresa, "xsd:int"))
				{	soap_flag_datoRegresa1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__retornoBloqueEstadistica *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__retornoBloqueEstadistica, SOAP_TYPE_ns3__retornoBloqueEstadistica, sizeof(ns3__retornoBloqueEstadistica), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__retornoBloqueEstadistica * SOAP_FMAC2 soap_instantiate_ns3__retornoBloqueEstadistica(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__retornoBloqueEstadistica(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__retornoBloqueEstadistica *p;
	size_t k = sizeof(ns3__retornoBloqueEstadistica);
	if (n < 0)
	{	p = SOAP_NEW(ns3__retornoBloqueEstadistica);
		if (p)
			((ns3__retornoBloqueEstadistica*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__retornoBloqueEstadistica, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__retornoBloqueEstadistica*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__retornoBloqueEstadistica location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__retornoBloqueEstadistica, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__retornoBloqueEstadistica::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__retornoBloqueEstadistica(soap, tag ? tag : "ns3:retornoBloqueEstadistica", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__retornoBloqueEstadistica::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__retornoBloqueEstadistica(soap, this, tag, type);
}

SOAP_FMAC3 ns3__retornoBloqueEstadistica * SOAP_FMAC4 soap_get_ns3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__retornoBloqueEstadistica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__bloqueEstadisticaResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__bloqueEstadisticaResponse::code);
	soap_default_string(soap, &this->ns3__bloqueEstadisticaResponse::message);
	this->ns3__bloqueEstadisticaResponse::retornoBloqueEstadistica = NULL;
	/* transient soap skipped */
}

void ns3__bloqueEstadisticaResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__bloqueEstadisticaResponse::message);
	soap_serialize_PointerTons3__retornoBloqueEstadistica(soap, &this->ns3__bloqueEstadisticaResponse::retornoBloqueEstadistica);
#endif
}

int ns3__bloqueEstadisticaResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__bloqueEstadisticaResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__bloqueEstadisticaResponse(struct soap *soap, const char *tag, int id, const ns3__bloqueEstadisticaResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__bloqueEstadisticaResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__bloqueEstadisticaResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__bloqueEstadisticaResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__retornoBloqueEstadistica(soap, "retornoBloqueEstadistica", -1, &a->ns3__bloqueEstadisticaResponse::retornoBloqueEstadistica, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__bloqueEstadisticaResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__bloqueEstadisticaResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__bloqueEstadisticaResponse * SOAP_FMAC4 soap_in_ns3__bloqueEstadisticaResponse(struct soap *soap, const char *tag, ns3__bloqueEstadisticaResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__bloqueEstadisticaResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__bloqueEstadisticaResponse, sizeof(ns3__bloqueEstadisticaResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__bloqueEstadisticaResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__bloqueEstadisticaResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_retornoBloqueEstadistica1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__bloqueEstadisticaResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__bloqueEstadisticaResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_retornoBloqueEstadistica1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__retornoBloqueEstadistica(soap, "retornoBloqueEstadistica", &a->ns3__bloqueEstadisticaResponse::retornoBloqueEstadistica, "ns3:retornoBloqueEstadistica"))
				{	soap_flag_retornoBloqueEstadistica1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__bloqueEstadisticaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__bloqueEstadisticaResponse, SOAP_TYPE_ns3__bloqueEstadisticaResponse, sizeof(ns3__bloqueEstadisticaResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__bloqueEstadisticaResponse * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__bloqueEstadisticaResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__bloqueEstadisticaResponse *p;
	size_t k = sizeof(ns3__bloqueEstadisticaResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__bloqueEstadisticaResponse);
		if (p)
			((ns3__bloqueEstadisticaResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__bloqueEstadisticaResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__bloqueEstadisticaResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__bloqueEstadisticaResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__bloqueEstadisticaResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__bloqueEstadisticaResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__bloqueEstadisticaResponse(soap, tag ? tag : "ns3:bloqueEstadisticaResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__bloqueEstadisticaResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__bloqueEstadisticaResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__bloqueEstadisticaResponse * SOAP_FMAC4 soap_get_ns3__bloqueEstadisticaResponse(struct soap *soap, ns3__bloqueEstadisticaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__bloqueEstadisticaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__estadistica::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__estadistica::division);
	soap_default_string(soap, &this->ns3__estadistica::email);
	soap_default_string(soap, &this->ns3__estadistica::genero);
	soap_default_string(soap, &this->ns3__estadistica::region);
	soap_default_string(soap, &this->ns3__estadistica::fechaOportunidad);
	soap_default_string(soap, &this->ns3__estadistica::adicional);
	soap_default_string(soap, &this->ns3__estadistica::captura);
	soap_default_string(soap, &this->ns3__estadistica::centro);
	soap_default_string(soap, &this->ns3__estadistica::numCliente);
	soap_default_string(soap, &this->ns3__estadistica::numEmpleado);
	soap_default_string(soap, &this->ns3__estadistica::oportunidad);
	soap_default_string(soap, &this->ns3__estadistica::origen);
	soap_default_string(soap, &this->ns3__estadistica::sintaxis);
	soap_default_string(soap, &this->ns3__estadistica::strikeIron);
	soap_default_string(soap, &this->ns3__estadistica::tipoCliente);
	soap_default_string(soap, &this->ns3__estadistica::zona);
	/* transient soap skipped */
}

void ns3__estadistica::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::division);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::email);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::genero);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::region);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::fechaOportunidad);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::captura);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::centro);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::numCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::numEmpleado);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::oportunidad);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::sintaxis);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::strikeIron);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::tipoCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__estadistica::zona);
#endif
}

int ns3__estadistica::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__estadistica(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__estadistica(struct soap *soap, const char *tag, int id, const ns3__estadistica *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__estadistica), type))
		return soap->error;
	if (soap_out_string(soap, "division", -1, (char*const*)&a->ns3__estadistica::division, ""))
		return soap->error;
	if (soap_out_string(soap, "email", -1, (char*const*)&a->ns3__estadistica::email, ""))
		return soap->error;
	if (soap_out_string(soap, "genero", -1, (char*const*)&a->ns3__estadistica::genero, ""))
		return soap->error;
	if (soap_out_string(soap, "region", -1, (char*const*)&a->ns3__estadistica::region, ""))
		return soap->error;
	if (soap_out_string(soap, "fechaOportunidad", -1, (char*const*)&a->ns3__estadistica::fechaOportunidad, ""))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__estadistica::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "captura", -1, (char*const*)&a->ns3__estadistica::captura, ""))
		return soap->error;
	if (soap_out_string(soap, "centro", -1, (char*const*)&a->ns3__estadistica::centro, ""))
		return soap->error;
	if (soap_out_string(soap, "numCliente", -1, (char*const*)&a->ns3__estadistica::numCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "numEmpleado", -1, (char*const*)&a->ns3__estadistica::numEmpleado, ""))
		return soap->error;
	if (soap_out_string(soap, "oportunidad", -1, (char*const*)&a->ns3__estadistica::oportunidad, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__estadistica::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "sintaxis", -1, (char*const*)&a->ns3__estadistica::sintaxis, ""))
		return soap->error;
	if (soap_out_string(soap, "strikeIron", -1, (char*const*)&a->ns3__estadistica::strikeIron, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoCliente", -1, (char*const*)&a->ns3__estadistica::tipoCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "zona", -1, (char*const*)&a->ns3__estadistica::zona, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__estadistica::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__estadistica(soap, tag, this, type);
}

SOAP_FMAC3 ns3__estadistica * SOAP_FMAC4 soap_in_ns3__estadistica(struct soap *soap, const char *tag, ns3__estadistica *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__estadistica *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__estadistica, sizeof(ns3__estadistica), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__estadistica)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__estadistica *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_division1 = 1;
	size_t soap_flag_email1 = 1;
	size_t soap_flag_genero1 = 1;
	size_t soap_flag_region1 = 1;
	size_t soap_flag_fechaOportunidad1 = 1;
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_captura1 = 1;
	size_t soap_flag_centro1 = 1;
	size_t soap_flag_numCliente1 = 1;
	size_t soap_flag_numEmpleado1 = 1;
	size_t soap_flag_oportunidad1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_sintaxis1 = 1;
	size_t soap_flag_strikeIron1 = 1;
	size_t soap_flag_tipoCliente1 = 1;
	size_t soap_flag_zona1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_division1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "division", (char**)&a->ns3__estadistica::division, "xsd:string"))
				{	soap_flag_division1--;
					continue;
				}
			}
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "email", (char**)&a->ns3__estadistica::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap_flag_genero1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "genero", (char**)&a->ns3__estadistica::genero, "xsd:string"))
				{	soap_flag_genero1--;
					continue;
				}
			}
			if (soap_flag_region1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "region", (char**)&a->ns3__estadistica::region, "xsd:string"))
				{	soap_flag_region1--;
					continue;
				}
			}
			if (soap_flag_fechaOportunidad1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "fechaOportunidad", (char**)&a->ns3__estadistica::fechaOportunidad, "xsd:string"))
				{	soap_flag_fechaOportunidad1--;
					continue;
				}
			}
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__estadistica::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_captura1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "captura", (char**)&a->ns3__estadistica::captura, "xsd:string"))
				{	soap_flag_captura1--;
					continue;
				}
			}
			if (soap_flag_centro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "centro", (char**)&a->ns3__estadistica::centro, "xsd:string"))
				{	soap_flag_centro1--;
					continue;
				}
			}
			if (soap_flag_numCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numCliente", (char**)&a->ns3__estadistica::numCliente, "xsd:string"))
				{	soap_flag_numCliente1--;
					continue;
				}
			}
			if (soap_flag_numEmpleado1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numEmpleado", (char**)&a->ns3__estadistica::numEmpleado, "xsd:string"))
				{	soap_flag_numEmpleado1--;
					continue;
				}
			}
			if (soap_flag_oportunidad1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "oportunidad", (char**)&a->ns3__estadistica::oportunidad, "xsd:string"))
				{	soap_flag_oportunidad1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__estadistica::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_sintaxis1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "sintaxis", (char**)&a->ns3__estadistica::sintaxis, "xsd:string"))
				{	soap_flag_sintaxis1--;
					continue;
				}
			}
			if (soap_flag_strikeIron1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "strikeIron", (char**)&a->ns3__estadistica::strikeIron, "xsd:string"))
				{	soap_flag_strikeIron1--;
					continue;
				}
			}
			if (soap_flag_tipoCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "tipoCliente", (char**)&a->ns3__estadistica::tipoCliente, "xsd:string"))
				{	soap_flag_tipoCliente1--;
					continue;
				}
			}
			if (soap_flag_zona1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "zona", (char**)&a->ns3__estadistica::zona, "xsd:string"))
				{	soap_flag_zona1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__estadistica *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__estadistica, SOAP_TYPE_ns3__estadistica, sizeof(ns3__estadistica), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__estadistica * SOAP_FMAC2 soap_instantiate_ns3__estadistica(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__estadistica(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__estadistica *p;
	size_t k = sizeof(ns3__estadistica);
	if (n < 0)
	{	p = SOAP_NEW(ns3__estadistica);
		if (p)
			((ns3__estadistica*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__estadistica, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__estadistica*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__estadistica location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__estadistica, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__estadistica::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__estadistica(soap, tag ? tag : "ns3:estadistica", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__estadistica::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__estadistica(soap, this, tag, type);
}

SOAP_FMAC3 ns3__estadistica * SOAP_FMAC4 soap_get_ns3__estadistica(struct soap *soap, ns3__estadistica *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__estadistica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__bloqueEstadisticaRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__bloqueEstadisticaRequest::estadistica = NULL;
	/* transient soap skipped */
}

void ns3__bloqueEstadisticaRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__estadistica(soap, &this->ns3__bloqueEstadisticaRequest::estadistica);
#endif
}

int ns3__bloqueEstadisticaRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__bloqueEstadisticaRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__bloqueEstadisticaRequest(struct soap *soap, const char *tag, int id, const ns3__bloqueEstadisticaRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__bloqueEstadisticaRequest), type))
		return soap->error;
	if (soap_out_PointerTons3__estadistica(soap, "estadistica", -1, &a->ns3__bloqueEstadisticaRequest::estadistica, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__bloqueEstadisticaRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__bloqueEstadisticaRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__bloqueEstadisticaRequest * SOAP_FMAC4 soap_in_ns3__bloqueEstadisticaRequest(struct soap *soap, const char *tag, ns3__bloqueEstadisticaRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__bloqueEstadisticaRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__bloqueEstadisticaRequest, sizeof(ns3__bloqueEstadisticaRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__bloqueEstadisticaRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__bloqueEstadisticaRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_estadistica1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_estadistica1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__estadistica(soap, "estadistica", &a->ns3__bloqueEstadisticaRequest::estadistica, "ns3:estadistica"))
				{	soap_flag_estadistica1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__bloqueEstadisticaRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__bloqueEstadisticaRequest, SOAP_TYPE_ns3__bloqueEstadisticaRequest, sizeof(ns3__bloqueEstadisticaRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__bloqueEstadisticaRequest * SOAP_FMAC2 soap_instantiate_ns3__bloqueEstadisticaRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__bloqueEstadisticaRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__bloqueEstadisticaRequest *p;
	size_t k = sizeof(ns3__bloqueEstadisticaRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__bloqueEstadisticaRequest);
		if (p)
			((ns3__bloqueEstadisticaRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__bloqueEstadisticaRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__bloqueEstadisticaRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__bloqueEstadisticaRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__bloqueEstadisticaRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__bloqueEstadisticaRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__bloqueEstadisticaRequest(soap, tag ? tag : "ns3:bloqueEstadisticaRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__bloqueEstadisticaRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__bloqueEstadisticaRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__bloqueEstadisticaRequest * SOAP_FMAC4 soap_get_ns3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__bloqueEstadisticaRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__respuestaRegistroCorreoBancoppel::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__respuestaRegistroCorreoBancoppel::respuesta = NULL;
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreoBancoppel::mensaje);
	this->ns3__respuestaRegistroCorreoBancoppel::tipoRegistro = NULL;
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreoBancoppel::clienteCoppel);
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreoBancoppel::clienteBancoppel);
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreoBancoppel::correo);
	/* transient soap skipped */
}

void ns3__respuestaRegistroCorreoBancoppel::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__respuestaRegistroCorreoBancoppel::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreoBancoppel::mensaje);
	soap_serialize_PointerToint(soap, &this->ns3__respuestaRegistroCorreoBancoppel::tipoRegistro);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreoBancoppel::clienteCoppel);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreoBancoppel::clienteBancoppel);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreoBancoppel::correo);
#endif
}

int ns3__respuestaRegistroCorreoBancoppel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__respuestaRegistroCorreoBancoppel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, int id, const ns3__respuestaRegistroCorreoBancoppel *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "respuesta", -1, &a->ns3__respuestaRegistroCorreoBancoppel::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "mensaje", -1, (char*const*)&a->ns3__respuestaRegistroCorreoBancoppel::mensaje, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tipoRegistro", -1, &a->ns3__respuestaRegistroCorreoBancoppel::tipoRegistro, ""))
		return soap->error;
	if (soap_out_string(soap, "clienteCoppel", -1, (char*const*)&a->ns3__respuestaRegistroCorreoBancoppel::clienteCoppel, ""))
		return soap->error;
	if (soap_out_string(soap, "clienteBancoppel", -1, (char*const*)&a->ns3__respuestaRegistroCorreoBancoppel::clienteBancoppel, ""))
		return soap->error;
	if (soap_out_string(soap, "correo", -1, (char*const*)&a->ns3__respuestaRegistroCorreoBancoppel::correo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__respuestaRegistroCorreoBancoppel::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__respuestaRegistroCorreoBancoppel(soap, tag, this, type);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC4 soap_in_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, ns3__respuestaRegistroCorreoBancoppel *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__respuestaRegistroCorreoBancoppel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, sizeof(ns3__respuestaRegistroCorreoBancoppel), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__respuestaRegistroCorreoBancoppel *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_mensaje1 = 1;
	size_t soap_flag_tipoRegistro1 = 1;
	size_t soap_flag_clienteCoppel1 = 1;
	size_t soap_flag_clienteBancoppel1 = 1;
	size_t soap_flag_correo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_respuesta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "respuesta", &a->ns3__respuestaRegistroCorreoBancoppel::respuesta, "xsd:int"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_mensaje1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "mensaje", (char**)&a->ns3__respuestaRegistroCorreoBancoppel::mensaje, "xsd:string"))
				{	soap_flag_mensaje1--;
					continue;
				}
			}
			if (soap_flag_tipoRegistro1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "tipoRegistro", &a->ns3__respuestaRegistroCorreoBancoppel::tipoRegistro, "xsd:int"))
				{	soap_flag_tipoRegistro1--;
					continue;
				}
			}
			if (soap_flag_clienteCoppel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "clienteCoppel", (char**)&a->ns3__respuestaRegistroCorreoBancoppel::clienteCoppel, "xsd:string"))
				{	soap_flag_clienteCoppel1--;
					continue;
				}
			}
			if (soap_flag_clienteBancoppel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "clienteBancoppel", (char**)&a->ns3__respuestaRegistroCorreoBancoppel::clienteBancoppel, "xsd:string"))
				{	soap_flag_clienteBancoppel1--;
					continue;
				}
			}
			if (soap_flag_correo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "correo", (char**)&a->ns3__respuestaRegistroCorreoBancoppel::correo, "xsd:string"))
				{	soap_flag_correo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__respuestaRegistroCorreoBancoppel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, sizeof(ns3__respuestaRegistroCorreoBancoppel), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__respuestaRegistroCorreoBancoppel *p;
	size_t k = sizeof(ns3__respuestaRegistroCorreoBancoppel);
	if (n < 0)
	{	p = SOAP_NEW(ns3__respuestaRegistroCorreoBancoppel);
		if (p)
			((ns3__respuestaRegistroCorreoBancoppel*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__respuestaRegistroCorreoBancoppel, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__respuestaRegistroCorreoBancoppel*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__respuestaRegistroCorreoBancoppel location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__respuestaRegistroCorreoBancoppel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__respuestaRegistroCorreoBancoppel(soap, tag ? tag : "ns3:respuestaRegistroCorreoBancoppel", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__respuestaRegistroCorreoBancoppel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__respuestaRegistroCorreoBancoppel(soap, this, tag, type);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel * SOAP_FMAC4 soap_get_ns3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__respuestaRegistroCorreoBancoppel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__registroCorreoBancoppelResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__registroCorreoBancoppelResponse::code);
	soap_default_string(soap, &this->ns3__registroCorreoBancoppelResponse::message);
	this->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList = 0;
	this->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = NULL;
	/* transient soap skipped */
}

void ns3__registroCorreoBancoppelResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoBancoppelResponse::message);
	if (this->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList)
	{	int i;
		for (i = 0; i < (int)this->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList; i++)
		{
			soap_serialize_PointerTons3__respuestaRegistroCorreoBancoppel(soap, this->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList + i);
		}
	}
#endif
}

int ns3__registroCorreoBancoppelResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__registroCorreoBancoppelResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoBancoppelResponse(struct soap *soap, const char *tag, int id, const ns3__registroCorreoBancoppelResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__registroCorreoBancoppelResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__registroCorreoBancoppelResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__registroCorreoBancoppelResponse::message, ""))
		return soap->error;
	if (a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList)
	{	int i;
		for (i = 0; i < (int)a->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList; i++)
			if (soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(soap, "respuestaRegistroCorreoList", -1, a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns3__registroCorreoBancoppelResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__registroCorreoBancoppelResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelResponse * SOAP_FMAC4 soap_in_ns3__registroCorreoBancoppelResponse(struct soap *soap, const char *tag, ns3__registroCorreoBancoppelResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__registroCorreoBancoppelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__registroCorreoBancoppelResponse, sizeof(ns3__registroCorreoBancoppelResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__registroCorreoBancoppelResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__registroCorreoBancoppelResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	struct soap_blist *soap_blist_respuestaRegistroCorreoList1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__registroCorreoBancoppelResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__registroCorreoBancoppelResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "respuestaRegistroCorreoList", 1, NULL))
			{	if (a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList == NULL)
				{	if (soap_blist_respuestaRegistroCorreoList1 == NULL)
						soap_blist_respuestaRegistroCorreoList1 = soap_alloc_block(soap);
					a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = (ns3__respuestaRegistroCorreoBancoppel **)soap_push_block_max(soap, soap_blist_respuestaRegistroCorreoList1, sizeof(ns3__respuestaRegistroCorreoBancoppel *));
					if (a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList == NULL)
						return NULL;
					*a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(soap, "respuestaRegistroCorreoList", a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList, "ns3:respuestaRegistroCorreoBancoppel"))
				{	a->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList++;
					a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList)
			soap_pop_block(soap, soap_blist_respuestaRegistroCorreoList1);
		if (a->ns3__registroCorreoBancoppelResponse::__sizerespuestaRegistroCorreoList)
		{	a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = (ns3__respuestaRegistroCorreoBancoppel **)soap_save_block(soap, soap_blist_respuestaRegistroCorreoList1, NULL, 1);
		}
		else
		{	a->ns3__registroCorreoBancoppelResponse::respuestaRegistroCorreoList = NULL;
			if (soap_blist_respuestaRegistroCorreoList1)
				soap_end_block(soap, soap_blist_respuestaRegistroCorreoList1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__registroCorreoBancoppelResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__registroCorreoBancoppelResponse, SOAP_TYPE_ns3__registroCorreoBancoppelResponse, sizeof(ns3__registroCorreoBancoppelResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__registroCorreoBancoppelResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__registroCorreoBancoppelResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__registroCorreoBancoppelResponse *p;
	size_t k = sizeof(ns3__registroCorreoBancoppelResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__registroCorreoBancoppelResponse);
		if (p)
			((ns3__registroCorreoBancoppelResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__registroCorreoBancoppelResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__registroCorreoBancoppelResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__registroCorreoBancoppelResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__registroCorreoBancoppelResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__registroCorreoBancoppelResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__registroCorreoBancoppelResponse(soap, tag ? tag : "ns3:registroCorreoBancoppelResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__registroCorreoBancoppelResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__registroCorreoBancoppelResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelResponse * SOAP_FMAC4 soap_get_ns3__registroCorreoBancoppelResponse(struct soap *soap, ns3__registroCorreoBancoppelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__registroCorreoBancoppelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__registroCorreoBancoppelRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__registroCorreoBancoppelRequest::parametros);
	/* transient soap skipped */
}

void ns3__registroCorreoBancoppelRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoBancoppelRequest::parametros);
#endif
}

int ns3__registroCorreoBancoppelRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__registroCorreoBancoppelRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoBancoppelRequest(struct soap *soap, const char *tag, int id, const ns3__registroCorreoBancoppelRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__registroCorreoBancoppelRequest), type))
		return soap->error;
	if (soap_out_string(soap, "parametros", -1, (char*const*)&a->ns3__registroCorreoBancoppelRequest::parametros, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__registroCorreoBancoppelRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__registroCorreoBancoppelRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelRequest * SOAP_FMAC4 soap_in_ns3__registroCorreoBancoppelRequest(struct soap *soap, const char *tag, ns3__registroCorreoBancoppelRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__registroCorreoBancoppelRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, sizeof(ns3__registroCorreoBancoppelRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__registroCorreoBancoppelRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__registroCorreoBancoppelRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_parametros1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parametros1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "parametros", (char**)&a->ns3__registroCorreoBancoppelRequest::parametros, "xsd:string"))
				{	soap_flag_parametros1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__registroCorreoBancoppelRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, sizeof(ns3__registroCorreoBancoppelRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__registroCorreoBancoppelRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoBancoppelRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__registroCorreoBancoppelRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__registroCorreoBancoppelRequest *p;
	size_t k = sizeof(ns3__registroCorreoBancoppelRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__registroCorreoBancoppelRequest);
		if (p)
			((ns3__registroCorreoBancoppelRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__registroCorreoBancoppelRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__registroCorreoBancoppelRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__registroCorreoBancoppelRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__registroCorreoBancoppelRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__registroCorreoBancoppelRequest(soap, tag ? tag : "ns3:registroCorreoBancoppelRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__registroCorreoBancoppelRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__registroCorreoBancoppelRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelRequest * SOAP_FMAC4 soap_get_ns3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__registroCorreoBancoppelRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__respuestaRegistroCorreo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__respuestaRegistroCorreo::respuesta = NULL;
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreo::mensaje);
	this->ns3__respuestaRegistroCorreo::tipoRegistro = NULL;
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreo::trigger);
	this->ns3__respuestaRegistroCorreo::iduRegistroCorreo = NULL;
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreo::iduRegistroEstadistica);
	soap_default_string(soap, &this->ns3__respuestaRegistroCorreo::flagImprimir);
	this->ns3__respuestaRegistroCorreo::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__respuestaRegistroCorreo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__respuestaRegistroCorreo::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreo::mensaje);
	soap_serialize_PointerToint(soap, &this->ns3__respuestaRegistroCorreo::tipoRegistro);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreo::trigger);
	soap_serialize_PointerToint(soap, &this->ns3__respuestaRegistroCorreo::iduRegistroCorreo);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreo::iduRegistroEstadistica);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaRegistroCorreo::flagImprimir);
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__respuestaRegistroCorreo::messageEntity);
#endif
}

int ns3__respuestaRegistroCorreo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__respuestaRegistroCorreo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaRegistroCorreo(struct soap *soap, const char *tag, int id, const ns3__respuestaRegistroCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__respuestaRegistroCorreo), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "respuesta", -1, &a->ns3__respuestaRegistroCorreo::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "mensaje", -1, (char*const*)&a->ns3__respuestaRegistroCorreo::mensaje, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "tipoRegistro", -1, &a->ns3__respuestaRegistroCorreo::tipoRegistro, ""))
		return soap->error;
	if (soap_out_string(soap, "trigger", -1, (char*const*)&a->ns3__respuestaRegistroCorreo::trigger, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "iduRegistroCorreo", -1, &a->ns3__respuestaRegistroCorreo::iduRegistroCorreo, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__respuestaRegistroCorreo::iduRegistroEstadistica, ""))
		return soap->error;
	if (soap_out_string(soap, "flagImprimir", -1, (char*const*)&a->ns3__respuestaRegistroCorreo::flagImprimir, ""))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__respuestaRegistroCorreo::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__respuestaRegistroCorreo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__respuestaRegistroCorreo(soap, tag, this, type);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreo * SOAP_FMAC4 soap_in_ns3__respuestaRegistroCorreo(struct soap *soap, const char *tag, ns3__respuestaRegistroCorreo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__respuestaRegistroCorreo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__respuestaRegistroCorreo, sizeof(ns3__respuestaRegistroCorreo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__respuestaRegistroCorreo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__respuestaRegistroCorreo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_mensaje1 = 1;
	size_t soap_flag_tipoRegistro1 = 1;
	size_t soap_flag_trigger1 = 1;
	size_t soap_flag_iduRegistroCorreo1 = 1;
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	size_t soap_flag_flagImprimir1 = 1;
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_respuesta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "respuesta", &a->ns3__respuestaRegistroCorreo::respuesta, "xsd:int"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_mensaje1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "mensaje", (char**)&a->ns3__respuestaRegistroCorreo::mensaje, "xsd:string"))
				{	soap_flag_mensaje1--;
					continue;
				}
			}
			if (soap_flag_tipoRegistro1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "tipoRegistro", &a->ns3__respuestaRegistroCorreo::tipoRegistro, "xsd:int"))
				{	soap_flag_tipoRegistro1--;
					continue;
				}
			}
			if (soap_flag_trigger1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "trigger", (char**)&a->ns3__respuestaRegistroCorreo::trigger, "xsd:string"))
				{	soap_flag_trigger1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "iduRegistroCorreo", &a->ns3__respuestaRegistroCorreo::iduRegistroCorreo, "xsd:int"))
				{	soap_flag_iduRegistroCorreo1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__respuestaRegistroCorreo::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap_flag_flagImprimir1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagImprimir", (char**)&a->ns3__respuestaRegistroCorreo::flagImprimir, "xsd:string"))
				{	soap_flag_flagImprimir1--;
					continue;
				}
			}
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__respuestaRegistroCorreo::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__respuestaRegistroCorreo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__respuestaRegistroCorreo, SOAP_TYPE_ns3__respuestaRegistroCorreo, sizeof(ns3__respuestaRegistroCorreo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__respuestaRegistroCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaRegistroCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__respuestaRegistroCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__respuestaRegistroCorreo *p;
	size_t k = sizeof(ns3__respuestaRegistroCorreo);
	if (n < 0)
	{	p = SOAP_NEW(ns3__respuestaRegistroCorreo);
		if (p)
			((ns3__respuestaRegistroCorreo*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__respuestaRegistroCorreo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__respuestaRegistroCorreo*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__respuestaRegistroCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__respuestaRegistroCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__respuestaRegistroCorreo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__respuestaRegistroCorreo(soap, tag ? tag : "ns3:respuestaRegistroCorreo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__respuestaRegistroCorreo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__respuestaRegistroCorreo(soap, this, tag, type);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreo * SOAP_FMAC4 soap_get_ns3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__respuestaRegistroCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__registroCorreoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__registroCorreoResponse::code);
	soap_default_string(soap, &this->ns3__registroCorreoResponse::message);
	this->ns3__registroCorreoResponse::respuestaRegistroCorreo = NULL;
	/* transient soap skipped */
}

void ns3__registroCorreoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoResponse::message);
	soap_serialize_PointerTons3__respuestaRegistroCorreo(soap, &this->ns3__registroCorreoResponse::respuestaRegistroCorreo);
#endif
}

int ns3__registroCorreoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__registroCorreoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoResponse(struct soap *soap, const char *tag, int id, const ns3__registroCorreoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__registroCorreoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__registroCorreoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__registroCorreoResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__respuestaRegistroCorreo(soap, "respuestaRegistroCorreo", -1, &a->ns3__registroCorreoResponse::respuestaRegistroCorreo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__registroCorreoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__registroCorreoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__registroCorreoResponse * SOAP_FMAC4 soap_in_ns3__registroCorreoResponse(struct soap *soap, const char *tag, ns3__registroCorreoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__registroCorreoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__registroCorreoResponse, sizeof(ns3__registroCorreoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__registroCorreoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__registroCorreoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_respuestaRegistroCorreo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__registroCorreoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__registroCorreoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_respuestaRegistroCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__respuestaRegistroCorreo(soap, "respuestaRegistroCorreo", &a->ns3__registroCorreoResponse::respuestaRegistroCorreo, "ns3:respuestaRegistroCorreo"))
				{	soap_flag_respuestaRegistroCorreo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__registroCorreoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__registroCorreoResponse, SOAP_TYPE_ns3__registroCorreoResponse, sizeof(ns3__registroCorreoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__registroCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__registroCorreoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__registroCorreoResponse *p;
	size_t k = sizeof(ns3__registroCorreoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__registroCorreoResponse);
		if (p)
			((ns3__registroCorreoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__registroCorreoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__registroCorreoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__registroCorreoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__registroCorreoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__registroCorreoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__registroCorreoResponse(soap, tag ? tag : "ns3:registroCorreoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__registroCorreoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__registroCorreoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__registroCorreoResponse * SOAP_FMAC4 soap_get_ns3__registroCorreoResponse(struct soap *soap, ns3__registroCorreoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__registroCorreoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__registroCorreoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__registroCorreoRequest::empleado);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::numeroCliente);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::claveDivision);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::claveRegion);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::email);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::puntualidad);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::genero);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::numeroSolicitante);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::flagHuellaValor);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::numeroTiendaOrigen);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::montoCompra);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::adicional);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::caja);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::numeroCentro);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::numeroZona);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::origen);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::subOrigen);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::tipoCliente);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::area);
	soap_default_string(soap, &this->ns3__registroCorreoRequest::iduRegistroEstadistica);
	/* transient soap skipped */
}

void ns3__registroCorreoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::empleado);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::numeroCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::claveDivision);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::claveRegion);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::email);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::puntualidad);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::genero);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::numeroSolicitante);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::flagHuellaValor);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::numeroTiendaOrigen);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::montoCompra);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::caja);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::numeroCentro);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::numeroZona);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::subOrigen);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::tipoCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::area);
	soap_serialize_string(soap, (char*const*)&this->ns3__registroCorreoRequest::iduRegistroEstadistica);
#endif
}

int ns3__registroCorreoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__registroCorreoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__registroCorreoRequest(struct soap *soap, const char *tag, int id, const ns3__registroCorreoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__registroCorreoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "empleado", -1, (char*const*)&a->ns3__registroCorreoRequest::empleado, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroCliente", -1, (char*const*)&a->ns3__registroCorreoRequest::numeroCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "claveDivision", -1, (char*const*)&a->ns3__registroCorreoRequest::claveDivision, ""))
		return soap->error;
	if (soap_out_string(soap, "claveRegion", -1, (char*const*)&a->ns3__registroCorreoRequest::claveRegion, ""))
		return soap->error;
	if (soap_out_string(soap, "email", -1, (char*const*)&a->ns3__registroCorreoRequest::email, ""))
		return soap->error;
	if (soap_out_string(soap, "puntualidad", -1, (char*const*)&a->ns3__registroCorreoRequest::puntualidad, ""))
		return soap->error;
	if (soap_out_string(soap, "genero", -1, (char*const*)&a->ns3__registroCorreoRequest::genero, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroSolicitante", -1, (char*const*)&a->ns3__registroCorreoRequest::numeroSolicitante, ""))
		return soap->error;
	if (soap_out_string(soap, "flagHuellaValor", -1, (char*const*)&a->ns3__registroCorreoRequest::flagHuellaValor, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroTiendaOrigen", -1, (char*const*)&a->ns3__registroCorreoRequest::numeroTiendaOrigen, ""))
		return soap->error;
	if (soap_out_string(soap, "montoCompra", -1, (char*const*)&a->ns3__registroCorreoRequest::montoCompra, ""))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__registroCorreoRequest::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "caja", -1, (char*const*)&a->ns3__registroCorreoRequest::caja, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroCentro", -1, (char*const*)&a->ns3__registroCorreoRequest::numeroCentro, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroZona", -1, (char*const*)&a->ns3__registroCorreoRequest::numeroZona, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__registroCorreoRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__registroCorreoRequest::subOrigen, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoCliente", -1, (char*const*)&a->ns3__registroCorreoRequest::tipoCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "area", -1, (char*const*)&a->ns3__registroCorreoRequest::area, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__registroCorreoRequest::iduRegistroEstadistica, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__registroCorreoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__registroCorreoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__registroCorreoRequest * SOAP_FMAC4 soap_in_ns3__registroCorreoRequest(struct soap *soap, const char *tag, ns3__registroCorreoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__registroCorreoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__registroCorreoRequest, sizeof(ns3__registroCorreoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__registroCorreoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__registroCorreoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_empleado1 = 1;
	size_t soap_flag_numeroCliente1 = 1;
	size_t soap_flag_claveDivision1 = 1;
	size_t soap_flag_claveRegion1 = 1;
	size_t soap_flag_email1 = 1;
	size_t soap_flag_puntualidad1 = 1;
	size_t soap_flag_genero1 = 1;
	size_t soap_flag_numeroSolicitante1 = 1;
	size_t soap_flag_flagHuellaValor1 = 1;
	size_t soap_flag_numeroTiendaOrigen1 = 1;
	size_t soap_flag_montoCompra1 = 1;
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_caja1 = 1;
	size_t soap_flag_numeroCentro1 = 1;
	size_t soap_flag_numeroZona1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	size_t soap_flag_tipoCliente1 = 1;
	size_t soap_flag_area1 = 1;
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_empleado1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "empleado", (char**)&a->ns3__registroCorreoRequest::empleado, "xsd:string"))
				{	soap_flag_empleado1--;
					continue;
				}
			}
			if (soap_flag_numeroCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCliente", (char**)&a->ns3__registroCorreoRequest::numeroCliente, "xsd:string"))
				{	soap_flag_numeroCliente1--;
					continue;
				}
			}
			if (soap_flag_claveDivision1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "claveDivision", (char**)&a->ns3__registroCorreoRequest::claveDivision, "xsd:string"))
				{	soap_flag_claveDivision1--;
					continue;
				}
			}
			if (soap_flag_claveRegion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "claveRegion", (char**)&a->ns3__registroCorreoRequest::claveRegion, "xsd:string"))
				{	soap_flag_claveRegion1--;
					continue;
				}
			}
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "email", (char**)&a->ns3__registroCorreoRequest::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap_flag_puntualidad1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "puntualidad", (char**)&a->ns3__registroCorreoRequest::puntualidad, "xsd:string"))
				{	soap_flag_puntualidad1--;
					continue;
				}
			}
			if (soap_flag_genero1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "genero", (char**)&a->ns3__registroCorreoRequest::genero, "xsd:string"))
				{	soap_flag_genero1--;
					continue;
				}
			}
			if (soap_flag_numeroSolicitante1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroSolicitante", (char**)&a->ns3__registroCorreoRequest::numeroSolicitante, "xsd:string"))
				{	soap_flag_numeroSolicitante1--;
					continue;
				}
			}
			if (soap_flag_flagHuellaValor1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagHuellaValor", (char**)&a->ns3__registroCorreoRequest::flagHuellaValor, "xsd:string"))
				{	soap_flag_flagHuellaValor1--;
					continue;
				}
			}
			if (soap_flag_numeroTiendaOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroTiendaOrigen", (char**)&a->ns3__registroCorreoRequest::numeroTiendaOrigen, "xsd:string"))
				{	soap_flag_numeroTiendaOrigen1--;
					continue;
				}
			}
			if (soap_flag_montoCompra1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "montoCompra", (char**)&a->ns3__registroCorreoRequest::montoCompra, "xsd:string"))
				{	soap_flag_montoCompra1--;
					continue;
				}
			}
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__registroCorreoRequest::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_caja1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "caja", (char**)&a->ns3__registroCorreoRequest::caja, "xsd:string"))
				{	soap_flag_caja1--;
					continue;
				}
			}
			if (soap_flag_numeroCentro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCentro", (char**)&a->ns3__registroCorreoRequest::numeroCentro, "xsd:string"))
				{	soap_flag_numeroCentro1--;
					continue;
				}
			}
			if (soap_flag_numeroZona1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroZona", (char**)&a->ns3__registroCorreoRequest::numeroZona, "xsd:string"))
				{	soap_flag_numeroZona1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__registroCorreoRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__registroCorreoRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap_flag_tipoCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "tipoCliente", (char**)&a->ns3__registroCorreoRequest::tipoCliente, "xsd:string"))
				{	soap_flag_tipoCliente1--;
					continue;
				}
			}
			if (soap_flag_area1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "area", (char**)&a->ns3__registroCorreoRequest::area, "xsd:string"))
				{	soap_flag_area1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__registroCorreoRequest::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__registroCorreoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__registroCorreoRequest, SOAP_TYPE_ns3__registroCorreoRequest, sizeof(ns3__registroCorreoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__registroCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__registroCorreoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__registroCorreoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__registroCorreoRequest *p;
	size_t k = sizeof(ns3__registroCorreoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__registroCorreoRequest);
		if (p)
			((ns3__registroCorreoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__registroCorreoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__registroCorreoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__registroCorreoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__registroCorreoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__registroCorreoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__registroCorreoRequest(soap, tag ? tag : "ns3:registroCorreoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__registroCorreoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__registroCorreoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__registroCorreoRequest * SOAP_FMAC4 soap_get_ns3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__registroCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__desliqueClienteNumeroClienteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__desliqueClienteNumeroClienteResponse::code);
	soap_default_string(soap, &this->ns3__desliqueClienteNumeroClienteResponse::message);
	this->ns3__desliqueClienteNumeroClienteResponse::respuestaDesligueCorreo = NULL;
	/* transient soap skipped */
}

void ns3__desliqueClienteNumeroClienteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__desliqueClienteNumeroClienteResponse::message);
	soap_serialize_PointerTons3__respuestaDesligueCorreo(soap, &this->ns3__desliqueClienteNumeroClienteResponse::respuestaDesligueCorreo);
#endif
}

int ns3__desliqueClienteNumeroClienteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__desliqueClienteNumeroClienteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, const char *tag, int id, const ns3__desliqueClienteNumeroClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__desliqueClienteNumeroClienteResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__desliqueClienteNumeroClienteResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__respuestaDesligueCorreo(soap, "respuestaDesligueCorreo", -1, &a->ns3__desliqueClienteNumeroClienteResponse::respuestaDesligueCorreo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__desliqueClienteNumeroClienteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__desliqueClienteNumeroClienteResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC4 soap_in_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, const char *tag, ns3__desliqueClienteNumeroClienteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__desliqueClienteNumeroClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse, sizeof(ns3__desliqueClienteNumeroClienteResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__desliqueClienteNumeroClienteResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_respuestaDesligueCorreo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__desliqueClienteNumeroClienteResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__desliqueClienteNumeroClienteResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_respuestaDesligueCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__respuestaDesligueCorreo(soap, "respuestaDesligueCorreo", &a->ns3__desliqueClienteNumeroClienteResponse::respuestaDesligueCorreo, "ns3:respuestaDesligueCorreo"))
				{	soap_flag_respuestaDesligueCorreo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__desliqueClienteNumeroClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse, SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse, sizeof(ns3__desliqueClienteNumeroClienteResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__desliqueClienteNumeroClienteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__desliqueClienteNumeroClienteResponse *p;
	size_t k = sizeof(ns3__desliqueClienteNumeroClienteResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__desliqueClienteNumeroClienteResponse);
		if (p)
			((ns3__desliqueClienteNumeroClienteResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__desliqueClienteNumeroClienteResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__desliqueClienteNumeroClienteResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__desliqueClienteNumeroClienteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__desliqueClienteNumeroClienteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__desliqueClienteNumeroClienteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__desliqueClienteNumeroClienteResponse(soap, tag ? tag : "ns3:desliqueClienteNumeroClienteResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__desliqueClienteNumeroClienteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__desliqueClienteNumeroClienteResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__desliqueClienteNumeroClienteResponse * SOAP_FMAC4 soap_get_ns3__desliqueClienteNumeroClienteResponse(struct soap *soap, ns3__desliqueClienteNumeroClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__desliqueClienteNumeroClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__desligueClienteNumeroClienteRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__desligueClienteNumeroClienteRequest::numeroCliente);
	soap_default_string(soap, &this->ns3__desligueClienteNumeroClienteRequest::adicional);
	soap_default_string(soap, &this->ns3__desligueClienteNumeroClienteRequest::iduRespuesta);
	soap_default_string(soap, &this->ns3__desligueClienteNumeroClienteRequest::iduRegistroEstadistica);
	/* transient soap skipped */
}

void ns3__desligueClienteNumeroClienteRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteNumeroClienteRequest::numeroCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteNumeroClienteRequest::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteNumeroClienteRequest::iduRespuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteNumeroClienteRequest::iduRegistroEstadistica);
#endif
}

int ns3__desligueClienteNumeroClienteRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__desligueClienteNumeroClienteRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *tag, int id, const ns3__desligueClienteNumeroClienteRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest), type))
		return soap->error;
	if (soap_out_string(soap, "numeroCliente", -1, (char*const*)&a->ns3__desligueClienteNumeroClienteRequest::numeroCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__desligueClienteNumeroClienteRequest::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRespuesta", -1, (char*const*)&a->ns3__desligueClienteNumeroClienteRequest::iduRespuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__desligueClienteNumeroClienteRequest::iduRegistroEstadistica, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__desligueClienteNumeroClienteRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__desligueClienteNumeroClienteRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC4 soap_in_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *tag, ns3__desligueClienteNumeroClienteRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__desligueClienteNumeroClienteRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, sizeof(ns3__desligueClienteNumeroClienteRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__desligueClienteNumeroClienteRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_numeroCliente1 = 1;
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_iduRespuesta1 = 1;
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_numeroCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCliente", (char**)&a->ns3__desligueClienteNumeroClienteRequest::numeroCliente, "xsd:string"))
				{	soap_flag_numeroCliente1--;
					continue;
				}
			}
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__desligueClienteNumeroClienteRequest::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_iduRespuesta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRespuesta", (char**)&a->ns3__desligueClienteNumeroClienteRequest::iduRespuesta, "xsd:string"))
				{	soap_flag_iduRespuesta1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__desligueClienteNumeroClienteRequest::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__desligueClienteNumeroClienteRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, sizeof(ns3__desligueClienteNumeroClienteRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__desligueClienteNumeroClienteRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__desligueClienteNumeroClienteRequest *p;
	size_t k = sizeof(ns3__desligueClienteNumeroClienteRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__desligueClienteNumeroClienteRequest);
		if (p)
			((ns3__desligueClienteNumeroClienteRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__desligueClienteNumeroClienteRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__desligueClienteNumeroClienteRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__desligueClienteNumeroClienteRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__desligueClienteNumeroClienteRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__desligueClienteNumeroClienteRequest(soap, tag ? tag : "ns3:desligueClienteNumeroClienteRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__desligueClienteNumeroClienteRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__desligueClienteNumeroClienteRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest * SOAP_FMAC4 soap_get_ns3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__desligueClienteNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__respuestaDesligueCorreo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__respuestaDesligueCorreo::respuesta = NULL;
	soap_default_string(soap, &this->ns3__respuestaDesligueCorreo::mensaje);
	/* transient soap skipped */
}

void ns3__respuestaDesligueCorreo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__respuestaDesligueCorreo::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__respuestaDesligueCorreo::mensaje);
#endif
}

int ns3__respuestaDesligueCorreo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__respuestaDesligueCorreo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__respuestaDesligueCorreo(struct soap *soap, const char *tag, int id, const ns3__respuestaDesligueCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__respuestaDesligueCorreo), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "respuesta", -1, &a->ns3__respuestaDesligueCorreo::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "mensaje", -1, (char*const*)&a->ns3__respuestaDesligueCorreo::mensaje, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__respuestaDesligueCorreo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__respuestaDesligueCorreo(soap, tag, this, type);
}

SOAP_FMAC3 ns3__respuestaDesligueCorreo * SOAP_FMAC4 soap_in_ns3__respuestaDesligueCorreo(struct soap *soap, const char *tag, ns3__respuestaDesligueCorreo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__respuestaDesligueCorreo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__respuestaDesligueCorreo, sizeof(ns3__respuestaDesligueCorreo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__respuestaDesligueCorreo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__respuestaDesligueCorreo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_mensaje1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_respuesta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "respuesta", &a->ns3__respuestaDesligueCorreo::respuesta, "xsd:int"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_mensaje1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "mensaje", (char**)&a->ns3__respuestaDesligueCorreo::mensaje, "xsd:string"))
				{	soap_flag_mensaje1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__respuestaDesligueCorreo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__respuestaDesligueCorreo, SOAP_TYPE_ns3__respuestaDesligueCorreo, sizeof(ns3__respuestaDesligueCorreo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__respuestaDesligueCorreo * SOAP_FMAC2 soap_instantiate_ns3__respuestaDesligueCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__respuestaDesligueCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__respuestaDesligueCorreo *p;
	size_t k = sizeof(ns3__respuestaDesligueCorreo);
	if (n < 0)
	{	p = SOAP_NEW(ns3__respuestaDesligueCorreo);
		if (p)
			((ns3__respuestaDesligueCorreo*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__respuestaDesligueCorreo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__respuestaDesligueCorreo*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__respuestaDesligueCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__respuestaDesligueCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__respuestaDesligueCorreo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__respuestaDesligueCorreo(soap, tag ? tag : "ns3:respuestaDesligueCorreo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__respuestaDesligueCorreo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__respuestaDesligueCorreo(soap, this, tag, type);
}

SOAP_FMAC3 ns3__respuestaDesligueCorreo * SOAP_FMAC4 soap_get_ns3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__respuestaDesligueCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__desliqueClienteCorreoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__desliqueClienteCorreoResponse::code);
	soap_default_string(soap, &this->ns3__desliqueClienteCorreoResponse::message);
	this->ns3__desliqueClienteCorreoResponse::respuestaDesligueCorreo = NULL;
	/* transient soap skipped */
}

void ns3__desliqueClienteCorreoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__desliqueClienteCorreoResponse::message);
	soap_serialize_PointerTons3__respuestaDesligueCorreo(soap, &this->ns3__desliqueClienteCorreoResponse::respuestaDesligueCorreo);
#endif
}

int ns3__desliqueClienteCorreoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__desliqueClienteCorreoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desliqueClienteCorreoResponse(struct soap *soap, const char *tag, int id, const ns3__desliqueClienteCorreoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__desliqueClienteCorreoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__desliqueClienteCorreoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__desliqueClienteCorreoResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__respuestaDesligueCorreo(soap, "respuestaDesligueCorreo", -1, &a->ns3__desliqueClienteCorreoResponse::respuestaDesligueCorreo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__desliqueClienteCorreoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__desliqueClienteCorreoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__desliqueClienteCorreoResponse * SOAP_FMAC4 soap_in_ns3__desliqueClienteCorreoResponse(struct soap *soap, const char *tag, ns3__desliqueClienteCorreoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__desliqueClienteCorreoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__desliqueClienteCorreoResponse, sizeof(ns3__desliqueClienteCorreoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__desliqueClienteCorreoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__desliqueClienteCorreoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_respuestaDesligueCorreo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__desliqueClienteCorreoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__desliqueClienteCorreoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_respuestaDesligueCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__respuestaDesligueCorreo(soap, "respuestaDesligueCorreo", &a->ns3__desliqueClienteCorreoResponse::respuestaDesligueCorreo, "ns3:respuestaDesligueCorreo"))
				{	soap_flag_respuestaDesligueCorreo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__desliqueClienteCorreoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__desliqueClienteCorreoResponse, SOAP_TYPE_ns3__desliqueClienteCorreoResponse, sizeof(ns3__desliqueClienteCorreoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__desliqueClienteCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__desliqueClienteCorreoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__desliqueClienteCorreoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__desliqueClienteCorreoResponse *p;
	size_t k = sizeof(ns3__desliqueClienteCorreoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__desliqueClienteCorreoResponse);
		if (p)
			((ns3__desliqueClienteCorreoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__desliqueClienteCorreoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__desliqueClienteCorreoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__desliqueClienteCorreoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__desliqueClienteCorreoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__desliqueClienteCorreoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__desliqueClienteCorreoResponse(soap, tag ? tag : "ns3:desliqueClienteCorreoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__desliqueClienteCorreoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__desliqueClienteCorreoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__desliqueClienteCorreoResponse * SOAP_FMAC4 soap_get_ns3__desliqueClienteCorreoResponse(struct soap *soap, ns3__desliqueClienteCorreoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__desliqueClienteCorreoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__desligueClienteCorreoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__desligueClienteCorreoRequest::correo);
	soap_default_string(soap, &this->ns3__desligueClienteCorreoRequest::iduRespuesta);
	soap_default_string(soap, &this->ns3__desligueClienteCorreoRequest::iduRegistroEstadistica);
	/* transient soap skipped */
}

void ns3__desligueClienteCorreoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteCorreoRequest::correo);
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteCorreoRequest::iduRespuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__desligueClienteCorreoRequest::iduRegistroEstadistica);
#endif
}

int ns3__desligueClienteCorreoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__desligueClienteCorreoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__desligueClienteCorreoRequest(struct soap *soap, const char *tag, int id, const ns3__desligueClienteCorreoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__desligueClienteCorreoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "correo", -1, (char*const*)&a->ns3__desligueClienteCorreoRequest::correo, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRespuesta", -1, (char*const*)&a->ns3__desligueClienteCorreoRequest::iduRespuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__desligueClienteCorreoRequest::iduRegistroEstadistica, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__desligueClienteCorreoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__desligueClienteCorreoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__desligueClienteCorreoRequest * SOAP_FMAC4 soap_in_ns3__desligueClienteCorreoRequest(struct soap *soap, const char *tag, ns3__desligueClienteCorreoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__desligueClienteCorreoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__desligueClienteCorreoRequest, sizeof(ns3__desligueClienteCorreoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__desligueClienteCorreoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__desligueClienteCorreoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_correo1 = 1;
	size_t soap_flag_iduRespuesta1 = 1;
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_correo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "correo", (char**)&a->ns3__desligueClienteCorreoRequest::correo, "xsd:string"))
				{	soap_flag_correo1--;
					continue;
				}
			}
			if (soap_flag_iduRespuesta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRespuesta", (char**)&a->ns3__desligueClienteCorreoRequest::iduRespuesta, "xsd:string"))
				{	soap_flag_iduRespuesta1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__desligueClienteCorreoRequest::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__desligueClienteCorreoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__desligueClienteCorreoRequest, SOAP_TYPE_ns3__desligueClienteCorreoRequest, sizeof(ns3__desligueClienteCorreoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__desligueClienteCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__desligueClienteCorreoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__desligueClienteCorreoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__desligueClienteCorreoRequest *p;
	size_t k = sizeof(ns3__desligueClienteCorreoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__desligueClienteCorreoRequest);
		if (p)
			((ns3__desligueClienteCorreoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__desligueClienteCorreoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__desligueClienteCorreoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__desligueClienteCorreoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__desligueClienteCorreoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__desligueClienteCorreoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__desligueClienteCorreoRequest(soap, tag ? tag : "ns3:desligueClienteCorreoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__desligueClienteCorreoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__desligueClienteCorreoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__desligueClienteCorreoRequest * SOAP_FMAC4 soap_get_ns3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__desligueClienteCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__resultadoFrecuencia::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__resultadoFrecuencia::descripcionMensaje);
	soap_default_string(soap, &this->ns3__resultadoFrecuencia::nombreCorreo);
	this->ns3__resultadoFrecuencia::numeroValidaCorreo = NULL;
	this->ns3__resultadoFrecuencia::opcCandidato = NULL;
	this->ns3__resultadoFrecuencia::opcFlagEnviaCorreoValidacion = NULL;
	this->ns3__resultadoFrecuencia::opcFlagImprimir = NULL;
	/* transient soap skipped */
}

void ns3__resultadoFrecuencia::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__resultadoFrecuencia::descripcionMensaje);
	soap_serialize_string(soap, (char*const*)&this->ns3__resultadoFrecuencia::nombreCorreo);
	soap_serialize_PointerToint(soap, &this->ns3__resultadoFrecuencia::numeroValidaCorreo);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoFrecuencia::opcCandidato);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoFrecuencia::opcFlagEnviaCorreoValidacion);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoFrecuencia::opcFlagImprimir);
#endif
}

int ns3__resultadoFrecuencia::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__resultadoFrecuencia(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__resultadoFrecuencia(struct soap *soap, const char *tag, int id, const ns3__resultadoFrecuencia *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__resultadoFrecuencia), type))
		return soap->error;
	if (soap_out_string(soap, "descripcionMensaje", -1, (char*const*)&a->ns3__resultadoFrecuencia::descripcionMensaje, ""))
		return soap->error;
	if (soap_out_string(soap, "nombreCorreo", -1, (char*const*)&a->ns3__resultadoFrecuencia::nombreCorreo, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "numeroValidaCorreo", -1, &a->ns3__resultadoFrecuencia::numeroValidaCorreo, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcCandidato", -1, &a->ns3__resultadoFrecuencia::opcCandidato, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcFlagEnviaCorreoValidacion", -1, &a->ns3__resultadoFrecuencia::opcFlagEnviaCorreoValidacion, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcFlagImprimir", -1, &a->ns3__resultadoFrecuencia::opcFlagImprimir, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__resultadoFrecuencia::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__resultadoFrecuencia(soap, tag, this, type);
}

SOAP_FMAC3 ns3__resultadoFrecuencia * SOAP_FMAC4 soap_in_ns3__resultadoFrecuencia(struct soap *soap, const char *tag, ns3__resultadoFrecuencia *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__resultadoFrecuencia *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__resultadoFrecuencia, sizeof(ns3__resultadoFrecuencia), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__resultadoFrecuencia)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__resultadoFrecuencia *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_descripcionMensaje1 = 1;
	size_t soap_flag_nombreCorreo1 = 1;
	size_t soap_flag_numeroValidaCorreo1 = 1;
	size_t soap_flag_opcCandidato1 = 1;
	size_t soap_flag_opcFlagEnviaCorreoValidacion1 = 1;
	size_t soap_flag_opcFlagImprimir1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_descripcionMensaje1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "descripcionMensaje", (char**)&a->ns3__resultadoFrecuencia::descripcionMensaje, "xsd:string"))
				{	soap_flag_descripcionMensaje1--;
					continue;
				}
			}
			if (soap_flag_nombreCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "nombreCorreo", (char**)&a->ns3__resultadoFrecuencia::nombreCorreo, "xsd:string"))
				{	soap_flag_nombreCorreo1--;
					continue;
				}
			}
			if (soap_flag_numeroValidaCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "numeroValidaCorreo", &a->ns3__resultadoFrecuencia::numeroValidaCorreo, "xsd:int"))
				{	soap_flag_numeroValidaCorreo1--;
					continue;
				}
			}
			if (soap_flag_opcCandidato1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcCandidato", &a->ns3__resultadoFrecuencia::opcCandidato, "xsd:short"))
				{	soap_flag_opcCandidato1--;
					continue;
				}
			}
			if (soap_flag_opcFlagEnviaCorreoValidacion1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcFlagEnviaCorreoValidacion", &a->ns3__resultadoFrecuencia::opcFlagEnviaCorreoValidacion, "xsd:short"))
				{	soap_flag_opcFlagEnviaCorreoValidacion1--;
					continue;
				}
			}
			if (soap_flag_opcFlagImprimir1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcFlagImprimir", &a->ns3__resultadoFrecuencia::opcFlagImprimir, "xsd:short"))
				{	soap_flag_opcFlagImprimir1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__resultadoFrecuencia *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__resultadoFrecuencia, SOAP_TYPE_ns3__resultadoFrecuencia, sizeof(ns3__resultadoFrecuencia), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__resultadoFrecuencia * SOAP_FMAC2 soap_instantiate_ns3__resultadoFrecuencia(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__resultadoFrecuencia(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__resultadoFrecuencia *p;
	size_t k = sizeof(ns3__resultadoFrecuencia);
	if (n < 0)
	{	p = SOAP_NEW(ns3__resultadoFrecuencia);
		if (p)
			((ns3__resultadoFrecuencia*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__resultadoFrecuencia, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__resultadoFrecuencia*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__resultadoFrecuencia location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__resultadoFrecuencia, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__resultadoFrecuencia::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__resultadoFrecuencia(soap, tag ? tag : "ns3:resultadoFrecuencia", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__resultadoFrecuencia::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__resultadoFrecuencia(soap, this, tag, type);
}

SOAP_FMAC3 ns3__resultadoFrecuencia * SOAP_FMAC4 soap_get_ns3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__resultadoFrecuencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validarFrecuenciaResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__validarFrecuenciaResponse::code);
	soap_default_string(soap, &this->ns3__validarFrecuenciaResponse::message);
	this->ns3__validarFrecuenciaResponse::resultadoFrecuencia = NULL;
	/* transient soap skipped */
}

void ns3__validarFrecuenciaResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaResponse::message);
	soap_serialize_PointerTons3__resultadoFrecuencia(soap, &this->ns3__validarFrecuenciaResponse::resultadoFrecuencia);
#endif
}

int ns3__validarFrecuenciaResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validarFrecuenciaResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validarFrecuenciaResponse(struct soap *soap, const char *tag, int id, const ns3__validarFrecuenciaResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validarFrecuenciaResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__validarFrecuenciaResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__validarFrecuenciaResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__resultadoFrecuencia(soap, "resultadoFrecuencia", -1, &a->ns3__validarFrecuenciaResponse::resultadoFrecuencia, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validarFrecuenciaResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validarFrecuenciaResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validarFrecuenciaResponse * SOAP_FMAC4 soap_in_ns3__validarFrecuenciaResponse(struct soap *soap, const char *tag, ns3__validarFrecuenciaResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validarFrecuenciaResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validarFrecuenciaResponse, sizeof(ns3__validarFrecuenciaResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validarFrecuenciaResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validarFrecuenciaResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_resultadoFrecuencia1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__validarFrecuenciaResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__validarFrecuenciaResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_resultadoFrecuencia1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__resultadoFrecuencia(soap, "resultadoFrecuencia", &a->ns3__validarFrecuenciaResponse::resultadoFrecuencia, "ns3:resultadoFrecuencia"))
				{	soap_flag_resultadoFrecuencia1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__validarFrecuenciaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validarFrecuenciaResponse, SOAP_TYPE_ns3__validarFrecuenciaResponse, sizeof(ns3__validarFrecuenciaResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validarFrecuenciaResponse * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validarFrecuenciaResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validarFrecuenciaResponse *p;
	size_t k = sizeof(ns3__validarFrecuenciaResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validarFrecuenciaResponse);
		if (p)
			((ns3__validarFrecuenciaResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validarFrecuenciaResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validarFrecuenciaResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validarFrecuenciaResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validarFrecuenciaResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validarFrecuenciaResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validarFrecuenciaResponse(soap, tag ? tag : "ns3:validarFrecuenciaResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validarFrecuenciaResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validarFrecuenciaResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validarFrecuenciaResponse * SOAP_FMAC4 soap_get_ns3__validarFrecuenciaResponse(struct soap *soap, ns3__validarFrecuenciaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validarFrecuenciaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validarFrecuenciaRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__validarFrecuenciaRequest::adicional);
	soap_default_string(soap, &this->ns3__validarFrecuenciaRequest::numeroCliente);
	soap_default_string(soap, &this->ns3__validarFrecuenciaRequest::origen);
	soap_default_string(soap, &this->ns3__validarFrecuenciaRequest::subOrigen);
	soap_default_string(soap, &this->ns3__validarFrecuenciaRequest::tipoCliente);
	/* transient soap skipped */
}

void ns3__validarFrecuenciaRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaRequest::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaRequest::numeroCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaRequest::subOrigen);
	soap_serialize_string(soap, (char*const*)&this->ns3__validarFrecuenciaRequest::tipoCliente);
#endif
}

int ns3__validarFrecuenciaRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validarFrecuenciaRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validarFrecuenciaRequest(struct soap *soap, const char *tag, int id, const ns3__validarFrecuenciaRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validarFrecuenciaRequest), type))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__validarFrecuenciaRequest::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroCliente", -1, (char*const*)&a->ns3__validarFrecuenciaRequest::numeroCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__validarFrecuenciaRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__validarFrecuenciaRequest::subOrigen, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoCliente", -1, (char*const*)&a->ns3__validarFrecuenciaRequest::tipoCliente, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validarFrecuenciaRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validarFrecuenciaRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validarFrecuenciaRequest * SOAP_FMAC4 soap_in_ns3__validarFrecuenciaRequest(struct soap *soap, const char *tag, ns3__validarFrecuenciaRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validarFrecuenciaRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validarFrecuenciaRequest, sizeof(ns3__validarFrecuenciaRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validarFrecuenciaRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validarFrecuenciaRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_numeroCliente1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	size_t soap_flag_tipoCliente1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__validarFrecuenciaRequest::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_numeroCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCliente", (char**)&a->ns3__validarFrecuenciaRequest::numeroCliente, "xsd:string"))
				{	soap_flag_numeroCliente1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__validarFrecuenciaRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__validarFrecuenciaRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap_flag_tipoCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "tipoCliente", (char**)&a->ns3__validarFrecuenciaRequest::tipoCliente, "xsd:string"))
				{	soap_flag_tipoCliente1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__validarFrecuenciaRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validarFrecuenciaRequest, SOAP_TYPE_ns3__validarFrecuenciaRequest, sizeof(ns3__validarFrecuenciaRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validarFrecuenciaRequest * SOAP_FMAC2 soap_instantiate_ns3__validarFrecuenciaRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validarFrecuenciaRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validarFrecuenciaRequest *p;
	size_t k = sizeof(ns3__validarFrecuenciaRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validarFrecuenciaRequest);
		if (p)
			((ns3__validarFrecuenciaRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validarFrecuenciaRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validarFrecuenciaRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validarFrecuenciaRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validarFrecuenciaRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validarFrecuenciaRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validarFrecuenciaRequest(soap, tag ? tag : "ns3:validarFrecuenciaRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validarFrecuenciaRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validarFrecuenciaRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validarFrecuenciaRequest * SOAP_FMAC4 soap_get_ns3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validarFrecuenciaRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__resultadoCandidato::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__resultadoCandidato::descripcionMensaje);
	soap_default_string(soap, &this->ns3__resultadoCandidato::nombreCorreo);
	this->ns3__resultadoCandidato::numeroValidaCorreo = NULL;
	this->ns3__resultadoCandidato::opcCandidato = NULL;
	this->ns3__resultadoCandidato::opcFlagEnviaCorreoValidacion = NULL;
	soap_default_string(soap, &this->ns3__resultadoCandidato::iduRegistroEstadistica);
	this->ns3__resultadoCandidato::opcFlagImprimir = NULL;
	this->ns3__resultadoCandidato::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__resultadoCandidato::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__resultadoCandidato::descripcionMensaje);
	soap_serialize_string(soap, (char*const*)&this->ns3__resultadoCandidato::nombreCorreo);
	soap_serialize_PointerToint(soap, &this->ns3__resultadoCandidato::numeroValidaCorreo);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoCandidato::opcCandidato);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoCandidato::opcFlagEnviaCorreoValidacion);
	soap_serialize_string(soap, (char*const*)&this->ns3__resultadoCandidato::iduRegistroEstadistica);
	soap_serialize_PointerToshort(soap, &this->ns3__resultadoCandidato::opcFlagImprimir);
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__resultadoCandidato::messageEntity);
#endif
}

int ns3__resultadoCandidato::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__resultadoCandidato(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__resultadoCandidato(struct soap *soap, const char *tag, int id, const ns3__resultadoCandidato *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__resultadoCandidato), type))
		return soap->error;
	if (soap_out_string(soap, "descripcionMensaje", -1, (char*const*)&a->ns3__resultadoCandidato::descripcionMensaje, ""))
		return soap->error;
	if (soap_out_string(soap, "nombreCorreo", -1, (char*const*)&a->ns3__resultadoCandidato::nombreCorreo, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "numeroValidaCorreo", -1, &a->ns3__resultadoCandidato::numeroValidaCorreo, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcCandidato", -1, &a->ns3__resultadoCandidato::opcCandidato, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcFlagEnviaCorreoValidacion", -1, &a->ns3__resultadoCandidato::opcFlagEnviaCorreoValidacion, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroEstadistica", -1, (char*const*)&a->ns3__resultadoCandidato::iduRegistroEstadistica, ""))
		return soap->error;
	if (soap_out_PointerToshort(soap, "opcFlagImprimir", -1, &a->ns3__resultadoCandidato::opcFlagImprimir, ""))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__resultadoCandidato::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__resultadoCandidato::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__resultadoCandidato(soap, tag, this, type);
}

SOAP_FMAC3 ns3__resultadoCandidato * SOAP_FMAC4 soap_in_ns3__resultadoCandidato(struct soap *soap, const char *tag, ns3__resultadoCandidato *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__resultadoCandidato *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__resultadoCandidato, sizeof(ns3__resultadoCandidato), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__resultadoCandidato)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__resultadoCandidato *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_descripcionMensaje1 = 1;
	size_t soap_flag_nombreCorreo1 = 1;
	size_t soap_flag_numeroValidaCorreo1 = 1;
	size_t soap_flag_opcCandidato1 = 1;
	size_t soap_flag_opcFlagEnviaCorreoValidacion1 = 1;
	size_t soap_flag_iduRegistroEstadistica1 = 1;
	size_t soap_flag_opcFlagImprimir1 = 1;
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_descripcionMensaje1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "descripcionMensaje", (char**)&a->ns3__resultadoCandidato::descripcionMensaje, "xsd:string"))
				{	soap_flag_descripcionMensaje1--;
					continue;
				}
			}
			if (soap_flag_nombreCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "nombreCorreo", (char**)&a->ns3__resultadoCandidato::nombreCorreo, "xsd:string"))
				{	soap_flag_nombreCorreo1--;
					continue;
				}
			}
			if (soap_flag_numeroValidaCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "numeroValidaCorreo", &a->ns3__resultadoCandidato::numeroValidaCorreo, "xsd:int"))
				{	soap_flag_numeroValidaCorreo1--;
					continue;
				}
			}
			if (soap_flag_opcCandidato1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcCandidato", &a->ns3__resultadoCandidato::opcCandidato, "xsd:short"))
				{	soap_flag_opcCandidato1--;
					continue;
				}
			}
			if (soap_flag_opcFlagEnviaCorreoValidacion1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcFlagEnviaCorreoValidacion", &a->ns3__resultadoCandidato::opcFlagEnviaCorreoValidacion, "xsd:short"))
				{	soap_flag_opcFlagEnviaCorreoValidacion1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroEstadistica1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroEstadistica", (char**)&a->ns3__resultadoCandidato::iduRegistroEstadistica, "xsd:string"))
				{	soap_flag_iduRegistroEstadistica1--;
					continue;
				}
			}
			if (soap_flag_opcFlagImprimir1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToshort(soap, "opcFlagImprimir", &a->ns3__resultadoCandidato::opcFlagImprimir, "xsd:short"))
				{	soap_flag_opcFlagImprimir1--;
					continue;
				}
			}
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__resultadoCandidato::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__resultadoCandidato *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__resultadoCandidato, SOAP_TYPE_ns3__resultadoCandidato, sizeof(ns3__resultadoCandidato), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__resultadoCandidato * SOAP_FMAC2 soap_instantiate_ns3__resultadoCandidato(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__resultadoCandidato(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__resultadoCandidato *p;
	size_t k = sizeof(ns3__resultadoCandidato);
	if (n < 0)
	{	p = SOAP_NEW(ns3__resultadoCandidato);
		if (p)
			((ns3__resultadoCandidato*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__resultadoCandidato, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__resultadoCandidato*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__resultadoCandidato location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__resultadoCandidato, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__resultadoCandidato::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__resultadoCandidato(soap, tag ? tag : "ns3:resultadoCandidato", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__resultadoCandidato::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__resultadoCandidato(soap, this, tag, type);
}

SOAP_FMAC3 ns3__resultadoCandidato * SOAP_FMAC4 soap_get_ns3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__resultadoCandidato(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validaCandidatoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__validaCandidatoResponse::code);
	soap_default_string(soap, &this->ns3__validaCandidatoResponse::message);
	this->ns3__validaCandidatoResponse::resultadoCandidato = NULL;
	/* transient soap skipped */
}

void ns3__validaCandidatoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoResponse::message);
	soap_serialize_PointerTons3__resultadoCandidato(soap, &this->ns3__validaCandidatoResponse::resultadoCandidato);
#endif
}

int ns3__validaCandidatoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validaCandidatoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaCandidatoResponse(struct soap *soap, const char *tag, int id, const ns3__validaCandidatoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validaCandidatoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__validaCandidatoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__validaCandidatoResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__resultadoCandidato(soap, "resultadoCandidato", -1, &a->ns3__validaCandidatoResponse::resultadoCandidato, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validaCandidatoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validaCandidatoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validaCandidatoResponse * SOAP_FMAC4 soap_in_ns3__validaCandidatoResponse(struct soap *soap, const char *tag, ns3__validaCandidatoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validaCandidatoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validaCandidatoResponse, sizeof(ns3__validaCandidatoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validaCandidatoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validaCandidatoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_resultadoCandidato1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__validaCandidatoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__validaCandidatoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_resultadoCandidato1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__resultadoCandidato(soap, "resultadoCandidato", &a->ns3__validaCandidatoResponse::resultadoCandidato, "ns3:resultadoCandidato"))
				{	soap_flag_resultadoCandidato1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__validaCandidatoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validaCandidatoResponse, SOAP_TYPE_ns3__validaCandidatoResponse, sizeof(ns3__validaCandidatoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validaCandidatoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validaCandidatoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validaCandidatoResponse *p;
	size_t k = sizeof(ns3__validaCandidatoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validaCandidatoResponse);
		if (p)
			((ns3__validaCandidatoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validaCandidatoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validaCandidatoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validaCandidatoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validaCandidatoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validaCandidatoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validaCandidatoResponse(soap, tag ? tag : "ns3:validaCandidatoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validaCandidatoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validaCandidatoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validaCandidatoResponse * SOAP_FMAC4 soap_get_ns3__validaCandidatoResponse(struct soap *soap, ns3__validaCandidatoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validaCandidatoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validaCandidatoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::empleado);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::numeroCliente);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::claveDivision);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::claveRegion);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::montoCompra);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::adicional);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::caja);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::numeroCentro);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::numeroZona);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::origen);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::subOrigen);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::tipoCliente);
	soap_default_string(soap, &this->ns3__validaCandidatoRequest::area);
	/* transient soap skipped */
}

void ns3__validaCandidatoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::empleado);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::numeroCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::claveDivision);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::claveRegion);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::montoCompra);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::adicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::caja);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::numeroCentro);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::numeroZona);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::origen);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::subOrigen);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::tipoCliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__validaCandidatoRequest::area);
#endif
}

int ns3__validaCandidatoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validaCandidatoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaCandidatoRequest(struct soap *soap, const char *tag, int id, const ns3__validaCandidatoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validaCandidatoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "empleado", -1, (char*const*)&a->ns3__validaCandidatoRequest::empleado, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroCliente", -1, (char*const*)&a->ns3__validaCandidatoRequest::numeroCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "claveDivision", -1, (char*const*)&a->ns3__validaCandidatoRequest::claveDivision, ""))
		return soap->error;
	if (soap_out_string(soap, "claveRegion", -1, (char*const*)&a->ns3__validaCandidatoRequest::claveRegion, ""))
		return soap->error;
	if (soap_out_string(soap, "montoCompra", -1, (char*const*)&a->ns3__validaCandidatoRequest::montoCompra, ""))
		return soap->error;
	if (soap_out_string(soap, "adicional", -1, (char*const*)&a->ns3__validaCandidatoRequest::adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "caja", -1, (char*const*)&a->ns3__validaCandidatoRequest::caja, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroCentro", -1, (char*const*)&a->ns3__validaCandidatoRequest::numeroCentro, ""))
		return soap->error;
	if (soap_out_string(soap, "numeroZona", -1, (char*const*)&a->ns3__validaCandidatoRequest::numeroZona, ""))
		return soap->error;
	if (soap_out_string(soap, "origen", -1, (char*const*)&a->ns3__validaCandidatoRequest::origen, ""))
		return soap->error;
	if (soap_out_string(soap, "subOrigen", -1, (char*const*)&a->ns3__validaCandidatoRequest::subOrigen, ""))
		return soap->error;
	if (soap_out_string(soap, "tipoCliente", -1, (char*const*)&a->ns3__validaCandidatoRequest::tipoCliente, ""))
		return soap->error;
	if (soap_out_string(soap, "area", -1, (char*const*)&a->ns3__validaCandidatoRequest::area, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validaCandidatoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validaCandidatoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validaCandidatoRequest * SOAP_FMAC4 soap_in_ns3__validaCandidatoRequest(struct soap *soap, const char *tag, ns3__validaCandidatoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validaCandidatoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validaCandidatoRequest, sizeof(ns3__validaCandidatoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validaCandidatoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validaCandidatoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_empleado1 = 1;
	size_t soap_flag_numeroCliente1 = 1;
	size_t soap_flag_claveDivision1 = 1;
	size_t soap_flag_claveRegion1 = 1;
	size_t soap_flag_montoCompra1 = 1;
	size_t soap_flag_adicional1 = 1;
	size_t soap_flag_caja1 = 1;
	size_t soap_flag_numeroCentro1 = 1;
	size_t soap_flag_numeroZona1 = 1;
	size_t soap_flag_origen1 = 1;
	size_t soap_flag_subOrigen1 = 1;
	size_t soap_flag_tipoCliente1 = 1;
	size_t soap_flag_area1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_empleado1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "empleado", (char**)&a->ns3__validaCandidatoRequest::empleado, "xsd:string"))
				{	soap_flag_empleado1--;
					continue;
				}
			}
			if (soap_flag_numeroCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCliente", (char**)&a->ns3__validaCandidatoRequest::numeroCliente, "xsd:string"))
				{	soap_flag_numeroCliente1--;
					continue;
				}
			}
			if (soap_flag_claveDivision1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "claveDivision", (char**)&a->ns3__validaCandidatoRequest::claveDivision, "xsd:string"))
				{	soap_flag_claveDivision1--;
					continue;
				}
			}
			if (soap_flag_claveRegion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "claveRegion", (char**)&a->ns3__validaCandidatoRequest::claveRegion, "xsd:string"))
				{	soap_flag_claveRegion1--;
					continue;
				}
			}
			if (soap_flag_montoCompra1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "montoCompra", (char**)&a->ns3__validaCandidatoRequest::montoCompra, "xsd:string"))
				{	soap_flag_montoCompra1--;
					continue;
				}
			}
			if (soap_flag_adicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "adicional", (char**)&a->ns3__validaCandidatoRequest::adicional, "xsd:string"))
				{	soap_flag_adicional1--;
					continue;
				}
			}
			if (soap_flag_caja1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "caja", (char**)&a->ns3__validaCandidatoRequest::caja, "xsd:string"))
				{	soap_flag_caja1--;
					continue;
				}
			}
			if (soap_flag_numeroCentro1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroCentro", (char**)&a->ns3__validaCandidatoRequest::numeroCentro, "xsd:string"))
				{	soap_flag_numeroCentro1--;
					continue;
				}
			}
			if (soap_flag_numeroZona1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numeroZona", (char**)&a->ns3__validaCandidatoRequest::numeroZona, "xsd:string"))
				{	soap_flag_numeroZona1--;
					continue;
				}
			}
			if (soap_flag_origen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "origen", (char**)&a->ns3__validaCandidatoRequest::origen, "xsd:string"))
				{	soap_flag_origen1--;
					continue;
				}
			}
			if (soap_flag_subOrigen1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "subOrigen", (char**)&a->ns3__validaCandidatoRequest::subOrigen, "xsd:string"))
				{	soap_flag_subOrigen1--;
					continue;
				}
			}
			if (soap_flag_tipoCliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "tipoCliente", (char**)&a->ns3__validaCandidatoRequest::tipoCliente, "xsd:string"))
				{	soap_flag_tipoCliente1--;
					continue;
				}
			}
			if (soap_flag_area1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "area", (char**)&a->ns3__validaCandidatoRequest::area, "xsd:string"))
				{	soap_flag_area1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__validaCandidatoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validaCandidatoRequest, SOAP_TYPE_ns3__validaCandidatoRequest, sizeof(ns3__validaCandidatoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validaCandidatoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaCandidatoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validaCandidatoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validaCandidatoRequest *p;
	size_t k = sizeof(ns3__validaCandidatoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validaCandidatoRequest);
		if (p)
			((ns3__validaCandidatoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validaCandidatoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validaCandidatoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validaCandidatoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validaCandidatoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validaCandidatoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validaCandidatoRequest(soap, tag ? tag : "ns3:validaCandidatoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validaCandidatoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validaCandidatoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validaCandidatoRequest * SOAP_FMAC4 soap_get_ns3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validaCandidatoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__dataConsultaCorreo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__dataConsultaCorreo::respuesta = NULL;
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::numcliente);
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::numadicional);
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::iduRegistroCorreo);
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::flagCuenta);
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::flagEstatus);
	soap_default_string(soap, &this->ns3__dataConsultaCorreo::iduRegistroActivacion);
	this->ns3__dataConsultaCorreo::messageEntity = NULL;
	/* transient soap skipped */
}

void ns3__dataConsultaCorreo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns3__dataConsultaCorreo::respuesta);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::numcliente);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::numadicional);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::iduRegistroCorreo);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::flagCuenta);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::flagEstatus);
	soap_serialize_string(soap, (char*const*)&this->ns3__dataConsultaCorreo::iduRegistroActivacion);
	soap_serialize_PointerTons3__messageEntity(soap, &this->ns3__dataConsultaCorreo::messageEntity);
#endif
}

int ns3__dataConsultaCorreo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__dataConsultaCorreo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__dataConsultaCorreo(struct soap *soap, const char *tag, int id, const ns3__dataConsultaCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__dataConsultaCorreo), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "respuesta", -1, &a->ns3__dataConsultaCorreo::respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "numcliente", -1, (char*const*)&a->ns3__dataConsultaCorreo::numcliente, ""))
		return soap->error;
	if (soap_out_string(soap, "numadicional", -1, (char*const*)&a->ns3__dataConsultaCorreo::numadicional, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroCorreo", -1, (char*const*)&a->ns3__dataConsultaCorreo::iduRegistroCorreo, ""))
		return soap->error;
	if (soap_out_string(soap, "flagCuenta", -1, (char*const*)&a->ns3__dataConsultaCorreo::flagCuenta, ""))
		return soap->error;
	if (soap_out_string(soap, "flagEstatus", -1, (char*const*)&a->ns3__dataConsultaCorreo::flagEstatus, ""))
		return soap->error;
	if (soap_out_string(soap, "iduRegistroActivacion", -1, (char*const*)&a->ns3__dataConsultaCorreo::iduRegistroActivacion, ""))
		return soap->error;
	if (soap_out_PointerTons3__messageEntity(soap, "messageEntity", -1, &a->ns3__dataConsultaCorreo::messageEntity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__dataConsultaCorreo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__dataConsultaCorreo(soap, tag, this, type);
}

SOAP_FMAC3 ns3__dataConsultaCorreo * SOAP_FMAC4 soap_in_ns3__dataConsultaCorreo(struct soap *soap, const char *tag, ns3__dataConsultaCorreo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__dataConsultaCorreo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__dataConsultaCorreo, sizeof(ns3__dataConsultaCorreo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__dataConsultaCorreo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__dataConsultaCorreo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_respuesta1 = 1;
	size_t soap_flag_numcliente1 = 1;
	size_t soap_flag_numadicional1 = 1;
	size_t soap_flag_iduRegistroCorreo1 = 1;
	size_t soap_flag_flagCuenta1 = 1;
	size_t soap_flag_flagEstatus1 = 1;
	size_t soap_flag_iduRegistroActivacion1 = 1;
	size_t soap_flag_messageEntity1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_respuesta1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "respuesta", &a->ns3__dataConsultaCorreo::respuesta, "xsd:int"))
				{	soap_flag_respuesta1--;
					continue;
				}
			}
			if (soap_flag_numcliente1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numcliente", (char**)&a->ns3__dataConsultaCorreo::numcliente, "xsd:string"))
				{	soap_flag_numcliente1--;
					continue;
				}
			}
			if (soap_flag_numadicional1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "numadicional", (char**)&a->ns3__dataConsultaCorreo::numadicional, "xsd:string"))
				{	soap_flag_numadicional1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroCorreo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroCorreo", (char**)&a->ns3__dataConsultaCorreo::iduRegistroCorreo, "xsd:string"))
				{	soap_flag_iduRegistroCorreo1--;
					continue;
				}
			}
			if (soap_flag_flagCuenta1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagCuenta", (char**)&a->ns3__dataConsultaCorreo::flagCuenta, "xsd:string"))
				{	soap_flag_flagCuenta1--;
					continue;
				}
			}
			if (soap_flag_flagEstatus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "flagEstatus", (char**)&a->ns3__dataConsultaCorreo::flagEstatus, "xsd:string"))
				{	soap_flag_flagEstatus1--;
					continue;
				}
			}
			if (soap_flag_iduRegistroActivacion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "iduRegistroActivacion", (char**)&a->ns3__dataConsultaCorreo::iduRegistroActivacion, "xsd:string"))
				{	soap_flag_iduRegistroActivacion1--;
					continue;
				}
			}
			if (soap_flag_messageEntity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__messageEntity(soap, "messageEntity", &a->ns3__dataConsultaCorreo::messageEntity, "ns3:messageEntity"))
				{	soap_flag_messageEntity1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__dataConsultaCorreo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__dataConsultaCorreo, SOAP_TYPE_ns3__dataConsultaCorreo, sizeof(ns3__dataConsultaCorreo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__dataConsultaCorreo * SOAP_FMAC2 soap_instantiate_ns3__dataConsultaCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__dataConsultaCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__dataConsultaCorreo *p;
	size_t k = sizeof(ns3__dataConsultaCorreo);
	if (n < 0)
	{	p = SOAP_NEW(ns3__dataConsultaCorreo);
		if (p)
			((ns3__dataConsultaCorreo*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__dataConsultaCorreo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__dataConsultaCorreo*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__dataConsultaCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__dataConsultaCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__dataConsultaCorreo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__dataConsultaCorreo(soap, tag ? tag : "ns3:dataConsultaCorreo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__dataConsultaCorreo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__dataConsultaCorreo(soap, this, tag, type);
}

SOAP_FMAC3 ns3__dataConsultaCorreo * SOAP_FMAC4 soap_get_ns3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__dataConsultaCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultaCorreoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__consultaCorreoResponse::code);
	soap_default_string(soap, &this->ns3__consultaCorreoResponse::message);
	this->ns3__consultaCorreoResponse::dataConsultaCorreo = NULL;
	/* transient soap skipped */
}

void ns3__consultaCorreoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoResponse::message);
	soap_serialize_PointerTons3__dataConsultaCorreo(soap, &this->ns3__consultaCorreoResponse::dataConsultaCorreo);
#endif
}

int ns3__consultaCorreoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultaCorreoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoResponse(struct soap *soap, const char *tag, int id, const ns3__consultaCorreoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultaCorreoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__consultaCorreoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__consultaCorreoResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__dataConsultaCorreo(soap, "dataConsultaCorreo", -1, &a->ns3__consultaCorreoResponse::dataConsultaCorreo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultaCorreoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultaCorreoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultaCorreoResponse * SOAP_FMAC4 soap_in_ns3__consultaCorreoResponse(struct soap *soap, const char *tag, ns3__consultaCorreoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultaCorreoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultaCorreoResponse, sizeof(ns3__consultaCorreoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultaCorreoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultaCorreoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_dataConsultaCorreo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__consultaCorreoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__consultaCorreoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_dataConsultaCorreo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__dataConsultaCorreo(soap, "dataConsultaCorreo", &a->ns3__consultaCorreoResponse::dataConsultaCorreo, "ns3:dataConsultaCorreo"))
				{	soap_flag_dataConsultaCorreo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__consultaCorreoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultaCorreoResponse, SOAP_TYPE_ns3__consultaCorreoResponse, sizeof(ns3__consultaCorreoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultaCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultaCorreoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultaCorreoResponse *p;
	size_t k = sizeof(ns3__consultaCorreoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultaCorreoResponse);
		if (p)
			((ns3__consultaCorreoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultaCorreoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultaCorreoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultaCorreoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultaCorreoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultaCorreoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultaCorreoResponse(soap, tag ? tag : "ns3:consultaCorreoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultaCorreoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultaCorreoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultaCorreoResponse * SOAP_FMAC4 soap_get_ns3__consultaCorreoResponse(struct soap *soap, ns3__consultaCorreoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultaCorreoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__consultaCorreoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__consultaCorreoRequest::email);
	/* transient soap skipped */
}

void ns3__consultaCorreoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__consultaCorreoRequest::email);
#endif
}

int ns3__consultaCorreoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__consultaCorreoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__consultaCorreoRequest(struct soap *soap, const char *tag, int id, const ns3__consultaCorreoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__consultaCorreoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "email", -1, (char*const*)&a->ns3__consultaCorreoRequest::email, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__consultaCorreoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__consultaCorreoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__consultaCorreoRequest * SOAP_FMAC4 soap_in_ns3__consultaCorreoRequest(struct soap *soap, const char *tag, ns3__consultaCorreoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__consultaCorreoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__consultaCorreoRequest, sizeof(ns3__consultaCorreoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__consultaCorreoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__consultaCorreoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_email1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "email", (char**)&a->ns3__consultaCorreoRequest::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__consultaCorreoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__consultaCorreoRequest, SOAP_TYPE_ns3__consultaCorreoRequest, sizeof(ns3__consultaCorreoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__consultaCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__consultaCorreoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__consultaCorreoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__consultaCorreoRequest *p;
	size_t k = sizeof(ns3__consultaCorreoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__consultaCorreoRequest);
		if (p)
			((ns3__consultaCorreoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__consultaCorreoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__consultaCorreoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__consultaCorreoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__consultaCorreoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__consultaCorreoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__consultaCorreoRequest(soap, tag ? tag : "ns3:consultaCorreoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__consultaCorreoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__consultaCorreoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__consultaCorreoRequest * SOAP_FMAC4 soap_get_ns3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__consultaCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validacionesEmail::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__validacionesEmail::dominiosExceptuados = NULL;
	this->ns3__validacionesEmail::reglasDominiosCorrectos = NULL;
	this->ns3__validacionesEmail::reglasUsuarioPorDominio = NULL;
	/* transient soap skipped */
}

void ns3__validacionesEmail::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTobool(soap, &this->ns3__validacionesEmail::dominiosExceptuados);
	soap_serialize_PointerTobool(soap, &this->ns3__validacionesEmail::reglasDominiosCorrectos);
	soap_serialize_PointerTobool(soap, &this->ns3__validacionesEmail::reglasUsuarioPorDominio);
#endif
}

int ns3__validacionesEmail::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validacionesEmail(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validacionesEmail(struct soap *soap, const char *tag, int id, const ns3__validacionesEmail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validacionesEmail), type))
		return soap->error;
	if (soap_out_PointerTobool(soap, "dominiosExceptuados", -1, &a->ns3__validacionesEmail::dominiosExceptuados, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "reglasDominiosCorrectos", -1, &a->ns3__validacionesEmail::reglasDominiosCorrectos, ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "reglasUsuarioPorDominio", -1, &a->ns3__validacionesEmail::reglasUsuarioPorDominio, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validacionesEmail::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validacionesEmail(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validacionesEmail * SOAP_FMAC4 soap_in_ns3__validacionesEmail(struct soap *soap, const char *tag, ns3__validacionesEmail *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validacionesEmail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validacionesEmail, sizeof(ns3__validacionesEmail), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validacionesEmail)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validacionesEmail *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_dominiosExceptuados1 = 1;
	size_t soap_flag_reglasDominiosCorrectos1 = 1;
	size_t soap_flag_reglasUsuarioPorDominio1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dominiosExceptuados1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "dominiosExceptuados", &a->ns3__validacionesEmail::dominiosExceptuados, "xsd:boolean"))
				{	soap_flag_dominiosExceptuados1--;
					continue;
				}
			}
			if (soap_flag_reglasDominiosCorrectos1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "reglasDominiosCorrectos", &a->ns3__validacionesEmail::reglasDominiosCorrectos, "xsd:boolean"))
				{	soap_flag_reglasDominiosCorrectos1--;
					continue;
				}
			}
			if (soap_flag_reglasUsuarioPorDominio1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTobool(soap, "reglasUsuarioPorDominio", &a->ns3__validacionesEmail::reglasUsuarioPorDominio, "xsd:boolean"))
				{	soap_flag_reglasUsuarioPorDominio1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__validacionesEmail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validacionesEmail, SOAP_TYPE_ns3__validacionesEmail, sizeof(ns3__validacionesEmail), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validacionesEmail * SOAP_FMAC2 soap_instantiate_ns3__validacionesEmail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validacionesEmail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validacionesEmail *p;
	size_t k = sizeof(ns3__validacionesEmail);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validacionesEmail);
		if (p)
			((ns3__validacionesEmail*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validacionesEmail, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validacionesEmail*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validacionesEmail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validacionesEmail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validacionesEmail::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validacionesEmail(soap, tag ? tag : "ns3:validacionesEmail", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validacionesEmail::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validacionesEmail(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validacionesEmail * SOAP_FMAC4 soap_get_ns3__validacionesEmail(struct soap *soap, ns3__validacionesEmail *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validacionesEmail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validaSintaxisCorreoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__messageCode(soap, &this->ns3__validaSintaxisCorreoResponse::code);
	soap_default_string(soap, &this->ns3__validaSintaxisCorreoResponse::message);
	this->ns3__validaSintaxisCorreoResponse::validacionesEmail = NULL;
	/* transient soap skipped */
}

void ns3__validaSintaxisCorreoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validaSintaxisCorreoResponse::message);
	soap_serialize_PointerTons3__validacionesEmail(soap, &this->ns3__validaSintaxisCorreoResponse::validacionesEmail);
#endif
}

int ns3__validaSintaxisCorreoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validaSintaxisCorreoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaSintaxisCorreoResponse(struct soap *soap, const char *tag, int id, const ns3__validaSintaxisCorreoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validaSintaxisCorreoResponse), type))
		return soap->error;
	if (soap_out_ns3__messageCode(soap, "code", -1, &a->ns3__validaSintaxisCorreoResponse::code, ""))
		return soap->error;
	if (soap_out_string(soap, "message", -1, (char*const*)&a->ns3__validaSintaxisCorreoResponse::message, ""))
		return soap->error;
	if (soap_out_PointerTons3__validacionesEmail(soap, "validacionesEmail", -1, &a->ns3__validaSintaxisCorreoResponse::validacionesEmail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validaSintaxisCorreoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validaSintaxisCorreoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoResponse * SOAP_FMAC4 soap_in_ns3__validaSintaxisCorreoResponse(struct soap *soap, const char *tag, ns3__validaSintaxisCorreoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validaSintaxisCorreoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validaSintaxisCorreoResponse, sizeof(ns3__validaSintaxisCorreoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validaSintaxisCorreoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validaSintaxisCorreoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_code1 = 1;
	size_t soap_flag_message1 = 1;
	size_t soap_flag_validacionesEmail1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns3__messageCode(soap, "code", &a->ns3__validaSintaxisCorreoResponse::code, "ns3:messageCode"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "message", (char**)&a->ns3__validaSintaxisCorreoResponse::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap_flag_validacionesEmail1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__validacionesEmail(soap, "validacionesEmail", &a->ns3__validaSintaxisCorreoResponse::validacionesEmail, "ns3:validacionesEmail"))
				{	soap_flag_validacionesEmail1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns3__validaSintaxisCorreoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validaSintaxisCorreoResponse, SOAP_TYPE_ns3__validaSintaxisCorreoResponse, sizeof(ns3__validaSintaxisCorreoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validaSintaxisCorreoResponse * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validaSintaxisCorreoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validaSintaxisCorreoResponse *p;
	size_t k = sizeof(ns3__validaSintaxisCorreoResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validaSintaxisCorreoResponse);
		if (p)
			((ns3__validaSintaxisCorreoResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validaSintaxisCorreoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validaSintaxisCorreoResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validaSintaxisCorreoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validaSintaxisCorreoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validaSintaxisCorreoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validaSintaxisCorreoResponse(soap, tag ? tag : "ns3:validaSintaxisCorreoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validaSintaxisCorreoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validaSintaxisCorreoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoResponse * SOAP_FMAC4 soap_get_ns3__validaSintaxisCorreoResponse(struct soap *soap, ns3__validaSintaxisCorreoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validaSintaxisCorreoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__validaSintaxisCorreoRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__validaSintaxisCorreoRequest::email);
	/* transient soap skipped */
}

void ns3__validaSintaxisCorreoRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns3__validaSintaxisCorreoRequest::email);
#endif
}

int ns3__validaSintaxisCorreoRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__validaSintaxisCorreoRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__validaSintaxisCorreoRequest(struct soap *soap, const char *tag, int id, const ns3__validaSintaxisCorreoRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__validaSintaxisCorreoRequest), type))
		return soap->error;
	if (soap_out_string(soap, "email", -1, (char*const*)&a->ns3__validaSintaxisCorreoRequest::email, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__validaSintaxisCorreoRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__validaSintaxisCorreoRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoRequest * SOAP_FMAC4 soap_in_ns3__validaSintaxisCorreoRequest(struct soap *soap, const char *tag, ns3__validaSintaxisCorreoRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__validaSintaxisCorreoRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, sizeof(ns3__validaSintaxisCorreoRequest), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__validaSintaxisCorreoRequest)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__validaSintaxisCorreoRequest *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_email1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "email", (char**)&a->ns3__validaSintaxisCorreoRequest::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__validaSintaxisCorreoRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, sizeof(ns3__validaSintaxisCorreoRequest), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__validaSintaxisCorreoRequest * SOAP_FMAC2 soap_instantiate_ns3__validaSintaxisCorreoRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__validaSintaxisCorreoRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__validaSintaxisCorreoRequest *p;
	size_t k = sizeof(ns3__validaSintaxisCorreoRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns3__validaSintaxisCorreoRequest);
		if (p)
			((ns3__validaSintaxisCorreoRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns3__validaSintaxisCorreoRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns3__validaSintaxisCorreoRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__validaSintaxisCorreoRequest location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns3__validaSintaxisCorreoRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__validaSintaxisCorreoRequest(soap, tag ? tag : "ns3:validaSintaxisCorreoRequest", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__validaSintaxisCorreoRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__validaSintaxisCorreoRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoRequest * SOAP_FMAC4 soap_get_ns3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__validaSintaxisCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__entrada::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns2__entrada::idu_num);
	soap_default_string(soap, &this->ns2__entrada::des_Template64);
	soap_default_string(soap, &this->ns2__entrada::num_nivel);
	/* transient soap skipped */
}

void ns2__entrada::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns2__entrada::idu_num);
	soap_serialize_string(soap, (char*const*)&this->ns2__entrada::des_Template64);
	soap_serialize_string(soap, (char*const*)&this->ns2__entrada::num_nivel);
#endif
}

int ns2__entrada::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__entrada(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__entrada(struct soap *soap, const char *tag, int id, const ns2__entrada *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__entrada), type))
		return soap->error;
	if (!a->ns2__entrada::idu_num)
	{	if (soap_element_empty(soap, "idu-num"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "idu-num", -1, (char*const*)&a->ns2__entrada::idu_num, ""))
		return soap->error;
	if (!a->ns2__entrada::des_Template64)
	{	if (soap_element_empty(soap, "des-Template64"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "des-Template64", -1, (char*const*)&a->ns2__entrada::des_Template64, ""))
		return soap->error;
	if (!a->ns2__entrada::num_nivel)
	{	if (soap_element_empty(soap, "num-nivel"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "num-nivel", -1, (char*const*)&a->ns2__entrada::num_nivel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__entrada::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__entrada(soap, tag, this, type);
}

SOAP_FMAC3 ns2__entrada * SOAP_FMAC4 soap_in_ns2__entrada(struct soap *soap, const char *tag, ns2__entrada *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__entrada *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__entrada, sizeof(ns2__entrada), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__entrada)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__entrada *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_idu_num1 = 1;
	size_t soap_flag_des_Template641 = 1;
	size_t soap_flag_num_nivel1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idu_num1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "idu-num", (char**)&a->ns2__entrada::idu_num, "xsd:string"))
				{	soap_flag_idu_num1--;
					continue;
				}
			}
			if (soap_flag_des_Template641 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "des-Template64", (char**)&a->ns2__entrada::des_Template64, "xsd:string"))
				{	soap_flag_des_Template641--;
					continue;
				}
			}
			if (soap_flag_num_nivel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-nivel", (char**)&a->ns2__entrada::num_nivel, "xsd:string"))
				{	soap_flag_num_nivel1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->ns2__entrada::idu_num || !a->ns2__entrada::des_Template64 || !a->ns2__entrada::num_nivel))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns2__entrada *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__entrada, SOAP_TYPE_ns2__entrada, sizeof(ns2__entrada), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__entrada * SOAP_FMAC2 soap_instantiate_ns2__entrada(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__entrada(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__entrada *p;
	size_t k = sizeof(ns2__entrada);
	if (n < 0)
	{	p = SOAP_NEW(ns2__entrada);
		if (p)
			((ns2__entrada*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns2__entrada, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns2__entrada*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__entrada location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__entrada, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns2__entrada::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__entrada(soap, tag ? tag : "ns2:entrada", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__entrada::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__entrada(soap, this, tag, type);
}

SOAP_FMAC3 ns2__entrada * SOAP_FMAC4 soap_get_ns2__entrada(struct soap *soap, ns2__entrada *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__entrada(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__insertaMovimientos(struct soap *soap, struct __ns3__insertaMovimientos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__insertaMovimientosRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__insertaMovimientos(struct soap *soap, const struct __ns3__insertaMovimientos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__insertaMovimientosRequest(soap, &a->ns3__insertaMovimientosRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__insertaMovimientos(struct soap *soap, const char *tag, int id, const struct __ns3__insertaMovimientos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__insertaMovimientosRequest(soap, "ns3:insertaMovimientosRequest", -1, &a->ns3__insertaMovimientosRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__insertaMovimientos * SOAP_FMAC4 soap_in___ns3__insertaMovimientos(struct soap *soap, const char *tag, struct __ns3__insertaMovimientos *a, const char *type)
{
	size_t soap_flag_ns3__insertaMovimientosRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__insertaMovimientos *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__insertaMovimientos, sizeof(struct __ns3__insertaMovimientos), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__insertaMovimientos(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__insertaMovimientosRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__insertaMovimientosRequest(soap, "ns3:insertaMovimientosRequest", &a->ns3__insertaMovimientosRequest_, "ns3:insertaMovimientosRequest"))
				{	soap_flag_ns3__insertaMovimientosRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__insertaMovimientos * SOAP_FMAC2 soap_instantiate___ns3__insertaMovimientos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__insertaMovimientos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__insertaMovimientos *p;
	size_t k = sizeof(struct __ns3__insertaMovimientos);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__insertaMovimientos);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__insertaMovimientos, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__insertaMovimientos location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__insertaMovimientos, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__insertaMovimientos(struct soap *soap, const struct __ns3__insertaMovimientos *a, const char *tag, const char *type)
{
	if (soap_out___ns3__insertaMovimientos(soap, tag ? tag : "-ns3:insertaMovimientos", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__insertaMovimientos * SOAP_FMAC4 soap_get___ns3__insertaMovimientos(struct soap *soap, struct __ns3__insertaMovimientos *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__insertaMovimientos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__cierreEstaditica(struct soap *soap, struct __ns3__cierreEstaditica *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__cierreEstadisticasRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__cierreEstaditica(struct soap *soap, const struct __ns3__cierreEstaditica *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__cierreEstadisticasRequest(soap, &a->ns3__cierreEstadisticasRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__cierreEstaditica(struct soap *soap, const char *tag, int id, const struct __ns3__cierreEstaditica *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__cierreEstadisticasRequest(soap, "ns3:cierreEstadisticasRequest", -1, &a->ns3__cierreEstadisticasRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__cierreEstaditica * SOAP_FMAC4 soap_in___ns3__cierreEstaditica(struct soap *soap, const char *tag, struct __ns3__cierreEstaditica *a, const char *type)
{
	size_t soap_flag_ns3__cierreEstadisticasRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__cierreEstaditica *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__cierreEstaditica, sizeof(struct __ns3__cierreEstaditica), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__cierreEstaditica(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__cierreEstadisticasRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__cierreEstadisticasRequest(soap, "ns3:cierreEstadisticasRequest", &a->ns3__cierreEstadisticasRequest_, "ns3:cierreEstadisticasRequest"))
				{	soap_flag_ns3__cierreEstadisticasRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__cierreEstaditica * SOAP_FMAC2 soap_instantiate___ns3__cierreEstaditica(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__cierreEstaditica(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__cierreEstaditica *p;
	size_t k = sizeof(struct __ns3__cierreEstaditica);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__cierreEstaditica);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__cierreEstaditica, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__cierreEstaditica location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__cierreEstaditica, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__cierreEstaditica(struct soap *soap, const struct __ns3__cierreEstaditica *a, const char *tag, const char *type)
{
	if (soap_out___ns3__cierreEstaditica(soap, tag ? tag : "-ns3:cierreEstaditica", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__cierreEstaditica * SOAP_FMAC4 soap_get___ns3__cierreEstaditica(struct soap *soap, struct __ns3__cierreEstaditica *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__cierreEstaditica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, struct __ns3__consultarIndicadoresPorNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__consultarIndicadoresPorNumeroClienteRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const struct __ns3__consultarIndicadoresPorNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, &a->ns3__consultarIndicadoresPorNumeroClienteRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const char *tag, int id, const struct __ns3__consultarIndicadoresPorNumeroCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, "ns3:consultarIndicadoresPorNumeroClienteRequest", -1, &a->ns3__consultarIndicadoresPorNumeroClienteRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC4 soap_in___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const char *tag, struct __ns3__consultarIndicadoresPorNumeroCliente *a, const char *type)
{
	size_t soap_flag_ns3__consultarIndicadoresPorNumeroClienteRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__consultarIndicadoresPorNumeroCliente *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente, sizeof(struct __ns3__consultarIndicadoresPorNumeroCliente), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__consultarIndicadoresPorNumeroCliente(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__consultarIndicadoresPorNumeroClienteRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, "ns3:consultarIndicadoresPorNumeroClienteRequest", &a->ns3__consultarIndicadoresPorNumeroClienteRequest_, "ns3:consultarIndicadoresPorNumeroClienteRequest"))
				{	soap_flag_ns3__consultarIndicadoresPorNumeroClienteRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__consultarIndicadoresPorNumeroCliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__consultarIndicadoresPorNumeroCliente *p;
	size_t k = sizeof(struct __ns3__consultarIndicadoresPorNumeroCliente);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__consultarIndicadoresPorNumeroCliente);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__consultarIndicadoresPorNumeroCliente, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__consultarIndicadoresPorNumeroCliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__consultarIndicadoresPorNumeroCliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, const struct __ns3__consultarIndicadoresPorNumeroCliente *a, const char *tag, const char *type)
{
	if (soap_out___ns3__consultarIndicadoresPorNumeroCliente(soap, tag ? tag : "-ns3:consultarIndicadoresPorNumeroCliente", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultarIndicadoresPorNumeroCliente * SOAP_FMAC4 soap_get___ns3__consultarIndicadoresPorNumeroCliente(struct soap *soap, struct __ns3__consultarIndicadoresPorNumeroCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__consultarIndicadoresPorNumeroCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultarIndicadoresPorCorreo(struct soap *soap, struct __ns3__consultarIndicadoresPorCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__consultarIndicadoresPorCorreoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const struct __ns3__consultarIndicadoresPorCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, &a->ns3__consultarIndicadoresPorCorreoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const char *tag, int id, const struct __ns3__consultarIndicadoresPorCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, "ns3:consultarIndicadoresPorCorreoRequest", -1, &a->ns3__consultarIndicadoresPorCorreoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC4 soap_in___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const char *tag, struct __ns3__consultarIndicadoresPorCorreo *a, const char *type)
{
	size_t soap_flag_ns3__consultarIndicadoresPorCorreoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__consultarIndicadoresPorCorreo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__consultarIndicadoresPorCorreo, sizeof(struct __ns3__consultarIndicadoresPorCorreo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__consultarIndicadoresPorCorreo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__consultarIndicadoresPorCorreoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, "ns3:consultarIndicadoresPorCorreoRequest", &a->ns3__consultarIndicadoresPorCorreoRequest_, "ns3:consultarIndicadoresPorCorreoRequest"))
				{	soap_flag_ns3__consultarIndicadoresPorCorreoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultarIndicadoresPorCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__consultarIndicadoresPorCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__consultarIndicadoresPorCorreo *p;
	size_t k = sizeof(struct __ns3__consultarIndicadoresPorCorreo);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__consultarIndicadoresPorCorreo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__consultarIndicadoresPorCorreo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__consultarIndicadoresPorCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__consultarIndicadoresPorCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultarIndicadoresPorCorreo(struct soap *soap, const struct __ns3__consultarIndicadoresPorCorreo *a, const char *tag, const char *type)
{
	if (soap_out___ns3__consultarIndicadoresPorCorreo(soap, tag ? tag : "-ns3:consultarIndicadoresPorCorreo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultarIndicadoresPorCorreo * SOAP_FMAC4 soap_get___ns3__consultarIndicadoresPorCorreo(struct soap *soap, struct __ns3__consultarIndicadoresPorCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__consultarIndicadoresPorCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, struct __ns3__consultaCorreoPorNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__consultaCorreoPorNumeroClienteRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const struct __ns3__consultaCorreoPorNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, &a->ns3__consultaCorreoPorNumeroClienteRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const char *tag, int id, const struct __ns3__consultaCorreoPorNumeroCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, "ns3:consultaCorreoPorNumeroClienteRequest", -1, &a->ns3__consultaCorreoPorNumeroClienteRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC4 soap_in___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const char *tag, struct __ns3__consultaCorreoPorNumeroCliente *a, const char *type)
{
	size_t soap_flag_ns3__consultaCorreoPorNumeroClienteRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__consultaCorreoPorNumeroCliente *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente, sizeof(struct __ns3__consultaCorreoPorNumeroCliente), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__consultaCorreoPorNumeroCliente(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__consultaCorreoPorNumeroClienteRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, "ns3:consultaCorreoPorNumeroClienteRequest", &a->ns3__consultaCorreoPorNumeroClienteRequest_, "ns3:consultaCorreoPorNumeroClienteRequest"))
				{	soap_flag_ns3__consultaCorreoPorNumeroClienteRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__consultaCorreoPorNumeroCliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__consultaCorreoPorNumeroCliente *p;
	size_t k = sizeof(struct __ns3__consultaCorreoPorNumeroCliente);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__consultaCorreoPorNumeroCliente);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__consultaCorreoPorNumeroCliente, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__consultaCorreoPorNumeroCliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__consultaCorreoPorNumeroCliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, const struct __ns3__consultaCorreoPorNumeroCliente *a, const char *tag, const char *type)
{
	if (soap_out___ns3__consultaCorreoPorNumeroCliente(soap, tag ? tag : "-ns3:consultaCorreoPorNumeroCliente", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultaCorreoPorNumeroCliente * SOAP_FMAC4 soap_get___ns3__consultaCorreoPorNumeroCliente(struct soap *soap, struct __ns3__consultaCorreoPorNumeroCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__consultaCorreoPorNumeroCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__bloqueEstadistica(struct soap *soap, struct __ns3__bloqueEstadistica *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__bloqueEstadisticaRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__bloqueEstadistica(struct soap *soap, const struct __ns3__bloqueEstadistica *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__bloqueEstadisticaRequest(soap, &a->ns3__bloqueEstadisticaRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__bloqueEstadistica(struct soap *soap, const char *tag, int id, const struct __ns3__bloqueEstadistica *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__bloqueEstadisticaRequest(soap, "ns3:bloqueEstadisticaRequest", -1, &a->ns3__bloqueEstadisticaRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__bloqueEstadistica * SOAP_FMAC4 soap_in___ns3__bloqueEstadistica(struct soap *soap, const char *tag, struct __ns3__bloqueEstadistica *a, const char *type)
{
	size_t soap_flag_ns3__bloqueEstadisticaRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__bloqueEstadistica *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__bloqueEstadistica, sizeof(struct __ns3__bloqueEstadistica), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__bloqueEstadistica(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__bloqueEstadisticaRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__bloqueEstadisticaRequest(soap, "ns3:bloqueEstadisticaRequest", &a->ns3__bloqueEstadisticaRequest_, "ns3:bloqueEstadisticaRequest"))
				{	soap_flag_ns3__bloqueEstadisticaRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__bloqueEstadistica * SOAP_FMAC2 soap_instantiate___ns3__bloqueEstadistica(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__bloqueEstadistica(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__bloqueEstadistica *p;
	size_t k = sizeof(struct __ns3__bloqueEstadistica);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__bloqueEstadistica);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__bloqueEstadistica, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__bloqueEstadistica location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__bloqueEstadistica, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__bloqueEstadistica(struct soap *soap, const struct __ns3__bloqueEstadistica *a, const char *tag, const char *type)
{
	if (soap_out___ns3__bloqueEstadistica(soap, tag ? tag : "-ns3:bloqueEstadistica", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__bloqueEstadistica * SOAP_FMAC4 soap_get___ns3__bloqueEstadistica(struct soap *soap, struct __ns3__bloqueEstadistica *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__bloqueEstadistica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__registroCorreoBancoppel(struct soap *soap, struct __ns3__registroCorreoBancoppel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__registroCorreoBancoppelRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__registroCorreoBancoppel(struct soap *soap, const struct __ns3__registroCorreoBancoppel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__registroCorreoBancoppelRequest(soap, &a->ns3__registroCorreoBancoppelRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__registroCorreoBancoppel(struct soap *soap, const char *tag, int id, const struct __ns3__registroCorreoBancoppel *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__registroCorreoBancoppelRequest(soap, "ns3:registroCorreoBancoppelRequest", -1, &a->ns3__registroCorreoBancoppelRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__registroCorreoBancoppel * SOAP_FMAC4 soap_in___ns3__registroCorreoBancoppel(struct soap *soap, const char *tag, struct __ns3__registroCorreoBancoppel *a, const char *type)
{
	size_t soap_flag_ns3__registroCorreoBancoppelRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__registroCorreoBancoppel *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__registroCorreoBancoppel, sizeof(struct __ns3__registroCorreoBancoppel), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__registroCorreoBancoppel(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__registroCorreoBancoppelRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__registroCorreoBancoppelRequest(soap, "ns3:registroCorreoBancoppelRequest", &a->ns3__registroCorreoBancoppelRequest_, "ns3:registroCorreoBancoppelRequest"))
				{	soap_flag_ns3__registroCorreoBancoppelRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__registroCorreoBancoppel * SOAP_FMAC2 soap_instantiate___ns3__registroCorreoBancoppel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__registroCorreoBancoppel(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__registroCorreoBancoppel *p;
	size_t k = sizeof(struct __ns3__registroCorreoBancoppel);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__registroCorreoBancoppel);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__registroCorreoBancoppel, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__registroCorreoBancoppel location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__registroCorreoBancoppel, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__registroCorreoBancoppel(struct soap *soap, const struct __ns3__registroCorreoBancoppel *a, const char *tag, const char *type)
{
	if (soap_out___ns3__registroCorreoBancoppel(soap, tag ? tag : "-ns3:registroCorreoBancoppel", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__registroCorreoBancoppel * SOAP_FMAC4 soap_get___ns3__registroCorreoBancoppel(struct soap *soap, struct __ns3__registroCorreoBancoppel *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__registroCorreoBancoppel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__registroCorreo(struct soap *soap, struct __ns3__registroCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__registroCorreoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__registroCorreo(struct soap *soap, const struct __ns3__registroCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__registroCorreoRequest(soap, &a->ns3__registroCorreoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__registroCorreo(struct soap *soap, const char *tag, int id, const struct __ns3__registroCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__registroCorreoRequest(soap, "ns3:registroCorreoRequest", -1, &a->ns3__registroCorreoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__registroCorreo * SOAP_FMAC4 soap_in___ns3__registroCorreo(struct soap *soap, const char *tag, struct __ns3__registroCorreo *a, const char *type)
{
	size_t soap_flag_ns3__registroCorreoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__registroCorreo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__registroCorreo, sizeof(struct __ns3__registroCorreo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__registroCorreo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__registroCorreoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__registroCorreoRequest(soap, "ns3:registroCorreoRequest", &a->ns3__registroCorreoRequest_, "ns3:registroCorreoRequest"))
				{	soap_flag_ns3__registroCorreoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__registroCorreo * SOAP_FMAC2 soap_instantiate___ns3__registroCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__registroCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__registroCorreo *p;
	size_t k = sizeof(struct __ns3__registroCorreo);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__registroCorreo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__registroCorreo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__registroCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__registroCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__registroCorreo(struct soap *soap, const struct __ns3__registroCorreo *a, const char *tag, const char *type)
{
	if (soap_out___ns3__registroCorreo(soap, tag ? tag : "-ns3:registroCorreo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__registroCorreo * SOAP_FMAC4 soap_get___ns3__registroCorreo(struct soap *soap, struct __ns3__registroCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__registroCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__desligueClienteNumeroCliente(struct soap *soap, struct __ns3__desligueClienteNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__desligueClienteNumeroClienteRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__desligueClienteNumeroCliente(struct soap *soap, const struct __ns3__desligueClienteNumeroCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__desligueClienteNumeroClienteRequest(soap, &a->ns3__desligueClienteNumeroClienteRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__desligueClienteNumeroCliente(struct soap *soap, const char *tag, int id, const struct __ns3__desligueClienteNumeroCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__desligueClienteNumeroClienteRequest(soap, "ns3:desligueClienteNumeroClienteRequest", -1, &a->ns3__desligueClienteNumeroClienteRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC4 soap_in___ns3__desligueClienteNumeroCliente(struct soap *soap, const char *tag, struct __ns3__desligueClienteNumeroCliente *a, const char *type)
{
	size_t soap_flag_ns3__desligueClienteNumeroClienteRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__desligueClienteNumeroCliente *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__desligueClienteNumeroCliente, sizeof(struct __ns3__desligueClienteNumeroCliente), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__desligueClienteNumeroCliente(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__desligueClienteNumeroClienteRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__desligueClienteNumeroClienteRequest(soap, "ns3:desligueClienteNumeroClienteRequest", &a->ns3__desligueClienteNumeroClienteRequest_, "ns3:desligueClienteNumeroClienteRequest"))
				{	soap_flag_ns3__desligueClienteNumeroClienteRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteNumeroCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__desligueClienteNumeroCliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__desligueClienteNumeroCliente *p;
	size_t k = sizeof(struct __ns3__desligueClienteNumeroCliente);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__desligueClienteNumeroCliente);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__desligueClienteNumeroCliente, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__desligueClienteNumeroCliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__desligueClienteNumeroCliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__desligueClienteNumeroCliente(struct soap *soap, const struct __ns3__desligueClienteNumeroCliente *a, const char *tag, const char *type)
{
	if (soap_out___ns3__desligueClienteNumeroCliente(soap, tag ? tag : "-ns3:desligueClienteNumeroCliente", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__desligueClienteNumeroCliente * SOAP_FMAC4 soap_get___ns3__desligueClienteNumeroCliente(struct soap *soap, struct __ns3__desligueClienteNumeroCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__desligueClienteNumeroCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__desligueClienteCorreo(struct soap *soap, struct __ns3__desligueClienteCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__desligueClienteCorreoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__desligueClienteCorreo(struct soap *soap, const struct __ns3__desligueClienteCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__desligueClienteCorreoRequest(soap, &a->ns3__desligueClienteCorreoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__desligueClienteCorreo(struct soap *soap, const char *tag, int id, const struct __ns3__desligueClienteCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__desligueClienteCorreoRequest(soap, "ns3:desligueClienteCorreoRequest", -1, &a->ns3__desligueClienteCorreoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__desligueClienteCorreo * SOAP_FMAC4 soap_in___ns3__desligueClienteCorreo(struct soap *soap, const char *tag, struct __ns3__desligueClienteCorreo *a, const char *type)
{
	size_t soap_flag_ns3__desligueClienteCorreoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__desligueClienteCorreo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__desligueClienteCorreo, sizeof(struct __ns3__desligueClienteCorreo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__desligueClienteCorreo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__desligueClienteCorreoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__desligueClienteCorreoRequest(soap, "ns3:desligueClienteCorreoRequest", &a->ns3__desligueClienteCorreoRequest_, "ns3:desligueClienteCorreoRequest"))
				{	soap_flag_ns3__desligueClienteCorreoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__desligueClienteCorreo * SOAP_FMAC2 soap_instantiate___ns3__desligueClienteCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__desligueClienteCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__desligueClienteCorreo *p;
	size_t k = sizeof(struct __ns3__desligueClienteCorreo);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__desligueClienteCorreo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__desligueClienteCorreo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__desligueClienteCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__desligueClienteCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__desligueClienteCorreo(struct soap *soap, const struct __ns3__desligueClienteCorreo *a, const char *tag, const char *type)
{
	if (soap_out___ns3__desligueClienteCorreo(soap, tag ? tag : "-ns3:desligueClienteCorreo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__desligueClienteCorreo * SOAP_FMAC4 soap_get___ns3__desligueClienteCorreo(struct soap *soap, struct __ns3__desligueClienteCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__desligueClienteCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validarFrecuencia(struct soap *soap, struct __ns3__validarFrecuencia *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__validarFrecuenciaRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validarFrecuencia(struct soap *soap, const struct __ns3__validarFrecuencia *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__validarFrecuenciaRequest(soap, &a->ns3__validarFrecuenciaRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validarFrecuencia(struct soap *soap, const char *tag, int id, const struct __ns3__validarFrecuencia *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__validarFrecuenciaRequest(soap, "ns3:validarFrecuenciaRequest", -1, &a->ns3__validarFrecuenciaRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validarFrecuencia * SOAP_FMAC4 soap_in___ns3__validarFrecuencia(struct soap *soap, const char *tag, struct __ns3__validarFrecuencia *a, const char *type)
{
	size_t soap_flag_ns3__validarFrecuenciaRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__validarFrecuencia *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__validarFrecuencia, sizeof(struct __ns3__validarFrecuencia), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__validarFrecuencia(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__validarFrecuenciaRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__validarFrecuenciaRequest(soap, "ns3:validarFrecuenciaRequest", &a->ns3__validarFrecuenciaRequest_, "ns3:validarFrecuenciaRequest"))
				{	soap_flag_ns3__validarFrecuenciaRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__validarFrecuencia * SOAP_FMAC2 soap_instantiate___ns3__validarFrecuencia(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__validarFrecuencia(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__validarFrecuencia *p;
	size_t k = sizeof(struct __ns3__validarFrecuencia);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__validarFrecuencia);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__validarFrecuencia, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__validarFrecuencia location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__validarFrecuencia, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validarFrecuencia(struct soap *soap, const struct __ns3__validarFrecuencia *a, const char *tag, const char *type)
{
	if (soap_out___ns3__validarFrecuencia(soap, tag ? tag : "-ns3:validarFrecuencia", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validarFrecuencia * SOAP_FMAC4 soap_get___ns3__validarFrecuencia(struct soap *soap, struct __ns3__validarFrecuencia *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__validarFrecuencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validaCandidato(struct soap *soap, struct __ns3__validaCandidato *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__validaCandidatoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validaCandidato(struct soap *soap, const struct __ns3__validaCandidato *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__validaCandidatoRequest(soap, &a->ns3__validaCandidatoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validaCandidato(struct soap *soap, const char *tag, int id, const struct __ns3__validaCandidato *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__validaCandidatoRequest(soap, "ns3:validaCandidatoRequest", -1, &a->ns3__validaCandidatoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validaCandidato * SOAP_FMAC4 soap_in___ns3__validaCandidato(struct soap *soap, const char *tag, struct __ns3__validaCandidato *a, const char *type)
{
	size_t soap_flag_ns3__validaCandidatoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__validaCandidato *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__validaCandidato, sizeof(struct __ns3__validaCandidato), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__validaCandidato(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__validaCandidatoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__validaCandidatoRequest(soap, "ns3:validaCandidatoRequest", &a->ns3__validaCandidatoRequest_, "ns3:validaCandidatoRequest"))
				{	soap_flag_ns3__validaCandidatoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__validaCandidato * SOAP_FMAC2 soap_instantiate___ns3__validaCandidato(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__validaCandidato(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__validaCandidato *p;
	size_t k = sizeof(struct __ns3__validaCandidato);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__validaCandidato);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__validaCandidato, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__validaCandidato location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__validaCandidato, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validaCandidato(struct soap *soap, const struct __ns3__validaCandidato *a, const char *tag, const char *type)
{
	if (soap_out___ns3__validaCandidato(soap, tag ? tag : "-ns3:validaCandidato", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validaCandidato * SOAP_FMAC4 soap_get___ns3__validaCandidato(struct soap *soap, struct __ns3__validaCandidato *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__validaCandidato(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__consultaCorreo(struct soap *soap, struct __ns3__consultaCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__consultaCorreoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__consultaCorreo(struct soap *soap, const struct __ns3__consultaCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__consultaCorreoRequest(soap, &a->ns3__consultaCorreoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__consultaCorreo(struct soap *soap, const char *tag, int id, const struct __ns3__consultaCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__consultaCorreoRequest(soap, "ns3:consultaCorreoRequest", -1, &a->ns3__consultaCorreoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultaCorreo * SOAP_FMAC4 soap_in___ns3__consultaCorreo(struct soap *soap, const char *tag, struct __ns3__consultaCorreo *a, const char *type)
{
	size_t soap_flag_ns3__consultaCorreoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__consultaCorreo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__consultaCorreo, sizeof(struct __ns3__consultaCorreo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__consultaCorreo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__consultaCorreoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__consultaCorreoRequest(soap, "ns3:consultaCorreoRequest", &a->ns3__consultaCorreoRequest_, "ns3:consultaCorreoRequest"))
				{	soap_flag_ns3__consultaCorreoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__consultaCorreo * SOAP_FMAC2 soap_instantiate___ns3__consultaCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__consultaCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__consultaCorreo *p;
	size_t k = sizeof(struct __ns3__consultaCorreo);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__consultaCorreo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__consultaCorreo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__consultaCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__consultaCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__consultaCorreo(struct soap *soap, const struct __ns3__consultaCorreo *a, const char *tag, const char *type)
{
	if (soap_out___ns3__consultaCorreo(soap, tag ? tag : "-ns3:consultaCorreo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__consultaCorreo * SOAP_FMAC4 soap_get___ns3__consultaCorreo(struct soap *soap, struct __ns3__consultaCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__consultaCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__validaSintaxisCorreo(struct soap *soap, struct __ns3__validaSintaxisCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__validaSintaxisCorreoRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__validaSintaxisCorreo(struct soap *soap, const struct __ns3__validaSintaxisCorreo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__validaSintaxisCorreoRequest(soap, &a->ns3__validaSintaxisCorreoRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__validaSintaxisCorreo(struct soap *soap, const char *tag, int id, const struct __ns3__validaSintaxisCorreo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons3__validaSintaxisCorreoRequest(soap, "ns3:validaSintaxisCorreoRequest", -1, &a->ns3__validaSintaxisCorreoRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validaSintaxisCorreo * SOAP_FMAC4 soap_in___ns3__validaSintaxisCorreo(struct soap *soap, const char *tag, struct __ns3__validaSintaxisCorreo *a, const char *type)
{
	size_t soap_flag_ns3__validaSintaxisCorreoRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns3__validaSintaxisCorreo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__validaSintaxisCorreo, sizeof(struct __ns3__validaSintaxisCorreo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__validaSintaxisCorreo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__validaSintaxisCorreoRequest_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__validaSintaxisCorreoRequest(soap, "ns3:validaSintaxisCorreoRequest", &a->ns3__validaSintaxisCorreoRequest_, "ns3:validaSintaxisCorreoRequest"))
				{	soap_flag_ns3__validaSintaxisCorreoRequest_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns3__validaSintaxisCorreo * SOAP_FMAC2 soap_instantiate___ns3__validaSintaxisCorreo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__validaSintaxisCorreo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns3__validaSintaxisCorreo *p;
	size_t k = sizeof(struct __ns3__validaSintaxisCorreo);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns3__validaSintaxisCorreo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns3__validaSintaxisCorreo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns3__validaSintaxisCorreo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns3__validaSintaxisCorreo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__validaSintaxisCorreo(struct soap *soap, const struct __ns3__validaSintaxisCorreo *a, const char *tag, const char *type)
{
	if (soap_out___ns3__validaSintaxisCorreo(soap, tag ? tag : "-ns3:validaSintaxisCorreo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__validaSintaxisCorreo * SOAP_FMAC4 soap_get___ns3__validaSintaxisCorreo(struct soap *soap, struct __ns3__validaSintaxisCorreo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__validaSintaxisCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Empleado(struct soap *soap, struct ns2__Empleado *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->entradaEmpleado = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Empleado(struct soap *soap, const struct ns2__Empleado *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__entrada(soap, &a->entradaEmpleado);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Empleado(struct soap *soap, const char *tag, int id, const struct ns2__Empleado *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Empleado), type))
		return soap->error;
	if (soap_out_PointerTons2__entrada(soap, "entradaEmpleado", -1, &a->entradaEmpleado, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Empleado * SOAP_FMAC4 soap_in_ns2__Empleado(struct soap *soap, const char *tag, struct ns2__Empleado *a, const char *type)
{
	size_t soap_flag_entradaEmpleado = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Empleado *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Empleado, sizeof(struct ns2__Empleado), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Empleado(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entradaEmpleado && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__entrada(soap, "entradaEmpleado", &a->entradaEmpleado, "ns2:entrada"))
				{	soap_flag_entradaEmpleado--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Empleado *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Empleado, SOAP_TYPE_ns2__Empleado, sizeof(struct ns2__Empleado), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__Empleado * SOAP_FMAC2 soap_instantiate_ns2__Empleado(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Empleado(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__Empleado *p;
	size_t k = sizeof(struct ns2__Empleado);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__Empleado);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__Empleado, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__Empleado location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__Empleado, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Empleado(struct soap *soap, const struct ns2__Empleado *a, const char *tag, const char *type)
{
	if (soap_out_ns2__Empleado(soap, tag ? tag : "ns2:Empleado", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Empleado * SOAP_FMAC4 soap_get_ns2__Empleado(struct soap *soap, struct ns2__Empleado *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Empleado(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EmpleadoResponse(struct soap *soap, struct ns2__EmpleadoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->num_respuesta);
	soap_default_string(soap, &a->num_adicional);
	soap_default_string(soap, &a->num_dedo);
	soap_default_string(soap, &a->fec_actualizacion);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EmpleadoResponse(struct soap *soap, const struct ns2__EmpleadoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->num_respuesta);
	soap_serialize_string(soap, (char*const*)&a->num_adicional);
	soap_serialize_string(soap, (char*const*)&a->num_dedo);
	soap_serialize_string(soap, (char*const*)&a->fec_actualizacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EmpleadoResponse(struct soap *soap, const char *tag, int id, const struct ns2__EmpleadoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__EmpleadoResponse), type))
		return soap->error;
	if (soap_out_string(soap, "num-respuesta", -1, (char*const*)&a->num_respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "num-adicional", -1, (char*const*)&a->num_adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "num-dedo", -1, (char*const*)&a->num_dedo, ""))
		return soap->error;
	if (soap_out_string(soap, "fec-actualizacion", -1, (char*const*)&a->fec_actualizacion, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__EmpleadoResponse * SOAP_FMAC4 soap_in_ns2__EmpleadoResponse(struct soap *soap, const char *tag, struct ns2__EmpleadoResponse *a, const char *type)
{
	size_t soap_flag_num_respuesta = 1;
	size_t soap_flag_num_adicional = 1;
	size_t soap_flag_num_dedo = 1;
	size_t soap_flag_fec_actualizacion = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__EmpleadoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__EmpleadoResponse, sizeof(struct ns2__EmpleadoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__EmpleadoResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_num_respuesta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-respuesta", (char**)&a->num_respuesta, "xsd:string"))
				{	soap_flag_num_respuesta--;
					continue;
				}
			}
			if (soap_flag_num_adicional && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-adicional", (char**)&a->num_adicional, "xsd:string"))
				{	soap_flag_num_adicional--;
					continue;
				}
			}
			if (soap_flag_num_dedo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-dedo", (char**)&a->num_dedo, "xsd:string"))
				{	soap_flag_num_dedo--;
					continue;
				}
			}
			if (soap_flag_fec_actualizacion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "fec-actualizacion", (char**)&a->fec_actualizacion, "xsd:string"))
				{	soap_flag_fec_actualizacion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__EmpleadoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__EmpleadoResponse, SOAP_TYPE_ns2__EmpleadoResponse, sizeof(struct ns2__EmpleadoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__EmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__EmpleadoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__EmpleadoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__EmpleadoResponse *p;
	size_t k = sizeof(struct ns2__EmpleadoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__EmpleadoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__EmpleadoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__EmpleadoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__EmpleadoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EmpleadoResponse(struct soap *soap, const struct ns2__EmpleadoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__EmpleadoResponse(soap, tag ? tag : "ns2:EmpleadoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__EmpleadoResponse * SOAP_FMAC4 soap_get_ns2__EmpleadoResponse(struct soap *soap, struct ns2__EmpleadoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__EmpleadoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Cliente(struct soap *soap, struct ns2__Cliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->entradaCliente = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Cliente(struct soap *soap, const struct ns2__Cliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__entrada(soap, &a->entradaCliente);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Cliente(struct soap *soap, const char *tag, int id, const struct ns2__Cliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Cliente), type))
		return soap->error;
	if (soap_out_PointerTons2__entrada(soap, "entradaCliente", -1, &a->entradaCliente, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Cliente * SOAP_FMAC4 soap_in_ns2__Cliente(struct soap *soap, const char *tag, struct ns2__Cliente *a, const char *type)
{
	size_t soap_flag_entradaCliente = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Cliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Cliente, sizeof(struct ns2__Cliente), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Cliente(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entradaCliente && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__entrada(soap, "entradaCliente", &a->entradaCliente, "ns2:entrada"))
				{	soap_flag_entradaCliente--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Cliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Cliente, SOAP_TYPE_ns2__Cliente, sizeof(struct ns2__Cliente), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__Cliente * SOAP_FMAC2 soap_instantiate_ns2__Cliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Cliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__Cliente *p;
	size_t k = sizeof(struct ns2__Cliente);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__Cliente);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__Cliente, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__Cliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__Cliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Cliente(struct soap *soap, const struct ns2__Cliente *a, const char *tag, const char *type)
{
	if (soap_out_ns2__Cliente(soap, tag ? tag : "ns2:Cliente", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Cliente * SOAP_FMAC4 soap_get_ns2__Cliente(struct soap *soap, struct ns2__Cliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Cliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ClienteResponse(struct soap *soap, struct ns2__ClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->num_respuesta);
	soap_default_string(soap, &a->num_adicional);
	soap_default_string(soap, &a->num_dedo);
	soap_default_string(soap, &a->fec_actualizacion);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ClienteResponse(struct soap *soap, const struct ns2__ClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->num_respuesta);
	soap_serialize_string(soap, (char*const*)&a->num_adicional);
	soap_serialize_string(soap, (char*const*)&a->num_dedo);
	soap_serialize_string(soap, (char*const*)&a->fec_actualizacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__ClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ClienteResponse), type))
		return soap->error;
	if (soap_out_string(soap, "num-respuesta", -1, (char*const*)&a->num_respuesta, ""))
		return soap->error;
	if (soap_out_string(soap, "num-adicional", -1, (char*const*)&a->num_adicional, ""))
		return soap->error;
	if (soap_out_string(soap, "num-dedo", -1, (char*const*)&a->num_dedo, ""))
		return soap->error;
	if (soap_out_string(soap, "fec-actualizacion", -1, (char*const*)&a->fec_actualizacion, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ClienteResponse * SOAP_FMAC4 soap_in_ns2__ClienteResponse(struct soap *soap, const char *tag, struct ns2__ClienteResponse *a, const char *type)
{
	size_t soap_flag_num_respuesta = 1;
	size_t soap_flag_num_adicional = 1;
	size_t soap_flag_num_dedo = 1;
	size_t soap_flag_fec_actualizacion = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ClienteResponse, sizeof(struct ns2__ClienteResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ClienteResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_num_respuesta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-respuesta", (char**)&a->num_respuesta, "xsd:string"))
				{	soap_flag_num_respuesta--;
					continue;
				}
			}
			if (soap_flag_num_adicional && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-adicional", (char**)&a->num_adicional, "xsd:string"))
				{	soap_flag_num_adicional--;
					continue;
				}
			}
			if (soap_flag_num_dedo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-dedo", (char**)&a->num_dedo, "xsd:string"))
				{	soap_flag_num_dedo--;
					continue;
				}
			}
			if (soap_flag_fec_actualizacion && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "fec-actualizacion", (char**)&a->fec_actualizacion, "xsd:string"))
				{	soap_flag_fec_actualizacion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ClienteResponse, SOAP_TYPE_ns2__ClienteResponse, sizeof(struct ns2__ClienteResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ClienteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ClienteResponse *p;
	size_t k = sizeof(struct ns2__ClienteResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__ClienteResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__ClienteResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ClienteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__ClienteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ClienteResponse(struct soap *soap, const struct ns2__ClienteResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ClienteResponse(soap, tag ? tag : "ns2:ClienteResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ClienteResponse * SOAP_FMAC4 soap_get_ns2__ClienteResponse(struct soap *soap, struct ns2__ClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaEmpleado(struct soap *soap, struct ns2__ConsultaEmpleado *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->entradaEmpleado = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaEmpleado(struct soap *soap, const struct ns2__ConsultaEmpleado *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__entrada(soap, &a->entradaEmpleado);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaEmpleado(struct soap *soap, const char *tag, int id, const struct ns2__ConsultaEmpleado *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ConsultaEmpleado), type))
		return soap->error;
	if (soap_out_PointerTons2__entrada(soap, "entradaEmpleado", -1, &a->entradaEmpleado, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ConsultaEmpleado * SOAP_FMAC4 soap_in_ns2__ConsultaEmpleado(struct soap *soap, const char *tag, struct ns2__ConsultaEmpleado *a, const char *type)
{
	size_t soap_flag_entradaEmpleado = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ConsultaEmpleado *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ConsultaEmpleado, sizeof(struct ns2__ConsultaEmpleado), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ConsultaEmpleado(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entradaEmpleado && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__entrada(soap, "entradaEmpleado", &a->entradaEmpleado, "ns2:entrada"))
				{	soap_flag_entradaEmpleado--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ConsultaEmpleado *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ConsultaEmpleado, SOAP_TYPE_ns2__ConsultaEmpleado, sizeof(struct ns2__ConsultaEmpleado), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ConsultaEmpleado * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleado(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ConsultaEmpleado(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ConsultaEmpleado *p;
	size_t k = sizeof(struct ns2__ConsultaEmpleado);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__ConsultaEmpleado);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__ConsultaEmpleado, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ConsultaEmpleado location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__ConsultaEmpleado, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaEmpleado(struct soap *soap, const struct ns2__ConsultaEmpleado *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ConsultaEmpleado(soap, tag ? tag : "ns2:ConsultaEmpleado", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ConsultaEmpleado * SOAP_FMAC4 soap_get_ns2__ConsultaEmpleado(struct soap *soap, struct ns2__ConsultaEmpleado *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ConsultaEmpleado(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaEmpleadoResponse(struct soap *soap, struct ns2__ConsultaEmpleadoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->num_respuesta);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaEmpleadoResponse(struct soap *soap, const struct ns2__ConsultaEmpleadoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->num_respuesta);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaEmpleadoResponse(struct soap *soap, const char *tag, int id, const struct ns2__ConsultaEmpleadoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ConsultaEmpleadoResponse), type))
		return soap->error;
	if (!a->num_respuesta)
	{	if (soap_element_empty(soap, "num-respuesta"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "num-respuesta", -1, (char*const*)&a->num_respuesta, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC4 soap_in_ns2__ConsultaEmpleadoResponse(struct soap *soap, const char *tag, struct ns2__ConsultaEmpleadoResponse *a, const char *type)
{
	size_t soap_flag_num_respuesta = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ConsultaEmpleadoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ConsultaEmpleadoResponse, sizeof(struct ns2__ConsultaEmpleadoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ConsultaEmpleadoResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_num_respuesta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-respuesta", (char**)&a->num_respuesta, "xsd:string"))
				{	soap_flag_num_respuesta--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->num_respuesta))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__ConsultaEmpleadoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ConsultaEmpleadoResponse, SOAP_TYPE_ns2__ConsultaEmpleadoResponse, sizeof(struct ns2__ConsultaEmpleadoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaEmpleadoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ConsultaEmpleadoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ConsultaEmpleadoResponse *p;
	size_t k = sizeof(struct ns2__ConsultaEmpleadoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__ConsultaEmpleadoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__ConsultaEmpleadoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ConsultaEmpleadoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__ConsultaEmpleadoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaEmpleadoResponse(struct soap *soap, const struct ns2__ConsultaEmpleadoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ConsultaEmpleadoResponse(soap, tag ? tag : "ns2:ConsultaEmpleadoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ConsultaEmpleadoResponse * SOAP_FMAC4 soap_get_ns2__ConsultaEmpleadoResponse(struct soap *soap, struct ns2__ConsultaEmpleadoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ConsultaEmpleadoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaCliente(struct soap *soap, struct ns2__ConsultaCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->entradaCliente = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaCliente(struct soap *soap, const struct ns2__ConsultaCliente *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__entrada(soap, &a->entradaCliente);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaCliente(struct soap *soap, const char *tag, int id, const struct ns2__ConsultaCliente *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ConsultaCliente), type))
		return soap->error;
	if (soap_out_PointerTons2__entrada(soap, "entradaCliente", -1, &a->entradaCliente, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ConsultaCliente * SOAP_FMAC4 soap_in_ns2__ConsultaCliente(struct soap *soap, const char *tag, struct ns2__ConsultaCliente *a, const char *type)
{
	size_t soap_flag_entradaCliente = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ConsultaCliente *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ConsultaCliente, sizeof(struct ns2__ConsultaCliente), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ConsultaCliente(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entradaCliente && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__entrada(soap, "entradaCliente", &a->entradaCliente, "ns2:entrada"))
				{	soap_flag_entradaCliente--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ConsultaCliente *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ConsultaCliente, SOAP_TYPE_ns2__ConsultaCliente, sizeof(struct ns2__ConsultaCliente), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ConsultaCliente * SOAP_FMAC2 soap_instantiate_ns2__ConsultaCliente(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ConsultaCliente(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ConsultaCliente *p;
	size_t k = sizeof(struct ns2__ConsultaCliente);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__ConsultaCliente);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__ConsultaCliente, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ConsultaCliente location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__ConsultaCliente, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaCliente(struct soap *soap, const struct ns2__ConsultaCliente *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ConsultaCliente(soap, tag ? tag : "ns2:ConsultaCliente", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ConsultaCliente * SOAP_FMAC4 soap_get_ns2__ConsultaCliente(struct soap *soap, struct ns2__ConsultaCliente *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ConsultaCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ConsultaClienteResponse(struct soap *soap, struct ns2__ConsultaClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->num_respuesta);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ConsultaClienteResponse(struct soap *soap, const struct ns2__ConsultaClienteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->num_respuesta);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConsultaClienteResponse(struct soap *soap, const char *tag, int id, const struct ns2__ConsultaClienteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ConsultaClienteResponse), type))
		return soap->error;
	if (!a->num_respuesta)
	{	if (soap_element_empty(soap, "num-respuesta"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "num-respuesta", -1, (char*const*)&a->num_respuesta, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ConsultaClienteResponse * SOAP_FMAC4 soap_in_ns2__ConsultaClienteResponse(struct soap *soap, const char *tag, struct ns2__ConsultaClienteResponse *a, const char *type)
{
	size_t soap_flag_num_respuesta = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ConsultaClienteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ConsultaClienteResponse, sizeof(struct ns2__ConsultaClienteResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ConsultaClienteResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_num_respuesta && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "num-respuesta", (char**)&a->num_respuesta, "xsd:string"))
				{	soap_flag_num_respuesta--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->num_respuesta))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__ConsultaClienteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ConsultaClienteResponse, SOAP_TYPE_ns2__ConsultaClienteResponse, sizeof(struct ns2__ConsultaClienteResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ConsultaClienteResponse * SOAP_FMAC2 soap_instantiate_ns2__ConsultaClienteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ConsultaClienteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ConsultaClienteResponse *p;
	size_t k = sizeof(struct ns2__ConsultaClienteResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns2__ConsultaClienteResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns2__ConsultaClienteResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ConsultaClienteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__ConsultaClienteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ConsultaClienteResponse(struct soap *soap, const struct ns2__ConsultaClienteResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ConsultaClienteResponse(soap, tag ? tag : "ns2:ConsultaClienteResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ConsultaClienteResponse * SOAP_FMAC4 soap_get_ns2__ConsultaClienteResponse(struct soap *soap, struct ns2__ConsultaClienteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ConsultaClienteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__ServiceException_ = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__ServiceException(soap, &a->ns3__ServiceException_);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons3__ServiceException(soap, "ns3:ServiceException", -1, &a->ns3__ServiceException_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns3__ServiceException_ = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__ServiceException_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__ServiceException(soap, "ns3:ServiceException", &a->ns3__ServiceException_, "ns3:ServiceException"))
				{	soap_flag_ns3__ServiceException_--;
					continue;
				}
			}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__insertaMovimientosRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__insertaMovimientosRequest(struct soap *soap, const char *tag, int id, ns3__insertaMovimientosRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__insertaMovimientosRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__insertaMovimientosRequest ? type : NULL);
}

SOAP_FMAC3 ns3__insertaMovimientosRequest ** SOAP_FMAC4 soap_in_PointerTons3__insertaMovimientosRequest(struct soap *soap, const char *tag, ns3__insertaMovimientosRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__insertaMovimientosRequest **)soap_malloc(soap, sizeof(ns3__insertaMovimientosRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__insertaMovimientosRequest *)soap_instantiate_ns3__insertaMovimientosRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__insertaMovimientosRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__insertaMovimientosRequest, sizeof(ns3__insertaMovimientosRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__insertaMovimientosRequest(soap, tag ? tag : "ns3:insertaMovimientosRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__insertaMovimientosRequest ** SOAP_FMAC4 soap_get_PointerTons3__insertaMovimientosRequest(struct soap *soap, ns3__insertaMovimientosRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__insertaMovimientosRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__cierreEstadisticasRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__cierreEstadisticasRequest(struct soap *soap, const char *tag, int id, ns3__cierreEstadisticasRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__cierreEstadisticasRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__cierreEstadisticasRequest ? type : NULL);
}

SOAP_FMAC3 ns3__cierreEstadisticasRequest ** SOAP_FMAC4 soap_in_PointerTons3__cierreEstadisticasRequest(struct soap *soap, const char *tag, ns3__cierreEstadisticasRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__cierreEstadisticasRequest **)soap_malloc(soap, sizeof(ns3__cierreEstadisticasRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__cierreEstadisticasRequest *)soap_instantiate_ns3__cierreEstadisticasRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__cierreEstadisticasRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__cierreEstadisticasRequest, sizeof(ns3__cierreEstadisticasRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__cierreEstadisticasRequest(soap, tag ? tag : "ns3:cierreEstadisticasRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__cierreEstadisticasRequest ** SOAP_FMAC4 soap_get_PointerTons3__cierreEstadisticasRequest(struct soap *soap, ns3__cierreEstadisticasRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__cierreEstadisticasRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *tag, int id, ns3__consultarIndicadoresPorNumeroClienteRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest ? type : NULL);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorNumeroClienteRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__consultarIndicadoresPorNumeroClienteRequest **)soap_malloc(soap, sizeof(ns3__consultarIndicadoresPorNumeroClienteRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__consultarIndicadoresPorNumeroClienteRequest *)soap_instantiate_ns3__consultarIndicadoresPorNumeroClienteRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__consultarIndicadoresPorNumeroClienteRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__consultarIndicadoresPorNumeroClienteRequest, sizeof(ns3__consultarIndicadoresPorNumeroClienteRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, tag ? tag : "ns3:consultarIndicadoresPorNumeroClienteRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(struct soap *soap, ns3__consultarIndicadoresPorNumeroClienteRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__consultarIndicadoresPorNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *tag, int id, ns3__consultarIndicadoresPorCorreoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap *soap, const char *tag, ns3__consultarIndicadoresPorCorreoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__consultarIndicadoresPorCorreoRequest **)soap_malloc(soap, sizeof(ns3__consultarIndicadoresPorCorreoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__consultarIndicadoresPorCorreoRequest *)soap_instantiate_ns3__consultarIndicadoresPorCorreoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__consultarIndicadoresPorCorreoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__consultarIndicadoresPorCorreoRequest, sizeof(ns3__consultarIndicadoresPorCorreoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, tag ? tag : "ns3:consultarIndicadoresPorCorreoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__consultarIndicadoresPorCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultarIndicadoresPorCorreoRequest(struct soap *soap, ns3__consultarIndicadoresPorCorreoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__consultarIndicadoresPorCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *tag, int id, ns3__consultaCorreoPorNumeroClienteRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest ? type : NULL);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, const char *tag, ns3__consultaCorreoPorNumeroClienteRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__consultaCorreoPorNumeroClienteRequest **)soap_malloc(soap, sizeof(ns3__consultaCorreoPorNumeroClienteRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__consultaCorreoPorNumeroClienteRequest *)soap_instantiate_ns3__consultaCorreoPorNumeroClienteRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__consultaCorreoPorNumeroClienteRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__consultaCorreoPorNumeroClienteRequest, sizeof(ns3__consultaCorreoPorNumeroClienteRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, tag ? tag : "ns3:consultaCorreoPorNumeroClienteRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__consultaCorreoPorNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultaCorreoPorNumeroClienteRequest(struct soap *soap, ns3__consultaCorreoPorNumeroClienteRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__consultaCorreoPorNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__bloqueEstadisticaRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__bloqueEstadisticaRequest(struct soap *soap, const char *tag, int id, ns3__bloqueEstadisticaRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__bloqueEstadisticaRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__bloqueEstadisticaRequest ? type : NULL);
}

SOAP_FMAC3 ns3__bloqueEstadisticaRequest ** SOAP_FMAC4 soap_in_PointerTons3__bloqueEstadisticaRequest(struct soap *soap, const char *tag, ns3__bloqueEstadisticaRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__bloqueEstadisticaRequest **)soap_malloc(soap, sizeof(ns3__bloqueEstadisticaRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__bloqueEstadisticaRequest *)soap_instantiate_ns3__bloqueEstadisticaRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__bloqueEstadisticaRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__bloqueEstadisticaRequest, sizeof(ns3__bloqueEstadisticaRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__bloqueEstadisticaRequest(soap, tag ? tag : "ns3:bloqueEstadisticaRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__bloqueEstadisticaRequest ** SOAP_FMAC4 soap_get_PointerTons3__bloqueEstadisticaRequest(struct soap *soap, ns3__bloqueEstadisticaRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__bloqueEstadisticaRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__registroCorreoBancoppelRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__registroCorreoBancoppelRequest(struct soap *soap, const char *tag, int id, ns3__registroCorreoBancoppelRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__registroCorreoBancoppelRequest ? type : NULL);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelRequest ** SOAP_FMAC4 soap_in_PointerTons3__registroCorreoBancoppelRequest(struct soap *soap, const char *tag, ns3__registroCorreoBancoppelRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__registroCorreoBancoppelRequest **)soap_malloc(soap, sizeof(ns3__registroCorreoBancoppelRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__registroCorreoBancoppelRequest *)soap_instantiate_ns3__registroCorreoBancoppelRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__registroCorreoBancoppelRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__registroCorreoBancoppelRequest, sizeof(ns3__registroCorreoBancoppelRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__registroCorreoBancoppelRequest(soap, tag ? tag : "ns3:registroCorreoBancoppelRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__registroCorreoBancoppelRequest ** SOAP_FMAC4 soap_get_PointerTons3__registroCorreoBancoppelRequest(struct soap *soap, ns3__registroCorreoBancoppelRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__registroCorreoBancoppelRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__registroCorreoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__registroCorreoRequest(struct soap *soap, const char *tag, int id, ns3__registroCorreoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__registroCorreoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__registroCorreoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__registroCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__registroCorreoRequest(struct soap *soap, const char *tag, ns3__registroCorreoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__registroCorreoRequest **)soap_malloc(soap, sizeof(ns3__registroCorreoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__registroCorreoRequest *)soap_instantiate_ns3__registroCorreoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__registroCorreoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__registroCorreoRequest, sizeof(ns3__registroCorreoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__registroCorreoRequest(soap, tag ? tag : "ns3:registroCorreoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__registroCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__registroCorreoRequest(struct soap *soap, ns3__registroCorreoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__registroCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *tag, int id, ns3__desligueClienteNumeroClienteRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest ? type : NULL);
}

SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest ** SOAP_FMAC4 soap_in_PointerTons3__desligueClienteNumeroClienteRequest(struct soap *soap, const char *tag, ns3__desligueClienteNumeroClienteRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__desligueClienteNumeroClienteRequest **)soap_malloc(soap, sizeof(ns3__desligueClienteNumeroClienteRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__desligueClienteNumeroClienteRequest *)soap_instantiate_ns3__desligueClienteNumeroClienteRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__desligueClienteNumeroClienteRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__desligueClienteNumeroClienteRequest, sizeof(ns3__desligueClienteNumeroClienteRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__desligueClienteNumeroClienteRequest(soap, tag ? tag : "ns3:desligueClienteNumeroClienteRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__desligueClienteNumeroClienteRequest ** SOAP_FMAC4 soap_get_PointerTons3__desligueClienteNumeroClienteRequest(struct soap *soap, ns3__desligueClienteNumeroClienteRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__desligueClienteNumeroClienteRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__desligueClienteCorreoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__desligueClienteCorreoRequest(struct soap *soap, const char *tag, int id, ns3__desligueClienteCorreoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__desligueClienteCorreoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__desligueClienteCorreoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__desligueClienteCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__desligueClienteCorreoRequest(struct soap *soap, const char *tag, ns3__desligueClienteCorreoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__desligueClienteCorreoRequest **)soap_malloc(soap, sizeof(ns3__desligueClienteCorreoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__desligueClienteCorreoRequest *)soap_instantiate_ns3__desligueClienteCorreoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__desligueClienteCorreoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__desligueClienteCorreoRequest, sizeof(ns3__desligueClienteCorreoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__desligueClienteCorreoRequest(soap, tag ? tag : "ns3:desligueClienteCorreoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__desligueClienteCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__desligueClienteCorreoRequest(struct soap *soap, ns3__desligueClienteCorreoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__desligueClienteCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__validarFrecuenciaRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validarFrecuenciaRequest(struct soap *soap, const char *tag, int id, ns3__validarFrecuenciaRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__validarFrecuenciaRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__validarFrecuenciaRequest ? type : NULL);
}

SOAP_FMAC3 ns3__validarFrecuenciaRequest ** SOAP_FMAC4 soap_in_PointerTons3__validarFrecuenciaRequest(struct soap *soap, const char *tag, ns3__validarFrecuenciaRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__validarFrecuenciaRequest **)soap_malloc(soap, sizeof(ns3__validarFrecuenciaRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__validarFrecuenciaRequest *)soap_instantiate_ns3__validarFrecuenciaRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__validarFrecuenciaRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__validarFrecuenciaRequest, sizeof(ns3__validarFrecuenciaRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__validarFrecuenciaRequest(soap, tag ? tag : "ns3:validarFrecuenciaRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__validarFrecuenciaRequest ** SOAP_FMAC4 soap_get_PointerTons3__validarFrecuenciaRequest(struct soap *soap, ns3__validarFrecuenciaRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__validarFrecuenciaRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__validaCandidatoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validaCandidatoRequest(struct soap *soap, const char *tag, int id, ns3__validaCandidatoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__validaCandidatoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__validaCandidatoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__validaCandidatoRequest ** SOAP_FMAC4 soap_in_PointerTons3__validaCandidatoRequest(struct soap *soap, const char *tag, ns3__validaCandidatoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__validaCandidatoRequest **)soap_malloc(soap, sizeof(ns3__validaCandidatoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__validaCandidatoRequest *)soap_instantiate_ns3__validaCandidatoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__validaCandidatoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__validaCandidatoRequest, sizeof(ns3__validaCandidatoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__validaCandidatoRequest(soap, tag ? tag : "ns3:validaCandidatoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__validaCandidatoRequest ** SOAP_FMAC4 soap_get_PointerTons3__validaCandidatoRequest(struct soap *soap, ns3__validaCandidatoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__validaCandidatoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__consultaCorreoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__consultaCorreoRequest(struct soap *soap, const char *tag, int id, ns3__consultaCorreoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__consultaCorreoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__consultaCorreoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__consultaCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__consultaCorreoRequest(struct soap *soap, const char *tag, ns3__consultaCorreoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__consultaCorreoRequest **)soap_malloc(soap, sizeof(ns3__consultaCorreoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__consultaCorreoRequest *)soap_instantiate_ns3__consultaCorreoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__consultaCorreoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__consultaCorreoRequest, sizeof(ns3__consultaCorreoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__consultaCorreoRequest(soap, tag ? tag : "ns3:consultaCorreoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__consultaCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__consultaCorreoRequest(struct soap *soap, ns3__consultaCorreoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__consultaCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__validaSintaxisCorreoRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validaSintaxisCorreoRequest(struct soap *soap, const char *tag, int id, ns3__validaSintaxisCorreoRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__validaSintaxisCorreoRequest ? type : NULL);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoRequest ** SOAP_FMAC4 soap_in_PointerTons3__validaSintaxisCorreoRequest(struct soap *soap, const char *tag, ns3__validaSintaxisCorreoRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__validaSintaxisCorreoRequest **)soap_malloc(soap, sizeof(ns3__validaSintaxisCorreoRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__validaSintaxisCorreoRequest *)soap_instantiate_ns3__validaSintaxisCorreoRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__validaSintaxisCorreoRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__validaSintaxisCorreoRequest, sizeof(ns3__validaSintaxisCorreoRequest), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__validaSintaxisCorreoRequest(soap, tag ? tag : "ns3:validaSintaxisCorreoRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__validaSintaxisCorreoRequest ** SOAP_FMAC4 soap_get_PointerTons3__validaSintaxisCorreoRequest(struct soap *soap, ns3__validaSintaxisCorreoRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__validaSintaxisCorreoRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__entrada(struct soap *soap, ns2__entrada *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__entrada))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__entrada(struct soap *soap, const char *tag, int id, ns2__entrada *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__entrada, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns2__entrada ? type : NULL);
}

SOAP_FMAC3 ns2__entrada ** SOAP_FMAC4 soap_in_PointerTons2__entrada(struct soap *soap, const char *tag, ns2__entrada **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__entrada **)soap_malloc(soap, sizeof(ns2__entrada *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__entrada *)soap_instantiate_ns2__entrada(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns2__entrada **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__entrada, sizeof(ns2__entrada), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__entrada(struct soap *soap, ns2__entrada *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__entrada(soap, tag ? tag : "ns2:entrada", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__entrada ** SOAP_FMAC4 soap_get_PointerTons2__entrada(struct soap *soap, ns2__entrada **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__entrada(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ServiceException(struct soap *soap, ns3__ServiceException *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ServiceException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ServiceException(struct soap *soap, const char *tag, int id, ns3__ServiceException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ServiceException, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__ServiceException ? type : NULL);
}

SOAP_FMAC3 ns3__ServiceException ** SOAP_FMAC4 soap_in_PointerTons3__ServiceException(struct soap *soap, const char *tag, ns3__ServiceException **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ServiceException **)soap_malloc(soap, sizeof(ns3__ServiceException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ServiceException *)soap_instantiate_ns3__ServiceException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__ServiceException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ServiceException, sizeof(ns3__ServiceException), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ServiceException(struct soap *soap, ns3__ServiceException *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__ServiceException(soap, tag ? tag : "ns3:ServiceException", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__ServiceException ** SOAP_FMAC4 soap_get_PointerTons3__ServiceException(struct soap *soap, ns3__ServiceException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ServiceException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__dataInsertaMovimientos))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataInsertaMovimientos(struct soap *soap, const char *tag, int id, ns3__dataInsertaMovimientos *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__dataInsertaMovimientos, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__dataInsertaMovimientos ? type : NULL);
}

SOAP_FMAC3 ns3__dataInsertaMovimientos ** SOAP_FMAC4 soap_in_PointerTons3__dataInsertaMovimientos(struct soap *soap, const char *tag, ns3__dataInsertaMovimientos **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__dataInsertaMovimientos **)soap_malloc(soap, sizeof(ns3__dataInsertaMovimientos *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__dataInsertaMovimientos *)soap_instantiate_ns3__dataInsertaMovimientos(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__dataInsertaMovimientos **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__dataInsertaMovimientos, sizeof(ns3__dataInsertaMovimientos), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__dataInsertaMovimientos(soap, tag ? tag : "ns3:dataInsertaMovimientos", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__dataInsertaMovimientos ** SOAP_FMAC4 soap_get_PointerTons3__dataInsertaMovimientos(struct soap *soap, ns3__dataInsertaMovimientos **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__dataInsertaMovimientos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__dataCierreEstadisticas))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataCierreEstadisticas(struct soap *soap, const char *tag, int id, ns3__dataCierreEstadisticas *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__dataCierreEstadisticas, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__dataCierreEstadisticas ? type : NULL);
}

SOAP_FMAC3 ns3__dataCierreEstadisticas ** SOAP_FMAC4 soap_in_PointerTons3__dataCierreEstadisticas(struct soap *soap, const char *tag, ns3__dataCierreEstadisticas **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__dataCierreEstadisticas **)soap_malloc(soap, sizeof(ns3__dataCierreEstadisticas *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__dataCierreEstadisticas *)soap_instantiate_ns3__dataCierreEstadisticas(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__dataCierreEstadisticas **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__dataCierreEstadisticas, sizeof(ns3__dataCierreEstadisticas), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__dataCierreEstadisticas(soap, tag ? tag : "ns3:dataCierreEstadisticas", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__dataCierreEstadisticas ** SOAP_FMAC4 soap_get_PointerTons3__dataCierreEstadisticas(struct soap *soap, ns3__dataCierreEstadisticas **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__dataCierreEstadisticas(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__Indicador(struct soap *soap, ns3__Indicador **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__Indicador))
		soap_serialize_PointerTons3__Indicador(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__Indicador(struct soap *soap, const char *tag, int id, ns3__Indicador **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__Indicador, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__Indicador(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__Indicador *** SOAP_FMAC4 soap_in_PointerToPointerTons3__Indicador(struct soap *soap, const char *tag, ns3__Indicador ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Indicador ***)soap_malloc(soap, sizeof(ns3__Indicador **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__Indicador(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__Indicador ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Indicador, sizeof(ns3__Indicador), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__Indicador(struct soap *soap, ns3__Indicador **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons3__Indicador(soap, tag ? tag : "ns3:Indicador", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__Indicador *** SOAP_FMAC4 soap_get_PointerToPointerTons3__Indicador(struct soap *soap, ns3__Indicador ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__Indicador(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Indicador(struct soap *soap, ns3__Indicador *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__Indicador))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Indicador(struct soap *soap, const char *tag, int id, ns3__Indicador *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__Indicador, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__Indicador ? type : NULL);
}

SOAP_FMAC3 ns3__Indicador ** SOAP_FMAC4 soap_in_PointerTons3__Indicador(struct soap *soap, const char *tag, ns3__Indicador **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__Indicador **)soap_malloc(soap, sizeof(ns3__Indicador *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__Indicador *)soap_instantiate_ns3__Indicador(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__Indicador **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__Indicador, sizeof(ns3__Indicador), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Indicador(struct soap *soap, ns3__Indicador *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__Indicador(soap, tag ? tag : "ns3:Indicador", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__Indicador ** SOAP_FMAC4 soap_get_PointerTons3__Indicador(struct soap *soap, ns3__Indicador **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__Indicador(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataConsultaPorNumeroCliente(struct soap *soap, const char *tag, int id, ns3__dataConsultaPorNumeroCliente *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__dataConsultaPorNumeroCliente ? type : NULL);
}

SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente ** SOAP_FMAC4 soap_in_PointerTons3__dataConsultaPorNumeroCliente(struct soap *soap, const char *tag, ns3__dataConsultaPorNumeroCliente **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__dataConsultaPorNumeroCliente **)soap_malloc(soap, sizeof(ns3__dataConsultaPorNumeroCliente *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__dataConsultaPorNumeroCliente *)soap_instantiate_ns3__dataConsultaPorNumeroCliente(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__dataConsultaPorNumeroCliente **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__dataConsultaPorNumeroCliente, sizeof(ns3__dataConsultaPorNumeroCliente), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__dataConsultaPorNumeroCliente(soap, tag ? tag : "ns3:dataConsultaPorNumeroCliente", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__dataConsultaPorNumeroCliente ** SOAP_FMAC4 soap_get_PointerTons3__dataConsultaPorNumeroCliente(struct soap *soap, ns3__dataConsultaPorNumeroCliente **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__dataConsultaPorNumeroCliente(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__retornoBloqueEstadistica))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__retornoBloqueEstadistica(struct soap *soap, const char *tag, int id, ns3__retornoBloqueEstadistica *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__retornoBloqueEstadistica, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__retornoBloqueEstadistica ? type : NULL);
}

SOAP_FMAC3 ns3__retornoBloqueEstadistica ** SOAP_FMAC4 soap_in_PointerTons3__retornoBloqueEstadistica(struct soap *soap, const char *tag, ns3__retornoBloqueEstadistica **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__retornoBloqueEstadistica **)soap_malloc(soap, sizeof(ns3__retornoBloqueEstadistica *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__retornoBloqueEstadistica *)soap_instantiate_ns3__retornoBloqueEstadistica(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__retornoBloqueEstadistica **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__retornoBloqueEstadistica, sizeof(ns3__retornoBloqueEstadistica), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__retornoBloqueEstadistica(soap, tag ? tag : "ns3:retornoBloqueEstadistica", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__retornoBloqueEstadistica ** SOAP_FMAC4 soap_get_PointerTons3__retornoBloqueEstadistica(struct soap *soap, ns3__retornoBloqueEstadistica **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__retornoBloqueEstadistica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__estadistica(struct soap *soap, ns3__estadistica *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__estadistica))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__estadistica(struct soap *soap, const char *tag, int id, ns3__estadistica *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__estadistica, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__estadistica ? type : NULL);
}

SOAP_FMAC3 ns3__estadistica ** SOAP_FMAC4 soap_in_PointerTons3__estadistica(struct soap *soap, const char *tag, ns3__estadistica **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__estadistica **)soap_malloc(soap, sizeof(ns3__estadistica *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__estadistica *)soap_instantiate_ns3__estadistica(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__estadistica **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__estadistica, sizeof(ns3__estadistica), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__estadistica(struct soap *soap, ns3__estadistica *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__estadistica(soap, tag ? tag : "ns3:estadistica", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__estadistica ** SOAP_FMAC4 soap_get_PointerTons3__estadistica(struct soap *soap, ns3__estadistica **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__estadistica(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel))
		soap_serialize_PointerTons3__respuestaRegistroCorreoBancoppel(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, int id, ns3__respuestaRegistroCorreoBancoppel **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__respuestaRegistroCorreoBancoppel, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel *** SOAP_FMAC4 soap_in_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, ns3__respuestaRegistroCorreoBancoppel ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__respuestaRegistroCorreoBancoppel ***)soap_malloc(soap, sizeof(ns3__respuestaRegistroCorreoBancoppel **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__respuestaRegistroCorreoBancoppel ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, sizeof(ns3__respuestaRegistroCorreoBancoppel), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(soap, tag ? tag : "ns3:respuestaRegistroCorreoBancoppel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel *** SOAP_FMAC4 soap_get_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, int id, ns3__respuestaRegistroCorreoBancoppel *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel ? type : NULL);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel ** SOAP_FMAC4 soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, const char *tag, ns3__respuestaRegistroCorreoBancoppel **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__respuestaRegistroCorreoBancoppel **)soap_malloc(soap, sizeof(ns3__respuestaRegistroCorreoBancoppel *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__respuestaRegistroCorreoBancoppel *)soap_instantiate_ns3__respuestaRegistroCorreoBancoppel(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__respuestaRegistroCorreoBancoppel **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__respuestaRegistroCorreoBancoppel, sizeof(ns3__respuestaRegistroCorreoBancoppel), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__respuestaRegistroCorreoBancoppel(soap, tag ? tag : "ns3:respuestaRegistroCorreoBancoppel", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreoBancoppel ** SOAP_FMAC4 soap_get_PointerTons3__respuestaRegistroCorreoBancoppel(struct soap *soap, ns3__respuestaRegistroCorreoBancoppel **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__respuestaRegistroCorreoBancoppel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__respuestaRegistroCorreo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaRegistroCorreo(struct soap *soap, const char *tag, int id, ns3__respuestaRegistroCorreo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__respuestaRegistroCorreo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__respuestaRegistroCorreo ? type : NULL);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreo ** SOAP_FMAC4 soap_in_PointerTons3__respuestaRegistroCorreo(struct soap *soap, const char *tag, ns3__respuestaRegistroCorreo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__respuestaRegistroCorreo **)soap_malloc(soap, sizeof(ns3__respuestaRegistroCorreo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__respuestaRegistroCorreo *)soap_instantiate_ns3__respuestaRegistroCorreo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__respuestaRegistroCorreo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__respuestaRegistroCorreo, sizeof(ns3__respuestaRegistroCorreo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__respuestaRegistroCorreo(soap, tag ? tag : "ns3:respuestaRegistroCorreo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__respuestaRegistroCorreo ** SOAP_FMAC4 soap_get_PointerTons3__respuestaRegistroCorreo(struct soap *soap, ns3__respuestaRegistroCorreo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__respuestaRegistroCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__respuestaDesligueCorreo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__respuestaDesligueCorreo(struct soap *soap, const char *tag, int id, ns3__respuestaDesligueCorreo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__respuestaDesligueCorreo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__respuestaDesligueCorreo ? type : NULL);
}

SOAP_FMAC3 ns3__respuestaDesligueCorreo ** SOAP_FMAC4 soap_in_PointerTons3__respuestaDesligueCorreo(struct soap *soap, const char *tag, ns3__respuestaDesligueCorreo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__respuestaDesligueCorreo **)soap_malloc(soap, sizeof(ns3__respuestaDesligueCorreo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__respuestaDesligueCorreo *)soap_instantiate_ns3__respuestaDesligueCorreo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__respuestaDesligueCorreo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__respuestaDesligueCorreo, sizeof(ns3__respuestaDesligueCorreo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__respuestaDesligueCorreo(soap, tag ? tag : "ns3:respuestaDesligueCorreo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__respuestaDesligueCorreo ** SOAP_FMAC4 soap_get_PointerTons3__respuestaDesligueCorreo(struct soap *soap, ns3__respuestaDesligueCorreo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__respuestaDesligueCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__resultadoFrecuencia))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__resultadoFrecuencia(struct soap *soap, const char *tag, int id, ns3__resultadoFrecuencia *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__resultadoFrecuencia, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__resultadoFrecuencia ? type : NULL);
}

SOAP_FMAC3 ns3__resultadoFrecuencia ** SOAP_FMAC4 soap_in_PointerTons3__resultadoFrecuencia(struct soap *soap, const char *tag, ns3__resultadoFrecuencia **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__resultadoFrecuencia **)soap_malloc(soap, sizeof(ns3__resultadoFrecuencia *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__resultadoFrecuencia *)soap_instantiate_ns3__resultadoFrecuencia(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__resultadoFrecuencia **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__resultadoFrecuencia, sizeof(ns3__resultadoFrecuencia), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__resultadoFrecuencia(soap, tag ? tag : "ns3:resultadoFrecuencia", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__resultadoFrecuencia ** SOAP_FMAC4 soap_get_PointerTons3__resultadoFrecuencia(struct soap *soap, ns3__resultadoFrecuencia **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__resultadoFrecuencia(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToshort(struct soap *soap, short *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_short);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToshort(struct soap *soap, const char *tag, int id, short *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_short, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_short(soap, tag, id, *a, type);
}

SOAP_FMAC3 short ** SOAP_FMAC4 soap_in_PointerToshort(struct soap *soap, const char *tag, short **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (short **)soap_malloc(soap, sizeof(short *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_short(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (short **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_short, sizeof(short), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToshort(struct soap *soap, short *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToshort(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short ** SOAP_FMAC4 soap_get_PointerToshort(struct soap *soap, short **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToshort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__resultadoCandidato))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__resultadoCandidato(struct soap *soap, const char *tag, int id, ns3__resultadoCandidato *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__resultadoCandidato, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__resultadoCandidato ? type : NULL);
}

SOAP_FMAC3 ns3__resultadoCandidato ** SOAP_FMAC4 soap_in_PointerTons3__resultadoCandidato(struct soap *soap, const char *tag, ns3__resultadoCandidato **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__resultadoCandidato **)soap_malloc(soap, sizeof(ns3__resultadoCandidato *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__resultadoCandidato *)soap_instantiate_ns3__resultadoCandidato(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__resultadoCandidato **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__resultadoCandidato, sizeof(ns3__resultadoCandidato), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__resultadoCandidato(soap, tag ? tag : "ns3:resultadoCandidato", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__resultadoCandidato ** SOAP_FMAC4 soap_get_PointerTons3__resultadoCandidato(struct soap *soap, ns3__resultadoCandidato **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__resultadoCandidato(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__messageEntity(struct soap *soap, ns3__messageEntity *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__messageEntity))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__messageEntity(struct soap *soap, const char *tag, int id, ns3__messageEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__messageEntity, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__messageEntity ? type : NULL);
}

SOAP_FMAC3 ns3__messageEntity ** SOAP_FMAC4 soap_in_PointerTons3__messageEntity(struct soap *soap, const char *tag, ns3__messageEntity **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__messageEntity **)soap_malloc(soap, sizeof(ns3__messageEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__messageEntity *)soap_instantiate_ns3__messageEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__messageEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__messageEntity, sizeof(ns3__messageEntity), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__messageEntity(struct soap *soap, ns3__messageEntity *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__messageEntity(soap, tag ? tag : "ns3:messageEntity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__messageEntity ** SOAP_FMAC4 soap_get_PointerTons3__messageEntity(struct soap *soap, ns3__messageEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__messageEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__dataConsultaCorreo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__dataConsultaCorreo(struct soap *soap, const char *tag, int id, ns3__dataConsultaCorreo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__dataConsultaCorreo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__dataConsultaCorreo ? type : NULL);
}

SOAP_FMAC3 ns3__dataConsultaCorreo ** SOAP_FMAC4 soap_in_PointerTons3__dataConsultaCorreo(struct soap *soap, const char *tag, ns3__dataConsultaCorreo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__dataConsultaCorreo **)soap_malloc(soap, sizeof(ns3__dataConsultaCorreo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__dataConsultaCorreo *)soap_instantiate_ns3__dataConsultaCorreo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__dataConsultaCorreo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__dataConsultaCorreo, sizeof(ns3__dataConsultaCorreo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__dataConsultaCorreo(soap, tag ? tag : "ns3:dataConsultaCorreo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__dataConsultaCorreo ** SOAP_FMAC4 soap_get_PointerTons3__dataConsultaCorreo(struct soap *soap, ns3__dataConsultaCorreo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__dataConsultaCorreo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTobool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__validacionesEmail(struct soap *soap, ns3__validacionesEmail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__validacionesEmail))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__validacionesEmail(struct soap *soap, const char *tag, int id, ns3__validacionesEmail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__validacionesEmail, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__validacionesEmail ? type : NULL);
}

SOAP_FMAC3 ns3__validacionesEmail ** SOAP_FMAC4 soap_in_PointerTons3__validacionesEmail(struct soap *soap, const char *tag, ns3__validacionesEmail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__validacionesEmail **)soap_malloc(soap, sizeof(ns3__validacionesEmail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__validacionesEmail *)soap_instantiate_ns3__validacionesEmail(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__validacionesEmail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__validacionesEmail, sizeof(ns3__validacionesEmail), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__validacionesEmail(struct soap *soap, ns3__validacionesEmail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__validacionesEmail(soap, tag ? tag : "ns3:validacionesEmail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__validacionesEmail ** SOAP_FMAC4 soap_get_PointerTons3__validacionesEmail(struct soap *soap, ns3__validacionesEmail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__validacionesEmail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
